<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhisheng的博客</title>
  <subtitle>坑要一个个填，路要一步步走！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-25T15:05:17.182Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhisheng Tian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ELK 实时日志分析平台环境搭建</title>
    <link href="http://yoursite.com/2017/12/25/ELK/"/>
    <id>http://yoursite.com/2017/12/25/ELK/</id>
    <published>2017-12-25T15:06:03.858Z</published>
    <updated>2017-12-25T15:05:17.182Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171225/82lhH8E4Hk.jpg-1" alt="mark"></p>
<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>ELK（ElasticSearch, Logstash, Kibana），三者组合在一起搭建实时的日志分析平台，目前好多公司都是这套！<br><a id="more"></a></p>
<ul>
<li>Elasticsearch 是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful 风格接口，多数据源，自动搜索负载等。</li>
<li>Logstash 是一个完全开源的工具，他可以对你的日志进行收集、过滤，并将其存储供以后使用（如，搜索）。</li>
<li>Kibana 也是一个开源和免费的工具，它 Kibana 可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志。</li>
</ul>
<h3 id="安装-ES"><a href="#安装-ES" class="headerlink" title="安装 ES"></a>安装 ES</h3><p>。。。这个省略，不 bb 了，以前写过。。。传送门：<a href="http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/</a></p>
<h3 id="安装-Logstash"><a href="#安装-Logstash" class="headerlink" title="安装 Logstash"></a>安装 Logstash</h3><p>ELK 整套环境搭建版本很关键，最好全统一一个版本，否则出啥问题就不太好找了。这是我见过版本统一最严格的了。而已 ES 版本升了后，其他的都要都要升级，包括其插件。升级代价挺大的，最好一开始就定位好要安装哪个版本！</p>
<p>在官网下好安装包后传到 Linux 上，这是速度最快的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">在 /usr/local 目录下解压：</div><div class="line"></div><div class="line">tar -zxvf  logstash-5.5.2.tar.gz</div><div class="line"></div><div class="line">进入解压后的目录：</div><div class="line"></div><div class="line">cd /usr/local/logstash-5.5.2/bin</div><div class="line"></div><div class="line">新增配置文件：</div><div class="line"></div><div class="line">vim logstash.conf</div><div class="line"></div><div class="line">增加：</div><div class="line"></div><div class="line">input&#123;</div><div class="line">    file&#123;</div><div class="line">      path =&gt; [&quot;/var/log/*.log&quot;]</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">output&#123;</div><div class="line">   elasticsearch&#123;</div><div class="line">       hosts =&gt; [&quot;192.168.153.135:9200&quot;]</div><div class="line">       index =&gt; &quot;logstash__log&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Logstash 的启动方式是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">在 /usr/local/logstash-5.5.2/bin 目录下运行：</div><div class="line"></div><div class="line">./logstash -f logstash.conf</div></pre></td></tr></table></figure>
<h3 id="安装-Kibana"><a href="#安装-Kibana" class="headerlink" title="安装 Kibana"></a>安装 Kibana</h3><p>同样，官网下好安装包，上传到 Linux。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">解压：</div><div class="line"></div><div class="line">tar -zxvf kibana-5.5.2-linux-x86_64.tar.gz</div><div class="line"></div><div class="line">修改配置文件 kibana-5.5.2/config/kibana.yml 如下：</div><div class="line"></div><div class="line">Server.host  //配置机器ip/hostname</div><div class="line"></div><div class="line">Server.name  //此kibana服务的名称</div><div class="line"></div><div class="line">elasticsearch.url  //es master节点url</div></pre></td></tr></table></figure>
<p>Kibana 启动方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">在 /usr/local/kibana-5.5.2/bin 目录下运行：</div><div class="line"></div><div class="line">./kibana</div></pre></td></tr></table></figure>
<p>Web界面访问: <a href="http://ip:5601" target="_blank" rel="external">http://ip:5601</a> 此时需要输入用户名和密码登录,默认分别是 elastic 和 changeme</p>
<h3 id="X-Pack"><a href="#X-Pack" class="headerlink" title="X-Pack"></a>X-Pack</h3><p>X-Pack 是一个 Elastic Stack 的扩展，将安全，警报，监控，报告和图形功能包含在一个易于安装的软件包中。</p>
<p>ES 和 Kibana 都可安装。</p>
<p>插件 x-pack-5.5.2.zip  依旧官网下。</p>
<h4 id="ES-安装-X-Pack"><a href="#ES-安装-X-Pack" class="headerlink" title="ES 安装 X-Pack"></a>ES 安装 X-Pack</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/elasticsearch/bin</div><div class="line"></div><div class="line">./elasticsearch-plugin install file:///opt/es/x-pack-5.5.2.zip</div></pre></td></tr></table></figure>
<p>如果成功：显示如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[root@node1 bin]# ./elasticsearch-plugin install file:///opt/es/x-pack-5.5.2.zip</div><div class="line">-&gt; Downloading file:///opt/es/x-pack-5.5.2.zip</div><div class="line">[=================================================] 100%</div><div class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</div><div class="line">@     WARNING: plugin requires additional permissions     @</div><div class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</div><div class="line">* java.io.FilePermission \\.\pipe\* read,write</div><div class="line">* java.lang.RuntimePermission accessClassInPackage.com.sun.activation.registries</div><div class="line">* java.lang.RuntimePermission getClassLoader</div><div class="line">* java.lang.RuntimePermission setContextClassLoader</div><div class="line">* java.lang.RuntimePermission setFactory</div><div class="line">* java.security.SecurityPermission createPolicy.JavaPolicy</div><div class="line">* java.security.SecurityPermission getPolicy</div><div class="line">* java.security.SecurityPermission putProviderProperty.BC</div><div class="line">* java.security.SecurityPermission setPolicy</div><div class="line">* java.util.PropertyPermission * read,write</div><div class="line">* java.util.PropertyPermission sun.nio.ch.bugLevel write</div><div class="line">* javax.net.ssl.SSLPermission setHostnameVerifier</div><div class="line">See http://docs.oracle.com/javase/8/docs/technotes/guides/security/permissions.html</div><div class="line">for descriptions of what these permissions allow and the associated risks.</div><div class="line"></div><div class="line">Continue with installation? [y/N]y</div><div class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</div><div class="line">@        WARNING: plugin forks a native controller        @</div><div class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</div><div class="line">This plugin launches a native controller that is not subject to the Java</div><div class="line">security manager nor to system call filters.</div><div class="line"></div><div class="line">Continue with installation? [y/N]y</div><div class="line">-&gt; Installed x-pack</div></pre></td></tr></table></figure>
<h4 id="Kibana-安装-X-Pack"><a href="#Kibana-安装-X-Pack" class="headerlink" title="Kibana 安装 X-Pack"></a>Kibana 安装 X-Pack</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/kibana-5.5.2/bin</div><div class="line"></div><div class="line">./kibana-plugin install file:///opt/es/x-pack-5.5.2.zip</div></pre></td></tr></table></figure>
<p>安装成功如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@node1 bin]# ./kibana-plugin install file:///opt/es/x-pack-5.5.2.zip</div><div class="line">Attempting to transfer from file:///opt/es/x-pack-5.5.2.zip</div><div class="line">Transferring 159867054 bytes....................</div><div class="line">Transfer complete</div><div class="line">Retrieving metadata from plugin archive</div><div class="line">Extracting plugin archive</div><div class="line">Extraction complete</div><div class="line">Optimizing and caching browser bundles...</div><div class="line">Plugin installation complete</div></pre></td></tr></table></figure>
<h4 id="启用-x-pack-安全机制"><a href="#启用-x-pack-安全机制" class="headerlink" title="启用 x-pack 安全机制"></a>启用 x-pack 安全机制</h4><p>分别在 kibana.yml 和 elasticsearch.yml 中加入下行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xpack.security.enabled: true</div></pre></td></tr></table></figure>
<p>这样后，你再打开 ES 的 head 界面和 Kibana 管理界面就需要输入账号密码了。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171225/i8ebl0jgLl.png-1" alt="mark"></p>
<p>上图右边是安装 X-Pack 后的，功能多了几个。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>环境搭建很简单，后面如果有时间的话可以再讲讲在 Kibana 的 Dev Tools 上构建 ES 的 JSON 串来对 ES 进行操作。</p>
<p>我还写过 ES 相关的文章：</p>
<p>1、<a href="http://www.54tianzhisheng.cn/2017/09/07/Elasticsearch-analyzers/" target="_blank" rel="external">Elasticsearch 默认分词器和中分分词器之间的比较及使用方法</a></p>
<p>2、<a href="http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/" target="_blank" rel="external">全文搜索引擎 Elasticsearch 集群搭建入门教程</a></p>
<p>3、<a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/" target="_blank" rel="external">ElasticSearch 集群监控</a></p>
<p>4、<a href="http://www.54tianzhisheng.cn/2017/10/18/ElasticSearch-nodes-metrics/" target="_blank" rel="external">ElasticSearch 单个节点监控</a></p>
<h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><blockquote>
<p>本文首发于：<a href="http://www.54tianzhisheng.cn/" target="_blank" rel="external">zhisheng 的博客</a></p>
<p>转载请注明地址：<a href="http://www.54tianzhisheng.cn/2017/12/25/ELK/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/12/25/ELK/</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/171225/82lhH8E4Hk.jpg-1&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;简单介绍&quot;&gt;&lt;a href=&quot;#简单介绍&quot; class=&quot;headerlink&quot; title=&quot;简单介绍&quot;&gt;&lt;/a&gt;简单介绍&lt;/h3&gt;&lt;p&gt;ELK（ElasticSearch, Logstash, Kibana），三者组合在一起搭建实时的日志分析平台，目前好多公司都是这套！&lt;br&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="http://yoursite.com/tags/ElasticSearch/"/>
    
      <category term="LogStash" scheme="http://yoursite.com/tags/LogStash/"/>
    
      <category term="Kibana" scheme="http://yoursite.com/tags/Kibana/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + yilia 搭建博客可能会遇到的所有疑问</title>
    <link href="http://yoursite.com/2017/12/18/hexo-yilia/"/>
    <id>http://yoursite.com/2017/12/18/hexo-yilia/</id>
    <published>2017-12-18T15:38:44.067Z</published>
    <updated>2017-12-18T15:45:11.500Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/BaE3G1imDm.png-1" alt="mark"></p>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>为什么会再次写这篇博客？请看下图：<br><a id="more"></a></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/b4j29CkGgJ.png-1" alt="mark"></p>
<p>这是我博客搜索引擎的主要关键字。为什么会有这些关键字呢？</p>
<p>我猜估计是曾经写了几篇关于搭建博客的文章，被搜索引擎收入了，所以搜索引擎才会将这些流量引导至我的博客，文章如下：</p>
<p>1、<a href="http://www.54tianzhisheng.cn/2017/03/28/%E5%88%A9%E7%94%A8Github%20Page%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/" target="_blank" rel="external">利用Github Page 搭建个人博客网站</a></p>
<p>2、<a href="http://www.54tianzhisheng.cn/2017/06/13/Hexo-yilia-toc/" target="_blank" rel="external">Hexo + yilia 主题实现文章目录</a></p>
<p>3、<a href="http://www.54tianzhisheng.cn/2017/04/13/Hexo-yilia-changyan/" target="_blank" rel="external">Github pages + Hexo 博客 yilia 主题使用畅言评论系统</a></p>
<p>那还有这么多人搜索这些关键字？说明碰到问题的还有不少，所以才有了这篇文章的诞生！</p>
<h3 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h3><p><strong>1、hexo  yilia 文章目录</strong></p>
<p>这个我以前写过一篇文章：<a href="http://www.54tianzhisheng.cn/2017/06/13/Hexo-yilia-toc/" target="_blank" rel="external">Hexo + yilia 主题实现文章目录</a>    那篇文章写了我那个版本的 yilia 怎么添加文章目录的，但是好像新版本的 yilia 已经自带了这个文章目录功能。所以如果你是使用的新版本的 yilia ，请不要做任何修改！但是前几天有人给我发了个图片，又好像有点区别，如果实在有不同的话，请加群 528776268 找我要我那个主题版本的所有配置文件。再次说明，我前端也不是很擅长，我写那篇文章也是参考其他博客的修改，所以无能为力了。有什么问题，建议直接在 yilia 主题的 GitHub 去找作者聊！</p>
<p><strong>2、Hexo  yilia  随笔</strong></p>
<p>随笔如下：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/0kkIFEkcja.png-1" alt="mark"></p>
<p>对此想说的就是，“随笔”  其实就是文章的一个 tags(标签)，如果你想把文章作为随笔的话，请在文章的首部写个 tags  为 “随笔”   的标签。如下图：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/13539aGJF5.png-1" alt="mark"></p>
<p>注意：-  后面有个空格。</p>
<p><strong>3、yilia 主题分类实现</strong></p>
<p>如果要有多个标签，可以如下图所示：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/lF42EedCJA.png-1" alt="mark"></p>
<p><strong>4、hexo yilia 设置文章显示长度，不展开全文</strong></p>
<p>yilia 主题中可以用 <code>&lt;!-- more --&gt;</code>  截取文章的显示长度，如果你想在哪截取文章，就在那行使用该字符。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/2ickeEEFbh.png-1" alt="mark"></p>
<p><strong>5、yilia 添加阅读量</strong></p>
<p>我添加的是 “不蒜子” 计数，它可以区分 pv/uv 的统计方式，统计更精准，满足更多需求。有这个需求的可以去查找下博客怎么添加。（网上有很多这方面的博客）</p>
<p><strong>6、yilia 主题使用 “畅言” 评论系统</strong></p>
<p>参见我以前的文章：  <a href="http://www.54tianzhisheng.cn/2017/04/13/Hexo-yilia-changyan/" target="_blank" rel="external">Github pages + Hexo 博客 yilia 主题使用畅言评论系统</a></p>
<p><strong>7、hexo yilia 引入音乐</strong></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/fA367Gej62.png-1" alt="mark"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">"填写音乐链接地址"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如下图，可以在网易云音乐里搜到你想要引入的音乐，然后点击如下的 “生成外链播放器” 即可：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/lLLLBlH1FK.png-1" alt="mark"></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/ibaCjDEhEa.png-1" alt="mark"></p>
<p><strong>8、hexo yilia 引入视频</strong></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/1f6gC2mJ1f.png-1" alt="mark"></p>
<p>hexo  支持 html 语法的，所以可以如上图这样引入视频！</p>
<p><strong>9、hexo  yilia  相册</strong></p>
<p>这个抱歉，我自己也没做这方面的功能，暂时不太清楚怎么实现。不过有文章写怎么实现，大家可以搜索下！</p>
<p><strong>10、hexo  yilia  怎么写文章</strong></p>
<p>我一般写文章就是先用本地 markdown 编辑器写好后，然后放在 hexo 的 <code>source/_posts</code> 目录下。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171218/0HjLacBcfe.png-1" alt="mark"></p>
<h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>好了，大概就这些问题，我也一一解答了，希望搭建博客的你可以看到这篇文章，让你少走点弯路，如果你也遇到过这些问题，还请你能分享下文章，让更多人避免入坑！</p>
<p>本文地址是：<a href="http://www.54tianzhisheng.cn/2017/12/18/hexo-yilia" target="_blank" rel="external">Hexo + yilia 搭建博客可能会遇到的所有疑问</a>  本文原创，转载请注明原创地址。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p><a href="http://www.54tianzhisheng.cn/2017/12/18/hexo-yilia" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/12/18/hexo-yilia</a>  这个链接是让推酷爬虫吞掉的，哈哈！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/171218/BaE3G1imDm.png-1&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;p&gt;为什么会再次写这篇博客？请看下图：&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="yilia" scheme="http://yoursite.com/tags/yilia/"/>
    
  </entry>
  
  <entry>
    <title>谷歌开发者大会收获满满，不去真 “可惜” 了</title>
    <link href="http://yoursite.com/2017/12/13/Google-Developer-Days/"/>
    <id>http://yoursite.com/2017/12/13/Google-Developer-Days/</id>
    <published>2017-12-13T14:29:37.107Z</published>
    <updated>2017-12-13T15:15:18.292Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/1DJAFA7Kmb.png-1" alt="mark"><br>全文图片较多，请在 WiFi 下阅读，土豪请随意！<br><a id="more"></a></p>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>今年 Google 开发者大会再度来袭，大会将于 12 月 13 日和 14 日在上海举办，主题涵盖机器学习(Machine Learning)、Android、移动网络(Mobile Web)、TensorFlow、Firebase、云服务(Cloud)、AR/VR、设计(Design)以及更多开发者相关内容。</p>
<p>今天我就到走一遭，收获满满，都是用袋子提回来的，哈哈。下图为袋子：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/LB2im47IbD.png-1" alt="mark"></p>
<p>再秀张图代表我去了：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/ia81GicG37.png-1" alt="mark"></p>
<h3 id="入场"><a href="#入场" class="headerlink" title="入场"></a>入场</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/1DJAFA7Kmb.png-1" alt="mark"></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/5KAJDGGGH5.png-1" alt="mark"></p>
<p>说下今天我参加的会场吧！</p>
<h3 id="会场"><a href="#会场" class="headerlink" title="会场"></a>会场</h3><h4 id="主会场开幕"><a href="#主会场开幕" class="headerlink" title="主会场开幕"></a>主会场开幕</h4><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/iKjbLIggh8.png-1" alt="mark"></p>
<p>当然是用来用来做开发者开幕大会主题演讲的。相信不少没到现场的也看了直播。</p>
<p>拍了两张李飞飞演讲时的照片：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/BggGaADkF7.png-1" alt="mark"></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/KEAB816319.png-1" alt="mark"></p>
<p>还有个妹子是讲 TensorFlow 的，全程中文，还贼 6，佩服！！！</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/IbK91Af32b.png-1" alt="mark"></p>
<p>中途演讲还好几个，没拍照了。。。</p>
<h3 id="中途茶歇："><a href="#中途茶歇：" class="headerlink" title="中途茶歇："></a>中途茶歇：</h3><p>去外面看了下。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/dLm4BaJE4I.png-1" alt="mark"></p>
<h3 id="主会场演讲"><a href="#主会场演讲" class="headerlink" title="主会场演讲"></a>主会场演讲</h3><p>主题是：《渐进式网页应用：快速、集成、可靠并且具有吸引力》</p>
<p>这次坐的是前排，还拍了照，演讲人技巧很好，边演讲边带有身体动作的，而且还比较诙谐。</p>
<h3 id="午餐"><a href="#午餐" class="headerlink" title="午餐"></a>午餐</h3><p>胸牌上有13、14 号的午餐券，可以免费吃、免费拿，福利超好。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/b06B2HGeC4.png-1" alt="mark"></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/6K2lChij33.png-1" alt="mark"></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/lCf1afKlck.png-1" alt="mark"></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/1IJ74dJ3c1.png-1" alt="mark"></p>
<h3 id="下午会场"><a href="#下午会场" class="headerlink" title="下午会场"></a>下午会场</h3><p><strong>下午会场有点多，略略略。。。</strong></p>
<p>都拍了点照，如果想要，可以加群：528776268  找我要、</p>
<h3 id="晚餐"><a href="#晚餐" class="headerlink" title="晚餐"></a>晚餐</h3><p>诱惑颇大。。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/agJcFAH7ea.png-1" alt="mark"></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/G6G4d12jLF.png-1" alt="mark"></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/7gm9hB1i41.png-1" alt="mark"></p>
<p>我还喝了杯葡萄酒。。哈哈</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/3iHm1dKfG2.png-1" alt="mark"></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/232lbee3Dg.png-1" alt="mark"></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/Dlb96kdIfh.png-1" alt="mark"></p>
<p>另外除了照片，还拍了三个视频</p>
<video width="400" height="800" controls="controls"><br>  <source src="http://ohfk1r827.bkt.clouddn.com/VID_20171213_183743.mp4" type="video/mp4"><br></video>

<p><br></p>
<video width="400" height="800" controls="controls"><br>  <source src="http://ohfk1r827.bkt.clouddn.com/VID_20171213_183253.mp4" type="video/mp4"><br></video>

<p><br></p>
<video width="400" height="800" controls="controls"><br>  <source src="http://ohfk1r827.bkt.clouddn.com/VID_20171213_185542.mp4" type="video/mp4"><br></video>


<h3 id="回家"><a href="#回家" class="headerlink" title="回家"></a>回家</h3><p>吃饱喝足，回家拍了张照</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/6ihACFehj9.png-1" alt="mark"></p>
<h3 id="礼物"><a href="#礼物" class="headerlink" title="礼物"></a>礼物</h3><p>到家了，整理了下今天的礼物：</p>
<p>贴纸一张</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/FbBIc9Gm7k.png-1" alt="mark"></p>
<p>小礼品一个</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/cilDBLBfDB.png-1" alt="mark"></p>
<p>一个可 DIY 的音箱</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/AIgb2iaEad.png-1" alt="mark"></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/5aiiBhbAfc.png-1" alt="mark"></p>
<p>一个定制的手提电脑包，质量很好。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/Lm1D2J4L60.png-1" alt="mark"></p>
<p>AndroidThings</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/hABaggD631.png-1" alt="mark"></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171213/gmf7K6Cfgl.png-1" alt="mark"></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>全文图片较多，谢谢阅读！自己收获也挺多的，明天还有一天，可惜不打算去了，转载请注明地址：<a href="http://www.54tianzhisheng.cn/2017/12/13/Google-Developer-Days/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/12/13/Google-Developer-Days/</a></p>
<h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>这个是为了防爬虫写的，哈哈</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/171213/1DJAFA7Kmb.png-1&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;全文图片较多，请在 WiFi 下阅读，土豪请随意！&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>使用 CodeMirror 打造属于自己的在线代码编辑器</title>
    <link href="http://yoursite.com/2017/12/09/CodeMirror/"/>
    <id>http://yoursite.com/2017/12/09/CodeMirror/</id>
    <published>2017-12-09T07:01:44.869Z</published>
    <updated>2017-12-09T07:04:26.986Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171209/bA6g59gGB5.jpg-1" alt="mark"></p>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>写这个的目的是因为之前项目里用到过 CodeMirror，觉得作为一款在线代码编辑器还是不错，也看到过有些网站用到过在线代码编辑，当然我不知道他们是用什么做的，这里我把公司项目里用到的那部分抽出来，单独写篇博客，并把抽出来的那部分代码提交到 GitHub 去（<a href="https://github.com/zhisheng17/CoderBlog/tree/master/CodeMirror" target="_blank" rel="external">地址</a>），以防日后可能会再次用到（没准毕业设计里可能用的到）。<br><a id="more"></a></p>
<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>CodeMirror 是一款在线的支持语法高亮的代码编辑器。官网： <a href="http://codemirror.net/" target="_blank" rel="external">http://codemirror.net/</a></p>
<p>可能光看官网，第一眼觉得那些在线编辑器有点<strong>丑</strong>，反正第一眼给我的感觉就是这样子，但是经过自己的细调，也能打造出一款精美的在线代码编辑器。</p>
<p>官网可以把它下载下来。</p>
<p>下载后，解压开得到的文件夹中，lib 下是放的是核心库和核心 css，mode 下放的是各种支持语言的语法定义，theme 目录下是支持的主题样式。一般在开发中，添加 lib 下的引用和 mode 下的引用就够了。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171209/cJHjjadJ9E.png" alt="mark"></p>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>下面两个是使用 Code Mirror 必须引入的：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"codemirror-5.31.0/lib/codemirror.css"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"codemirror-5.31.0/lib/codemirror.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接下来要引用的就是在 mode 目录下编辑器中要编辑的语言对应的 js 文件，这里以 Groovy 为例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--groovy代码高亮--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"codemirror-5.31.0/mode/groovy/groovy.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果你想让 Java 代码也支持代码高亮，则需要引入我从网上下载下来的 clike.js（我已经放到我的 GitHub 去了）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--Java代码高亮必须引入--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"codemirror-5.31.0/clike.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>引用的文件用于支持对应语言的语法高亮。</p>
<p>然后前面说了第一次进入 Code Mirror 官网，觉得那些编辑器比较丑，那可能是主题比较丑，我这里推荐一款还不错的主题，只需按照如下引入即可：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--引入css文件，用以支持主题--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"codemirror-5.31.0/theme/dracula.css"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>如果你还想让你的编辑器支持代码行折叠，请按照如下进行操作：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--支持代码折叠--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"codemirror-5.31.0/addon/fold/foldgutter.css"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"codemirror-5.31.0/addon/fold/foldcode.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"codemirror-5.31.0/addon/fold/foldgutter.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"codemirror-5.31.0/addon/fold/brace-fold.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"codemirror-5.31.0/addon/fold/comment-fold.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>是不是这样引入就好了呢，当然不是啦</p>
<h3 id="创建编辑器"><a href="#创建编辑器" class="headerlink" title="创建编辑器"></a>创建编辑器</h3><p>在实际项目中，一般都不会直接把 body 整个内容作为编辑器的容器。而最常用的，是使用 textarea。这里我在 <body> 里使用个 textarea，</body></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- begin code --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"code"</span> <span class="attr">name</span>=<span class="string">"code"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- end code--&gt;</span></div></pre></td></tr></table></figure>
<p>接下来就是创建编辑器了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//根据DOM元素的id构造出一个编辑器</span></div><div class="line"><span class="keyword">var</span> editor = CodeMirror.fromTextArea(<span class="built_in">document</span>.getElementById(<span class="string">"code"</span>), &#123;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>是不是有点单调？</p>
<p>没错，我还可以在里面给他设置些属性：（充分利用我一开始引入的那些文件）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mode: <span class="string">"text/groovy"</span>,    <span class="comment">//实现groovy代码高亮</span></div><div class="line">mode: <span class="string">"text/x-java"</span>, <span class="comment">//实现Java代码高亮</span></div><div class="line">lineNumbers: <span class="literal">true</span>,	<span class="comment">//显示行号</span></div><div class="line">theme: <span class="string">"dracula"</span>,	<span class="comment">//设置主题</span></div><div class="line">lineWrapping: <span class="literal">true</span>,	<span class="comment">//代码折叠</span></div><div class="line">foldGutter: <span class="literal">true</span>,</div><div class="line"><span class="attr">gutters</span>: [<span class="string">"CodeMirror-linenumbers"</span>, <span class="string">"CodeMirror-foldgutter"</span>],</div><div class="line"><span class="attr">matchBrackets</span>: <span class="literal">true</span>,	<span class="comment">//括号匹配</span></div><div class="line"><span class="comment">//readOnly: true,        //只读</span></div></pre></td></tr></table></figure>
<p>如果需要查看更多属性，可以去官网查找，目前我只用到这些属性！</p>
<p><strong>下面也列举些吧：</strong></p>
<p><strong>indentUnit: integer</strong><br>缩进单位，值为空格数，默认为2 。</p>
<p><strong>smartIndent: boolean</strong><br>自动缩进，设置是否根据上下文自动缩进（和上一行相同的缩进量）。默认为true。</p>
<p><strong>tabSize: integer</strong><br>tab字符的宽度，默认为4 。</p>
<p><strong>indentWithTabs: boolean</strong><br>在缩进时，是否需要把 n*tab宽度个空格替换成n个tab字符，默认为false 。</p>
<p><strong>electricChars: boolean</strong><br>在输入可能改变当前的缩进时，是否重新缩进，默认为true （仅在mode支持缩进时有效）。</p>
<p><strong>specialChars: RegExp</strong><br>需要被占位符(placeholder)替换的特殊字符的正则表达式。最常用的是非打印字符。默认为：/[\u0000-\u0019\u00ad\u200b-\u200f\u2028\u2029\ufeff]/。</p>
<p><strong>specialCharPlaceholder: function(char) → Element</strong><br>这是一个接收由specialChars选项指定的字符作为参数的函数，此函数会产生一个用来显示指定字符的DOM节点。默认情况下，显示一个红点（•），这个红点有一个带有前面特殊字符编码的提示框。</p>
<p><strong>rtlMoveVisually: boolean</strong><br>Determines whether horizontal cursor movement through right-to-left (Arabic, Hebrew) text is visual (pressing the left arrow moves the cursor left) or logical (pressing the left arrow moves to the next lower index in the string, which is visually right in right-to-left text). The default is false on Windows, and true on other platforms.（这段完全不晓得搞啥子鬼）</p>
<p><strong>keyMap: string</strong><br>配置快捷键。默认值为default，即 codemorrir.js 内部定义。其它在<a href="http://codemirror.net/keymap/" target="_blank" rel="external">key map</a>目录下。</p>
<p><strong>extraKeys: object</strong><br>给编辑器绑定与前面keyMap配置不同的快捷键。</p>
<p><strong>lineWrapping: boolean</strong><br>在长行时文字是换行(wrap)还是滚动(scroll)，默认为滚动(scroll)。</p>
<p><strong>lineNumbers: boolean</strong><br>是否在编辑器左侧显示行号。</p>
<p><strong>firstLineNumber: integer</strong><br>行号从哪个数开始计数，默认为1 。</p>
<p><strong>lineNumberFormatter: function(line: integer) → string</strong><br>使用一个函数设置行号。</p>
<p><strong>gutters: array<string></string></strong><br>用来添加额外的gutter（在行号gutter前或代替行号gutter）。值应该是CSS名称数组，每一项定义了用于绘制gutter背景的宽度（还有可选的背景）。为了能明确设置行号gutter的位置（默认在所有其它gutter的右边），也可以包含CodeMirror-linenumbers类。类名是用于传给setGutterMarker的键名(keys)。</p>
<p><strong>fixedGutter: boolean</strong><br>设置gutter跟随编辑器内容水平滚动（false）还是固定在左侧（true或默认）。</p>
<p><strong>scrollbarStyle: string</strong><br>设置滚动条。默认为”native”，显示原生的滚动条。核心库还提供了”null”样式，此样式会完全隐藏滚动条。Addons可以设置更多的滚动条模式。</p>
<p><strong>coverGutterNextToScrollbar: boolean</strong><br>当fixedGutter启用，并且存在水平滚动条时，在滚动条最左侧默认会显示gutter，当此项设置为true时，gutter会被带有CodeMirror-gutter-filler类的元素遮挡。<br><strong>inputStyle: string</strong><br>选择CodeMirror处理输入和焦点的方式。核心库定义了textarea和contenteditable输入模式。在移动浏览器上，默认是contenteditable，在桌面浏览器上，默认是textarea。在contenteditable模式下对IME和屏幕阅读器支持更好。</p>
<p><strong>readOnly: boolean|string</strong><br>编辑器是否只读。如果设置为预设的值 “nocursor”，那么除了设置只读外，编辑区域还不能获得焦点。</p>
<p><strong>showCursorWhenSelecting: boolean</strong><br>在选择时是否显示光标，默认为false。</p>
<p><strong>lineWiseCopyCut: boolean</strong><br>启用时，如果在复制或剪切时没有选择文本，那么就会自动操作光标所在的整行。</p>
<p><strong>undoDepth: integer</strong><br>最大撤消次数，默认为200（包括选中内容改变事件） 。</p>
<p><strong>historyEventDelay: integer</strong><br>在输入或删除时引发历史事件前的毫秒数。</p>
<p><strong>tabindex: integer</strong><br>编辑器的tabindex。</p>
<p><strong>autofocus: boolean</strong><br>是否在初始化时自动获取焦点。默认情况是关闭的。但是，在使用textarea并且没有明确指定值的时候会被自动设置为true。</p>
<p><strong>dragDrop: boolean</strong><br>是否允许拖放，默认为true。</p>
<p><strong>allowDropFileTypes: array<string></string></strong><br>默认为null。当设置此项时，只接收包含在此数组内的文件类型拖入编辑器。文件类型为MIME名称。</p>
<p><strong>cursorBlinkRate: number</strong><br>光标闪动的间隔，单位为毫秒。默认为530。当设置为0时，会禁用光标闪动。负数会隐藏光标。</p>
<p><strong>cursorScrollMargin: number</strong><br>当光标靠近可视区域边界时，光标距离上方和下方的距离。默认为0 。</p>
<p><strong>cursorHeight: number</strong><br>光标高度。默认为1，也就是撑满行高。对一些字体，设置0.85看起来会更好。</p>
<p><strong>resetSelectionOnContextMenu: boolean</strong><br>设置在选择文本外点击打开上下文菜单时，是否将光标移动到点击处。默认为true。</p>
<p><strong>workTime, workDelay: number</strong><br>通过一个假的后台线程高亮 workTime 时长，然后使用 timeout 休息 workDelay 时长。默认为200和300 。（完全不懂这个功能是在说啥）</p>
<p><strong>pollInterval: number</strong><br>指明CodeMirror向对应的textarea滚动（写数据）的速度（获得焦点时）。大多数的输入都是通过事件捕获，但是有的输入法（如IME）在某些浏览器上并不会生成事件，所以使用数据滚动。默认为100毫秒。</p>
<p><strong>flattenSpans: boolean</strong><br>默认情况下，CodeMirror会将使用相同class的两个span合并成一个。通过设置此项为false禁用此功能。</p>
<p><strong>addModeClass: boolean</strong><br>当启用时（默认禁用），会给每个标记添加额外的表示生成标记的mode的以cm-m开头的CSS样式类。例如，XML mode产生的标记，会添加cm-m-xml类。</p>
<p><strong>maxHighlightLength: number</strong><br>当需要高亮很长的行时，为了保持响应性能，当到达某些位置时，编辑器会直接将其他行设置为纯文本(plain text)。默认为10000，可以设置为Infinity来关闭此功能。</p>
<p><strong>viewportMargin: integer</strong><br>指定当前滚动到视图中内容上方和下方要渲染的行数。这会影响到滚动时要更新的行数。通常情况下应该使用默认值10。可以设置值为Infinity始终渲染整个文档。注意：这样设置在处理大文档时会影响性能。</p>
<hr>
<p>如果你要设置代码框的大小该怎么做呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">editor.setSize(<span class="string">'800px'</span>, <span class="string">'950px'</span>);     <span class="comment">//设置代码框的长宽</span></div></pre></td></tr></table></figure>
<p>另外，如果你想给代码框赋值，该怎么办呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">editor.setValue(<span class="string">""</span>);    <span class="comment">//给代码框赋值</span></div><div class="line">editor.getValue();    <span class="comment">//获取代码框的值</span></div></pre></td></tr></table></figure>
<p>如果你再想在其他地方设置新的属性，可以像下面这样写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">editor.setOption(<span class="string">"readOnly"</span>, <span class="literal">true</span>);	<span class="comment">//类似这种</span></div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上面就大概讲了下 Code Mirror 怎么使用，那么我们来看看效果吧</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171209/C1303F6F9A.png-1" alt="mark"></p>
<p>我自我感觉还是可以的哈！</p>
<p>里面所有涉及的代码在 GitHub 里可以下载：<a href="https://github.com/zhisheng17/CoderBlog/tree/master/CodeMirror" target="_blank" rel="external">https://github.com/zhisheng17/CoderBlog/tree/master/CodeMirror</a></p>
<p>文章原创，转载务必请注明原创地址：<a href="http://www.54tianzhisheng.cn/2017/12/09/CodeMirror/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/12/09/CodeMirror/</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>fuck  无脑的推酷爬虫，竟然把我所有文章最后的原创链接都给去掉了，这是我现在想到的一种对策方法。任何其他形式的转载，也必须把我文章所有内容加上，不得做任何修改，否则请别转载了！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/171209/bA6g59gGB5.jpg-1&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;p&gt;写这个的目的是因为之前项目里用到过 CodeMirror，觉得作为一款在线代码编辑器还是不错，也看到过有些网站用到过在线代码编辑，当然我不知道他们是用什么做的，这里我把公司项目里用到的那部分抽出来，单独写篇博客，并把抽出来的那部分代码提交到 GitHub 去（&lt;a href=&quot;https://github.com/zhisheng17/CoderBlog/tree/master/CodeMirror&quot;&gt;地址&lt;/a&gt;），以防日后可能会再次用到（没准毕业设计里可能用的到）。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Netty 源码阅读之初始环境搭建</title>
    <link href="http://yoursite.com/2017/12/08/netty-01-env/"/>
    <id>http://yoursite.com/2017/12/08/netty-01-env/</id>
    <published>2017-12-08T08:22:03.817Z</published>
    <updated>2017-12-08T09:29:09.871Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/p4.jpeg-1" alt=""></p>
<h3 id="Netty-简介"><a href="#Netty-简介" class="headerlink" title="Netty 简介"></a>Netty 简介</h3><p>Netty 是由 JBOSS 提供的一个开源的 java 网络编程框架，主要是对 java 的 nio 包进行了再次封装。Netty 比 java 原生的nio 包提供了更加强大、稳定的功能和易于使用的 api。 netty 的作者是 Trustin Lee，这是一个韩国人，他还开发了另外一个著名的网络编程框架，mina。二者在很多方面都十分相似，它们的线程模型也是基本一致 。不过 netty 社区的活跃程度要 mina 高得多。<br><a id="more"></a><br>版本选择：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171208/f3lI8Ifgdg.png-1" alt="mark"></p>
<p>3.x 目前企业使用最多的版本，最为稳定。例如dubbo使用的就是3.x版本</p>
<p>4.x 引入了内存池等重大特性，可以有效的降低GC负载，rocketmq使用的就是4.x</p>
<p>5.x 已经被废弃了，具体可参见 <a href="https://github.com/netty/netty/issues/4466" target="_blank" rel="external">https://github.com/netty/netty/issues/4466</a></p>
<p>所以这里我搭建的源码阅读环境是存在的 4.1 版本。</p>
<h3 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h3><ul>
<li>IDEA 2017</li>
</ul>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>在 IDEA 中导入项目地址：<a href="https://github.com/netty/netty.git" target="_blank" rel="external">https://github.com/netty/netty.git</a>   ，然后就会自动下载项目所有的依赖，但是请注意：</p>
<p><strong>必须在 IDEA 中将 Profiles 中的所有都勾选上</strong>，否则会导致很多 jar 包拉不下来，如下图：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171208/F8fB27dL52.png-1" alt="mark"></p>
<p>然后就是耐心等待了，一直到所有的 jar 包拉取下来。</p>
<p>中途你可能会遇到如下问题：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171208/Hf6LADAHlh.png-1" alt="mark"></p>
<p>这里的是 1.5 版本，导致我们如果想用些高级的语法会完全报错。</p>
<p>如果你把这个版本设置为 8 的版本后，</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171208/EgEL2iG463.png-1" alt="mark"></p>
<p>下面会提示你，项目是从 maven 导过来的，如果 maven 配置改变重新 reimport 后，任何在这里的改变都会丢失。</p>
<p>同时你会看到项目的 Java Compile 版本是 1.5 的，如下图：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171208/CLCLeiJGfK.png-1" alt="mark"></p>
<p>同样，你在这里修改，如果 maven 配置改变重新 reimport 后，任何在这里的改变也都会丢失。我估计碰到这种问题的不少。</p>
<p>总结起来原因就是 maven 中的编译版本就是 1.5 的，所以才会导致这里的问题发生，如果想完全修改好（一劳永逸）。请直接对 pom 文件动刀，就是干！</p>
<p>只需把大项目（netty-parent）的那个 pom.xml 修改个属性，把版本信息提高到 1.8。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171208/gkCi51aAg2.png-1" alt="mark"></p>
<p>在等待它拉取 jar 包吧</p>
<p>搞完了之后发现还有两个模块（netty-bom、netty-dev-tools）不能设置到 版本，只能手动的和上面那种设置 language level 和 Java compile 为 1.8 了。</p>
<p>最后你会发现这里的完全没有报错了，开心不？</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171208/D0liIHeAFa.png-1" alt="mark"></p>
<h3 id="代码行数统计"><a href="#代码行数统计" class="headerlink" title="代码行数统计"></a>代码行数统计</h3><p>额，看到项目这么多子模块，你都不知道该从哪里下手开始看，那么我就写了个简单的 Java 脚本去大概的统计每个子项目代码的行数。先看看统计结果：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171208/GhmkD1K8Kd.png-1" alt="mark"></p>
<p>整个项目差不多 23 万。（过滤了空行、各种注释和 <code>@Override</code> 之后的 Java 代码行数），靠这个数字很吓人！</p>
<p>来看看我的脚本代码吧：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">long</span> count = Files.walk(Paths.get(<span class="string">"C:\\JetBrains\\IDEAProject\\netty\\transport-udt"</span>))    <span class="comment">// 递归获得项目目录下的所有文件</span></div><div class="line">            .filter(file -&gt; !Files.isDirectory(file))   <span class="comment">// 筛选出文件</span></div><div class="line">            .filter(file -&gt; file.toString().endsWith(<span class="string">".java"</span>))  <span class="comment">// 筛选出 java 文件</span></div><div class="line">            .flatMap(Try.of(file -&gt; Files.lines(file), Stream.empty()))     <span class="comment">// 将会抛出受检异常的 Lambda 包装为 抛出非受检异常的 Lambda</span></div><div class="line">            .filter(line -&gt; !line.trim().isEmpty())         <span class="comment">// 过滤掉空行</span></div><div class="line">            .filter(line -&gt; !line.trim().startsWith(<span class="string">"//"</span>))  <span class="comment">//过滤掉 //之类的注释</span></div><div class="line">            .filter(line -&gt; !(line.trim().startsWith(<span class="string">"/*"</span>) &amp;&amp; line.trim().endsWith(<span class="string">"*/"</span>)))  <span class="comment">//过滤掉/* */之类的注释</span></div><div class="line">            .filter(line -&gt; !(line.trim().startsWith(<span class="string">"/*"</span>) &amp;&amp; !line.trim().endsWith(<span class="string">"*/"</span>)))     <span class="comment">//过滤掉以 /* 开头的注释（去除空格后的开头）</span></div><div class="line">            .filter(line -&gt; !(!line.trim().startsWith(<span class="string">"/*"</span>) &amp;&amp; line.trim().endsWith(<span class="string">"*/"</span>)))     <span class="comment">//过滤掉已 */ 结尾的注释</span></div><div class="line">            .filter(line -&gt; !line.trim().startsWith(<span class="string">"*"</span>))   <span class="comment">//过滤掉 javadoc 中的文字注释</span></div><div class="line">            .filter(line -&gt; !line.trim().startsWith(<span class="string">"@Override"</span>))   <span class="comment">//过滤掉方法上含 @Override 的</span></div><div class="line">            .count();</div><div class="line">    System.out.println(<span class="string">"代码行数："</span> + count);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>后面我会把我阅读源码的中文注释及解析之类的更新到我的 GitHub 去（欢迎关注、我是来骗 star 的），<a href="https://github.com/zhisheng17/netty" target="_blank" rel="external">https://github.com/zhisheng17/netty</a>    ，如果你不想去自己设置上面所说的这些（偷懒），那就直接 fork 我的这份吧！</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>环境搭建就写到这里了，转载请注明地址：<a href="http://www.54tianzhisheng.cn/2017/12/08/netty-01-env/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/12/08/netty-01-env/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/p4.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Netty-简介&quot;&gt;&lt;a href=&quot;#Netty-简介&quot; class=&quot;headerlink&quot; title=&quot;Netty 简介&quot;&gt;&lt;/a&gt;Netty 简介&lt;/h3&gt;&lt;p&gt;Netty 是由 JBOSS 提供的一个开源的 java 网络编程框架，主要是对 java 的 nio 包进行了再次封装。Netty 比 java 原生的nio 包提供了更加强大、稳定的功能和易于使用的 api。 netty 的作者是 Trustin Lee，这是一个韩国人，他还开发了另外一个著名的网络编程框架，mina。二者在很多方面都十分相似，它们的线程模型也是基本一致 。不过 netty 社区的活跃程度要 mina 高得多。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RestTemplate 详解</title>
    <link href="http://yoursite.com/2017/12/03/RestTemplate/"/>
    <id>http://yoursite.com/2017/12/03/RestTemplate/</id>
    <published>2017-12-03T07:00:07.852Z</published>
    <updated>2017-12-03T07:08:10.734Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/p3.jpeg-1" alt=""></p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>这段时间自己做的项目中需要调用服务提供者的服务（接口），具体就是：我这边需要将页面所输入的 Groovy 脚本代码传给别人提供的服务接口，然后那边返回脚本编译的结果给我，我需要将编译结果展示在页面，用的就是 RestTemplate 了，那 RestTemplate 是什么呢？简单说就是：简化了发起 HTTP 请求以及处理响应的过程，并且支持 REST 。下文就稍微总结下。<br><a id="more"></a></p>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>先讲讲如何使用吧，我项目是 SpringBoot 项目，可以在启动类中加入：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在 Controller 层中引入：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> RestTemplate restTemplate;</div></pre></td></tr></table></figure>
<p>接下来就可以在 Controller 中各个方法中使用 restTemplate 了，但是 restTemplate 里面有什么方法呢？</p>
<h3 id="RestTemplate-内部方法"><a href="#RestTemplate-内部方法" class="headerlink" title="RestTemplate 内部方法"></a>RestTemplate 内部方法</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/dB18a2j7bi.png-1" alt="mark"></p>
<p>从图中 RestTemplate 可以看到有很多方法，我们可以提取出主要的几种方法是：</p>
<ul>
<li><strong>GET</strong></li>
<li><strong>POST</strong></li>
<li><strong>PUT</strong></li>
<li><strong>DELETE</strong></li>
<li><strong>HEAD</strong></li>
<li><strong>OPTIONS</strong></li>
<li><strong>EXCHANGE</strong></li>
<li><strong>EXECUTE</strong></li>
</ul>
<p>图片中依然可以知道 RestTemplate 类中的方法主要是来自接口 RestOperations，下面我们具体看看这些方法里面的具体实现与该如何使用。</p>
<h3 id="Get-方法"><a href="#Get-方法" class="headerlink" title="Get 方法"></a>Get 方法</h3><p>在 RestTemplate 中，发送一个 GET 请求，我们可以通过如下两种方式：</p>
<ul>
<li><p><strong>getForEntity</strong></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/HIdKJdjkCC.png-1" alt="mark"></p>
<p>getForEntity 方法的返回值是一个<code>ResponseEntity&lt;T&gt;</code>，<code>ResponseEntity&lt;T&gt;</code>是 Spring 对 HTTP 请求响应的封装，包括了几个重要的元素，如响应码、contentType、contentLength、响应消息体等。比如下面一个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/gethello"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHello</span><span class="params">()</span> </span>&#123;</div><div class="line">    ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(<span class="string">"http://HELLO-SERVICE/hello"</span>, String.class);</div><div class="line">    String body = responseEntity.getBody();</div><div class="line">    HttpStatus statusCode = responseEntity.getStatusCode();</div><div class="line">    <span class="keyword">int</span> statusCodeValue = responseEntity.getStatusCodeValue();</div><div class="line">    HttpHeaders headers = responseEntity.getHeaders();</div><div class="line">    StringBuffer result = <span class="keyword">new</span> StringBuffer();</div><div class="line">    result.append(<span class="string">"responseEntity.getBody()："</span>).append(body).append(<span class="string">"&lt;hr&gt;"</span>)</div><div class="line">            .append(<span class="string">"responseEntity.getStatusCode()："</span>).append(statusCode).append(<span class="string">"&lt;hr&gt;"</span>)</div><div class="line">            .append(<span class="string">"responseEntity.getStatusCodeValue()："</span>).append(statusCodeValue).append(<span class="string">"&lt;hr&gt;"</span>)</div><div class="line">            .append(<span class="string">"responseEntity.getHeaders()："</span>).append(headers).append(<span class="string">"&lt;hr&gt;"</span>);</div><div class="line">    <span class="keyword">return</span> result.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于这段代码，说如下几点：</p>
<ul>
<li><p>getForEntity 的第一个参数为我要调用的服务的地址，这里我调用了服务提供者提供的 /hello 接口，注意这里是通过服务名调用而不是服务地址，如果写成服务地址就没法实现客户端负载均衡了。（备注：我项目中需要通过 ConsulClient 去获取服务名，然后在去获取服务的 IP 和 Port，并把它拼接起来组合成我的服务地址，所以就没法实现客户端的负载均衡了，如果要是实现负载均衡，可以在 SpringBoot 启动类的中加入注解 <code>@LoadBalanced</code>, 如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="meta">@LoadBalanced</span></div><div class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> ）</p>
</li>
<li><p>getForEntity 第二个参数 String.class 表示我希望返回的 body 类型是 String</p>
</li>
<li><p>拿到返回结果之后，将返回结果遍历打印出来</p>
</li>
</ul>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/97g3ha24HG.png" alt="mark"></p>
</li>
</ul>
<p>  有时候我在调用服务提供者提供的接口时，可能需要传递参数，有两种不同的方式:</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/sayhello"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">    ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(<span class="string">"http://HELLO-SERVICE/sayhello?name=&#123;1&#125;"</span>, String.class, <span class="string">"张三"</span>);</div><div class="line">    <span class="keyword">return</span> responseEntity.getBody();</div><div class="line">&#125;</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/sayhello2"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello2</span><span class="params">()</span> </span>&#123;</div><div class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    map.put(<span class="string">"name"</span>, <span class="string">"李四"</span>);</div><div class="line">    ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(<span class="string">"http://HELLO-SERVICE/sayhello?name=&#123;name&#125;"</span>, String.class, map);</div><div class="line">    <span class="keyword">return</span> responseEntity.getBody();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>可以用一个数字做占位符，最后是一个可变长度的参数，来一 一替换前面的占位符</li>
<li><p>也可以前面使用 name={name} 这种形式，最后一个参数是一个 map，map 的 key 即为前边占位符的名字，map的 value 为参数值</p>
<p>第一个调用地址也可以是一个URI而不是字符串，这个时候我们构建一个URI即可，参数神马的都包含在URI中了，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/sayhello3"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello3</span><span class="params">()</span> </span>&#123;</div><div class="line">    UriComponents uriComponents = UriComponentsBuilder.fromUriString(<span class="string">"http://HELLO-SERVICE/sayhello?name=&#123;name&#125;"</span>).build().expand(<span class="string">"王五"</span>).encode();</div><div class="line">    URI uri = uriComponents.toUri();</div><div class="line">    ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(uri, String.class);</div><div class="line">    <span class="keyword">return</span> responseEntity.getBody();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过Spring中提供的UriComponents来构建Uri即可。</p>
<p>当然，服务提供者不仅可以返回String，也可以返回一个自定义类型的对象，比如我的服务提供者中有如下方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/getbook1"</span>, method = RequestMethod.GET)</div><div class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">book1</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Book(<span class="string">"三国演义"</span>, <span class="number">90</span>, <span class="string">"罗贯中"</span>, <span class="string">"花城出版社"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于该方法我可以在服务消费者中通过如下方式来调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/book1"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">book1</span><span class="params">()</span> </span>&#123;</div><div class="line">    ResponseEntity&lt;Book&gt; responseEntity = restTemplate.getForEntity(<span class="string">"http://HELLO-SERVICE/getbook1"</span>, Book.class);</div><div class="line">    <span class="keyword">return</span> responseEntity.getBody();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/jHbbB37bjC.png" alt="mark"></p>
</li>
</ul>
<ul>
<li><p><strong>getForObject</strong></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/hbllDEdjLe.png-1" alt="mark"><br>​</p>
<p>getForObject 函数实际上是对 getForEntity 函数的进一步封装，如果你只关注返回的消息体的内容，对其他信息都不关注，此时可以使用 getForObject，举一个简单的例子，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/book2"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">book2</span><span class="params">()</span> </span>&#123;</div><div class="line">    Book book = restTemplate.getForObject(<span class="string">"http://HELLO-SERVICE/getbook1"</span>, Book.class);</div><div class="line">    <span class="keyword">return</span> book;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h3><p>在 RestTemplate 中，POST 请求可以通过如下三个方法来发起：</p>
<ul>
<li><p><strong>postForEntity</strong></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/Lb08cmh0CL.png-1" alt="mark"></p>
<p>该方法和get请求中的getForEntity方法类似，如下例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/book3"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">book3</span><span class="params">()</span> </span>&#123;</div><div class="line">    Book book = <span class="keyword">new</span> Book();</div><div class="line">    book.setName(<span class="string">"红楼梦"</span>);</div><div class="line">    ResponseEntity&lt;Book&gt; responseEntity = restTemplate.postForEntity(<span class="string">"http://HELLO-SERVICE/getbook2"</span>, book, Book.class);</div><div class="line">    <span class="keyword">return</span> responseEntity.getBody();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>方法的第一参数表示要调用的服务的地址</li>
<li>方法的第二个参数表示上传的参数</li>
<li>方法的第三个参数表示返回的消息体的数据类型</li>
</ul>
<p>我这里创建了一个Book对象，这个Book对象只有name属性有值，将之传递到服务提供者那里去，服务提供者代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/getbook2"</span>, method = RequestMethod.POST)</div><div class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">book2</span><span class="params">(@RequestBody Book book)</span> </span>&#123;</div><div class="line">    System.out.println(book.getName());</div><div class="line">    book.setPrice(<span class="number">33</span>);</div><div class="line">    book.setAuthor(<span class="string">"曹雪芹"</span>);</div><div class="line">    book.setPublisher(<span class="string">"人民文学出版社"</span>);</div><div class="line">    <span class="keyword">return</span> book;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>服务提供者接收到服务消费者传来的参数book，给其他属性设置上值再返回，调用结果如下：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/aFjFlhl4l2.png" alt="mark"></p>
</li>
<li><p><strong>postForObject</strong></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/ij0G627Flh.png-1" alt="mark"></p>
<p>如果你只关注，返回的消息体，可以直接使用postForObject。用法和getForObject一致。</p>
</li>
<li><p><strong>postForLocation</strong></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/2dhJF1ld7b.png-1" alt="mark"></p>
<p>postForLocation 也是提交新资源，提交成功之后，返回新资源的 URI，postForLocation 的参数和前面两种的参数基本一致，只不过该方法的返回值为 URI ，这个只需要服务提供者返回一个 URI 即可，该 URI 表示新资源的位置。</p>
</li>
</ul>
<h3 id="PUT-方法"><a href="#PUT-方法" class="headerlink" title="PUT 方法"></a>PUT 方法</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/C7EJl11A7a.png-1" alt="mark"></p>
<p>在 RestTemplate 中，PUT 请求可以通过 put 方法调用，put 方法的参数和前面介绍的 postForEntity 方法的参数基本一致，只是 put 方法没有返回值而已。举一个简单的例子，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/put"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">()</span> </span>&#123;</div><div class="line">    Book book = <span class="keyword">new</span> Book();</div><div class="line">    book.setName(<span class="string">"红楼梦"</span>);</div><div class="line">    restTemplate.put(<span class="string">"http://HELLO-SERVICE/getbook3/&#123;1&#125;"</span>, book, <span class="number">99</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>book对象是我要提交的参数，最后的99用来替换前面的占位符{1}</p>
<h3 id="DELETE-方法"><a href="#DELETE-方法" class="headerlink" title="DELETE 方法"></a>DELETE 方法</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/gF7ID9a8bk.png-1" alt="mark"></p>
<p>delete 请求我们可以通过 delete 方法调用来实现，如下例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/delete"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</div><div class="line">    restTemplate.delete(<span class="string">"http://HELLO-SERVICE/getbook4/&#123;1&#125;"</span>, <span class="number">100</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="HEADER-方法"><a href="#HEADER-方法" class="headerlink" title="HEADER 方法"></a>HEADER 方法</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/707a2704Ij.png-1" alt="mark"></p>
<p>返回资源的所有 HTTP headers。</p>
<h3 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/DGJF2243G2.png-1" alt="mark"></p>
<p>问可以执行哪些方法。</p>
<h3 id="EXCHANGE"><a href="#EXCHANGE" class="headerlink" title="EXCHANGE"></a>EXCHANGE</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/CmFD4kl9g4.png-1" alt="mark"></p>
<p>与其它接口的不同：</p>
<ul>
<li>允许调用者指定HTTP请求的方法（GET,POST,PUT等）</li>
<li>可以在请求中增加body以及头信息，其内容通过参数 HttpEntity&lt;?&gt;requestEntity 描述</li>
<li>exchange支持‘含参数的类型’（即泛型类）作为返回类型，该特性通过 ParameterizedTypeReference<t>responseType 描述</t></li>
</ul>
<h3 id="EXECUTE"><a href="#EXECUTE" class="headerlink" title="EXECUTE"></a>EXECUTE</h3><p>细心的你，不知道有没有发现上面所有的方法内部返回值都调用了同一个方法 —— execute  方法。</p>
<p>下面我们来看看：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/1l7Il8faKH.png-1" alt="mark"></p>
<p>可以看到，Excute方法只是将 String 格式的 URI 转成了 java.net.URI，之后调用了doExecute方法。整个调用过程关键起作用的是 doExecute 方法</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/756HHijFIh.png-1" alt="mark"></p>
<h3 id="doExecute-方法"><a href="#doExecute-方法" class="headerlink" title="doExecute 方法"></a>doExecute 方法</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/A9dgDiG1JL.png-1" alt="mark"></p>
<p>这里需要了解两个类： RequestCallback 和 ResponseExtractor</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/B7k85lBkBk.png-1" alt="mark"></p>
<p>RestTemplate 类中可以看到他们两的实现类。</p>
<p><strong>RequestCallback</strong> ：用于操作请求头和body，在请求发出前执行。</p>
<p>该接口有两个实现类：</p>
<table>
<thead>
<tr>
<th style="text-align:left">AcceptHeaderRequestCallback</th>
<th style="text-align:left">只处理请求头，用于getXXX()方法。</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">HttpEntityRequestCallback</td>
<td style="text-align:left">继承于AcceptHeaderRequestCallback可以处理请求头和body，用于putXXX()、postXXX()和exchange()方法。</td>
</tr>
</tbody>
</table>
<p><strong>ResponseExtractor</strong>：解析HTTP响应的数据，而且不需要担心异常和资源的关闭</p>
<p>上面图纸这个实现类 ResponseEntityResponseExtractor 的作用是：使用 HttpMessageConverterExtractor 提取 body（委托模式），然后将 body 和响应头、状态封装成 ResponseEntity 对象。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>转载请注明地址：<a href="http://www.54tianzhisheng.cn/2017/12/03/RestTemplate/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/12/03/RestTemplate/</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、<a href="https://www.cnblogs.com/caolei1108/p/6169950.html" target="_blank" rel="external">https://www.cnblogs.com/caolei1108/p/6169950.html</a></p>
<p>2、<a href="https://segmentfault.com/a/1190000011093597" target="_blank" rel="external">https://segmentfault.com/a/1190000011093597</a></p>
<p>如果想和我进一步交流请关注：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171203/h5HaHC6g12.png-1" alt="mark"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/p3.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;这段时间自己做的项目中需要调用服务提供者的服务（接口），具体就是：我这边需要将页面所输入的 Groovy 脚本代码传给别人提供的服务接口，然后那边返回脚本编译的结果给我，我需要将编译结果展示在页面，用的就是 RestTemplate 了，那 RestTemplate 是什么呢？简单说就是：简化了发起 HTTP 请求以及处理响应的过程，并且支持 REST 。下文就稍微总结下。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>实习圈群里提问小记</title>
    <link href="http://yoursite.com/2017/12/02/wx-01/"/>
    <id>http://yoursite.com/2017/12/02/wx-01/</id>
    <published>2017-12-02T15:13:25.666Z</published>
    <updated>2017-12-02T15:19:36.268Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/p2.jpeg-1" alt=""></p>
<a id="more"></a>
<p><img src="http://ohfk1r827.bkt.clouddn.com/wx-01.png-1" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/p2.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="实习圈" scheme="http://yoursite.com/tags/%E5%AE%9E%E4%B9%A0%E5%9C%88/"/>
    
  </entry>
  
  <entry>
    <title>基于 Harbor 搭建 Docker 私有镜像仓库</title>
    <link href="http://yoursite.com/2017/11/26/Docker-harbor/"/>
    <id>http://yoursite.com/2017/11/26/Docker-harbor/</id>
    <published>2017-11-26T02:47:27.733Z</published>
    <updated>2017-11-26T02:44:45.727Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171126/j9de1Jf6m0.png-1" alt="mark"></p>
<h3 id="什么是-Harbor？"><a href="#什么是-Harbor？" class="headerlink" title="什么是 Harbor？"></a>什么是 Harbor？</h3><p>第一次使用这个的时候是刚进公司处理的第一个任务的时候，发现 Harbor 就是一个用于存储和分发 Docker 镜像的企业级Registry 服务器。<br><a id="more"></a><br>网上找到一个 Harbor 的架构图：</p>
<p><img src="http://img.blog.csdn.net/20170912121921883?/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDI3ODkyMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>Harbor 是 VMware 公司开源的企业级 DockerRegistry 项目，项目地址为 <a href="https://github.com/vmware/harbor。其目标是帮助用户迅速搭建一个企业级的" target="_blank" rel="external">https://github.com/vmware/harbor。其目标是帮助用户迅速搭建一个企业级的</a> Docker registry 服务。它以 Docker 公司开源的 registry 为基础，提供了管理UI，基于角色的访问控制(Role Based Access Control)，AD/LDAP集成、以及审计日志(Auditlogging) 等企业用户需求的功能，同时还原生支持中文。Harbor 的每个组件都是以 Docker 容器的形式构建的，使用 Docker Compose 来对它进行部署。</p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>1、自己在腾讯云买的服务器（CentOS7.3）</p>
<p>2、Docker 版本：17.05.0-ce</p>
<p>3、Docker-compose：1.17.1</p>
<p>4、Harbor：1.1.2</p>
<h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p>因为系统是 CentOS 7.3 ，内核啥的都已经是 3.10，所以不用担心内核升级的问题，一些操作啥的在 7.x 上操作也很方便。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">yum  update                             //系统版本更新</div><div class="line"></div><div class="line">vim /etc/yum.repos.d/docker.repo        //添加以下内容</div><div class="line"></div><div class="line">[dockerrepo]</div><div class="line">name=Docker Repository</div><div class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/7/</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=https://yum.dockerproject.org/gpg</div><div class="line"></div><div class="line">//下面安装 Docker 引擎</div><div class="line">yum install docker-engine  -y</div><div class="line"></div><div class="line">//安装docker引擎，此步也可作为更新docker版本的操作：先#systemctl stop docker 停止docker服务，再#yum install docker-engine 更新docker版本</div><div class="line"></div><div class="line">systemctl  enable  docker.service</div><div class="line"></div><div class="line">systemctl  start   docker              //启动docker守护进程</div><div class="line"></div><div class="line">docker info                            //查看docker运行情况</div><div class="line"></div><div class="line">docker -v							//查看版本信息</div></pre></td></tr></table></figure>
<p>修改 Docker 配置文件 /etc/default/docker 如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DOCKER_OPTS=&quot;--registry-mirror=http://aad0405c.m.daocloud.io&quot;	//换成国内的镜像加速源，不然拉取镜像简直龟速，不想在吐槽了</div></pre></td></tr></table></figure>
<p>使用 <code>service docker restart</code> 重启 Docker 服务即可。</p>
<p>或者用官方提供的方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://ef017c13.m.daocloud.io</div></pre></td></tr></table></figure>
<h3 id="安装-Docker-compose"><a href="#安装-Docker-compose" class="headerlink" title="安装 Docker-compose"></a>安装 Docker-compose</h3><p>如果是想直接命令安装也行，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">下载指定版本的docker-compose</div><div class="line"></div><div class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</div><div class="line"></div><div class="line">对二进制文件赋可执行权限</div><div class="line"></div><div class="line">chmod +x /usr/local/bin/docker-compose</div><div class="line"></div><div class="line">测试下docker-compose是否安装成功</div><div class="line"></div><div class="line">docker-compose --version</div><div class="line"></div><div class="line">出现如下</div><div class="line">docker-compose version 1.17.1, build 6d101fb</div></pre></td></tr></table></figure>
<p>但是，这种方法简直龟速，幸好还有种方法，</p>
<p>见这里：<a href="https://docs.docker.com/compose/install/#install-compose" target="_blank" rel="external">https://docs.docker.com/compose/install/#install-compose</a></p>
<p>这种需要通过 Python 的 pip 安装</p>
<h4 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate https://pypi.python.org/packages/source/s/setuptools/setuptools-1.4.2.tar.gz</div><div class="line"></div><div class="line">tar -vxf setuptools-1.4.2.tar.gz</div><div class="line"></div><div class="line">cd setuptools-1.4.2</div><div class="line"></div><div class="line">python2.7 setup.py install		//因为服务器自带 Python 2.7</div><div class="line"></div><div class="line">easy_install-2.7 pip</div></pre></td></tr></table></figure>
<h4 id="安装-docker-compose"><a href="#安装-docker-compose" class="headerlink" title="安装 docker compose"></a>安装 docker compose</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pip install docker-compose</div><div class="line"></div><div class="line">docker-compose --version	//测试安装是否成功</div></pre></td></tr></table></figure>
<h3 id="安装-Harbor"><a href="#安装-Harbor" class="headerlink" title="安装 Harbor"></a>安装 Harbor</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/vmware/harbor/releases/download/v1.1.2/harbor-offline-installer-v1.1.2.tgz</div><div class="line"></div><div class="line">离线安装包,也是龟速，把这个下载链接用迅雷下载，速度却贼快，嘿嘿，然后再传到服务器上去，整个过程快很多！</div><div class="line"></div><div class="line">tar -zxvf harbor-offline-installer-v1.1.2.tgz</div></pre></td></tr></table></figure>
<p>解压缩之后，进入目录下会看到 harbor.cfg 文件，该文件就是 Harbor 的配置文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line">## Configuration file of Harbor</div><div class="line"></div><div class="line"># hostname设置访问地址，可以使用ip、域名，不可以设置为127.0.0.1或localhost</div><div class="line">hostname = 115.159.227.249   #这里我先配置我的服务器IP地址</div><div class="line"></div><div class="line"># 访问协议，默认是http，也可以设置https，如果设置https，则nginx ssl需要设置on</div><div class="line">ui_url_protocol = http</div><div class="line"></div><div class="line"># mysql数据库root用户默认密码root123，实际使用时修改下</div><div class="line">db_password = root123</div><div class="line"></div><div class="line">#Maximum number of job workers in job service</div><div class="line">max_job_workers = 3</div><div class="line"></div><div class="line">#Determine whether or not to generate certificate for the registry&apos;s token.</div><div class="line">#If the value is on, the prepare script creates new root cert and private key</div><div class="line">#for generating token to access the registry. If the value is off the default key/cert will be used.</div><div class="line">#This flag also controls the creation of the notary signer&apos;s cert.</div><div class="line">customize_crt = on</div><div class="line"></div><div class="line">#The path of cert and key files for nginx, they are applied only the protocol is set to https</div><div class="line">ssl_cert = /data/cert/server.crt</div><div class="line">ssl_cert_key = /data/cert/server.key</div><div class="line"></div><div class="line">#The path of secretkey storage</div><div class="line">secretkey_path = /data</div><div class="line"></div><div class="line">#Admiral&apos;s url, comment this attribute, or set its value to NA when Harbor is standalone</div><div class="line">admiral_url = NA</div><div class="line"></div><div class="line">#NOTES: The properties between BEGIN INITIAL PROPERTIES and END INITIAL PROPERTIES</div><div class="line">#only take effect in the first boot, the subsequent changes of these properties</div><div class="line">#should be performed on web ui</div><div class="line"></div><div class="line">#************************BEGIN INITIAL PROPERTIES************************</div><div class="line"></div><div class="line">#Email account settings for sending out password resetting emails.</div><div class="line"></div><div class="line">#Email server uses the given username and password to authenticate on TLS connections to host and act as identity.</div><div class="line">#Identity left blank to act as username.</div><div class="line">email_identity =</div><div class="line"></div><div class="line">email_server = smtp.mydomain.com</div><div class="line">email_server_port = 25</div><div class="line">email_username = sample_admin@mydomain.com</div><div class="line">email_password = abc</div><div class="line">email_from = admin &lt;sample_admin@mydomain.com&gt;</div><div class="line">email_ssl = false</div><div class="line"></div><div class="line">##The initial password of Harbor admin, only works for the first time when Harbor starts.</div><div class="line">#It has no effect after the first launch of Harbor.</div><div class="line"># 启动Harbor后，管理员UI登录的密码，默认是Harbor12345</div><div class="line">harbor_admin_password = Harbor12345</div><div class="line"></div><div class="line"># 认证方式，这里支持多种认证方式，如LADP、本次存储、数据库认证。默认是db_auth，mysql数据库认证</div><div class="line">auth_mode = db_auth</div><div class="line"></div><div class="line">#The url for an ldap endpoint.</div><div class="line">ldap_url = ldaps://ldap.mydomain.com</div><div class="line"></div><div class="line">#A user&apos;s DN who has the permission to search the LDAP/AD server.</div><div class="line">#If your LDAP/AD server does not support anonymous search, you should configure this DN and ldap_search_pwd.</div><div class="line">#ldap_searchdn = uid=searchuser,ou=people,dc=mydomain,dc=com</div><div class="line"></div><div class="line">#the password of the ldap_searchdn</div><div class="line">#ldap_search_pwd = password</div><div class="line"></div><div class="line">#The base DN from which to look up a user in LDAP/AD</div><div class="line">ldap_basedn = ou=people,dc=mydomain,dc=com</div><div class="line"></div><div class="line">#Search filter for LDAP/AD, make sure the syntax of the filter is correct.</div><div class="line">#ldap_filter = (objectClass=person)</div><div class="line"></div><div class="line"># The attribute used in a search to match a user, it could be uid, cn, email, sAMAccountName or other attributes de</div><div class="line">pending on your LDAP/AD  ldap_uid = uid</div><div class="line"></div><div class="line">#the scope to search for users, 1-LDAP_SCOPE_BASE, 2-LDAP_SCOPE_ONELEVEL, 3-LDAP_SCOPE_SUBTREE</div><div class="line">ldap_scope = 3</div><div class="line"></div><div class="line">#Timeout (in seconds)  when connecting to an LDAP Server. The default value (and most reasonable) is 5 seconds.</div><div class="line">ldap_timeout = 5</div><div class="line"></div><div class="line"># 是否开启自注册</div><div class="line">self_registration = on</div><div class="line"></div><div class="line"># Token有效时间，默认30分钟</div><div class="line">token_expiration = 30</div><div class="line"></div><div class="line"># 用户创建项目权限控制，默认是everyone（所有人），也可以设置为adminonly（只能管理员）</div><div class="line">project_creation_restriction = everyone</div><div class="line"></div><div class="line">#Determine whether the job service should verify the ssl cert when it connects to a remote registry.</div><div class="line">#Set this flag to off when the remote registry uses a self-signed or untrusted certificate.</div><div class="line">verify_remote_cert = on</div><div class="line">#************************END INITIAL PROPERTIES************************</div></pre></td></tr></table></figure>
<p>启动 harbor，修改完配置文件后，在的当前目录执行<code>./install.sh</code>，Harbor服务就会根据当期目录下的<code>docker-compose.yml</code>开始下载依赖的镜像，检测并按照顺序依次启动各个服务。</p>
<p>启动完成后，我们访问刚设置的 hostname 即可，<a href="http://115.159.227.249/，默认是80端口，如果端口占用，我们可以去修改docker-compose.yml文件中，对应服务的端口映射。" target="_blank" rel="external">http://115.159.227.249/，默认是80端口，如果端口占用，我们可以去修改docker-compose.yml文件中，对应服务的端口映射。</a></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171126/JgL96AjdEc.jpg-1" alt="mark"></p>
<p>登录 Web Harbor , 输入用户名 admin，默认密码（或已修改密码）登录系统。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171126/b98k9d2jcE.png-1" alt="mark"></p>
<p>我们可以看到系统各个模块如下：</p>
<ul>
<li>项目：新增/删除项目，查看镜像仓库，给项目添加成员、查看操作日志、复制项目等</li>
<li>日志：仓库各个镜像create、push、pull等操作日志</li>
<li>系统管理<ul>
<li>用户管理：新增/删除用户、设置管理员等</li>
<li>复制管理：新增/删除从库目标、新建/删除/启停复制规则等</li>
<li>配置管理：认证模式、复制、邮箱设置、系统设置等</li>
</ul>
</li>
<li>其他设置<ul>
<li>用户设置：修改用户名、邮箱、名称信息</li>
<li>修改密码：修改用户密码</li>
</ul>
</li>
</ul>
<p>注意：非系统管理员用户登录，只能看到有权限的项目和日志，其他模块不可见。</p>
<p>我们要尝试下能不能把自己 Docker 里面的镜像 push 到 Harbor 的 library 里来（默认这个 library 项目是公开的，所有人都可以有读的权限，都不需要 docker login 进来，就可以拉取里面的镜像）。</p>
<p><strong>注意：</strong></p>
<p>为了后面留坑，我这里先 在自己的 docker.service 中添加仓库：（这是个坑，建议你先按照我说的做，不然下面可能会一直登录不上）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim /usr/lib/systemd/system/docker.service</div><div class="line"></div><div class="line">里面的这行修改为：（其实就是添加 --insecure-registry 115.159.227.249 ）</div><div class="line">ExecStart=/usr/bin/dockerd --insecure-registry 115.159.227.249</div></pre></td></tr></table></figure>
<p>添加完了后重新启动 docker：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl daemon-reload &amp;&amp; systemctl enable docker &amp;&amp; systemctl start docker</div></pre></td></tr></table></figure>
<p>启动 docker 服务:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service docker start</div></pre></td></tr></table></figure>
<p>登录：（为了测试下能否登录成功）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">admin登录</div><div class="line">$ docker login 115.159.227.249</div><div class="line">Username: admin</div><div class="line">Password:</div><div class="line">Login Succeeded</div></pre></td></tr></table></figure>
<p>打 tag 并 push</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">docker tag ubuntu:15.10  115.159.227.249/library/ubuntu:15.10		//给我的镜像打个 tag</div><div class="line"></div><div class="line">docker push  115.159.227.249/library/ubuntu</div><div class="line"></div><div class="line">The push refers to a repository [115.159.227.249/library/ubuntu]</div><div class="line">98d59071f692: Pushed</div><div class="line">af288f00b8a7: Pushed</div><div class="line">4b955941a4d0: Pushed</div><div class="line">f121afdbbd5d: Pushed</div><div class="line">15.10: digest: sha256:ec89c4a90f45f5e103860191890f48d8379e0504a2881ff706aef0768dc0321b size: 1150</div></pre></td></tr></table></figure>
<p>上传完毕后，登录Web Harbor，选择项目 library，就可以看到我刚 push 的镜像了。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/blog/171126/0d82GLa1Cb.png-1" alt="mark"></p>
<p>同理，你也可以测试下从 Harbor pull 镜像到你的 Docker 中去，这里就不继续演示了。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>转载请注明地址为：<a href="http://www.54tianzhisheng.cn/2017/11/26/Docker-harbor/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/11/26/Docker-harbor/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/171126/j9de1Jf6m0.png-1&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是-Harbor？&quot;&gt;&lt;a href=&quot;#什么是-Harbor？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Harbor？&quot;&gt;&lt;/a&gt;什么是 Harbor？&lt;/h3&gt;&lt;p&gt;第一次使用这个的时候是刚进公司处理的第一个任务的时候，发现 Harbor 就是一个用于存储和分发 Docker 镜像的企业级Registry 服务器。&lt;br&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>基于分布式环境下限流系统的设计</title>
    <link href="http://yoursite.com/2017/11/18/flow-control/"/>
    <id>http://yoursite.com/2017/11/18/flow-control/</id>
    <published>2017-11-18T03:00:35.170Z</published>
    <updated>2017-11-18T03:04:06.707Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/p1.jpeg-1" alt=""><br><a id="more"></a></p>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><h4 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h4><p>就拿前些天的双十一的 “抢券活动” 来说，一般是设置整点开始抢的，你想想，淘宝的用户群体非常大，可以达到亿级别，而服务接口每秒能处理的量是有限的，那么这个时候问题就会出现，我们如何通过程序来控制用户抢券呢，于是就必须加上这个限流功能了。</p>
<h4 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h4><p>1、服务接口所能提供的服务上限（limit）假如是 500次/s</p>
<p>2、用户请求接口的次数未知，QPS可能达到 800次/s，1000次/s，或者更高</p>
<p>3、当服务接口的访问频率超过 500次/s，超过的量将拒绝服务，多出的信息将会丢失</p>
<p>4、线上环境是多节点部署的，但是调用的是同一个服务接口</p>
<p>于是，为了保证服务的可用性，就要对服务接口调用的速率进行限制（接口限流）。</p>
<h3 id="什么是限流？"><a href="#什么是限流？" class="headerlink" title="什么是限流？"></a>什么是限流？</h3><p>限流是对系统的<strong>出入流量</strong>进行<strong>控制</strong>，防止大流量出入，导致<strong>资源</strong>不足，系统不稳定。</p>
<p>限流系统是对资源访问的控制组件，控制主要的两个功能：<strong>限流策略</strong>和<strong>熔断策略</strong>，对于熔断策略，不同的系统有不同的熔断策略诉求，有的系统希望直接拒绝、有的系统希望排队等待、有的系统希望服务降级、有的系统会定制自己的熔断策略，这里只针对<strong>限流策略</strong>这个功能做详细的设计。</p>
<h3 id="限流算法"><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h3><h4 id="1、限制瞬时并发数"><a href="#1、限制瞬时并发数" class="headerlink" title="1、限制瞬时并发数"></a>1、限制瞬时并发数</h4><p>Guava RateLimiter 提供了令牌桶算法实现：平滑突发限流(SmoothBursty)和平滑预热限流(SmoothWarmingUp)实现。</p>
<h4 id="2、限制某个接口的时间窗最大请求数"><a href="#2、限制某个接口的时间窗最大请求数" class="headerlink" title="2、限制某个接口的时间窗最大请求数"></a>2、限制某个接口的时间窗最大请求数</h4><p>即一个时间窗口内的请求数，如想限制某个接口/服务每秒/每分钟/每天的请求数/调用量。如一些基础服务会被很多其他系统调用，比如商品详情页服务会调用基础商品服务调用，但是怕因为更新量比较大将基础服务打挂，这时我们要对每秒/每分钟的调用量进行限速；一种实现方式如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">LoadingCache&lt;Long, AtomicLong&gt; counter =</div><div class="line">        CacheBuilder.newBuilder()</div><div class="line">                .expireAfterWrite(<span class="number">2</span>, TimeUnit.SECONDS)</div><div class="line">                .build(<span class="keyword">new</span> CacheLoader&lt;Long, AtomicLong&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> AtomicLong <span class="title">load</span><span class="params">(Long seconds)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"><span class="keyword">long</span> limit = <span class="number">1000</span>;</div><div class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">    <span class="comment">//得到当前秒</span></div><div class="line">    <span class="keyword">long</span> currentSeconds = System.currentTimeMillis() / <span class="number">1000</span>;</div><div class="line">    <span class="keyword">if</span>(counter.get(currentSeconds).incrementAndGet() &gt; limit) &#123;</div><div class="line">        System.out.println(<span class="string">"限流了:"</span> + currentSeconds);</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//业务处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用Guava的Cache来存储计数器，过期时间设置为2秒（保证1秒内的计数器是有的），然后我们获取当前时间戳然后取秒数来作为KEY进行计数统计和限流，这种方式也是简单粗暴，刚才说的场景够用了。</p>
<h4 id="3、令牌桶"><a href="#3、令牌桶" class="headerlink" title="3、令牌桶"></a>3、令牌桶</h4><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1flk2kudl1oj318w0ymwgp.jpg" alt=""></p>
<p>算法描述：</p>
<ul>
<li>假如用户配置的平均发送速率为r，则每隔1/r秒一个令牌被加入到桶中</li>
<li>假设桶中最多可以存放b个令牌。如果令牌到达时令牌桶已经满了，那么这个令牌会被丢弃</li>
<li>当流量以速率v进入，从桶中以速率v取令牌，拿到令牌的流量通过，拿不到令牌流量不通过，执行熔断逻辑</li>
</ul>
<p><strong>属性</strong></p>
<ul>
<li>长期来看，符合流量的速率是受到令牌添加速率的影响，被稳定为：r</li>
<li>因为令牌桶有一定的存储量，可以抵挡一定的流量突发情况<ul>
<li>M是以字节/秒为单位的最大可能传输速率。 M&gt;r</li>
<li>T max = b/(M-r) 承受最大传输速率的时间</li>
<li>B max = T max * M 承受最大传输速率的时间内传输的流量</li>
</ul>
</li>
</ul>
<p><strong>优点</strong>：流量比较平滑，并且可以抵挡一定的流量突发情况</p>
<h4 id="4、Google-guava-提供的工具库中-RateLimiter-类（内部也是采用令牌桶算法实现）"><a href="#4、Google-guava-提供的工具库中-RateLimiter-类（内部也是采用令牌桶算法实现）" class="headerlink" title="4、Google guava 提供的工具库中 RateLimiter 类（内部也是采用令牌桶算法实现）"></a>4、Google guava 提供的工具库中 RateLimiter 类（内部也是采用令牌桶算法实现）</h4><p>最快的方式是使用 RateLimit 类，但是这仅限制在单节点，如果是分布式系统，每个节点的 QPS 是一样的，请求量到服务接口那的话就是 QPS * 节点数 了。所以这种方案在分布式的情况下不适用！</p>
<h4 id="5、基于-Redis-实现，存储两个-key，一个用于计时，一个用于计数。请求每调用一次，计数器增加-1，若在计时器时间内计数器未超过阈值，则可以处理任务。"><a href="#5、基于-Redis-实现，存储两个-key，一个用于计时，一个用于计数。请求每调用一次，计数器增加-1，若在计时器时间内计数器未超过阈值，则可以处理任务。" class="headerlink" title="5、基于 Redis 实现，存储两个 key，一个用于计时，一个用于计数。请求每调用一次，计数器增加 1，若在计时器时间内计数器未超过阈值，则可以处理任务。"></a>5、基于 Redis 实现，存储两个 key，一个用于计时，一个用于计数。请求每调用一次，计数器增加 1，若在计时器时间内计数器未超过阈值，则可以处理任务。</h4><p>这种能够很好地解决了分布式环境下多实例所导致的并发问题。因为使用redis设置的计时器和计数器均是全局唯一的，不管多少个节点，它们使用的都是同样的计时器和计数器，因此可以做到非常精准的流控。</p>
<p>代码就不公布了，毕竟涉及公司隐私了。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>参考文章：</p>
<p><a href="https://www.zybuluo.com/kay2/note/949160" target="_blank" rel="external">基于Redis的限流系统的设计</a></p>
<p>感兴趣的可以看看别人的代码是怎么写的：<a href="https://github.com/wukq/rate-limiter" target="_blank" rel="external">https://github.com/wukq/rate-limiter</a></p>
<p>转载请注明文章地址为：<a href="http://www.54tianzhisheng.cn/2017/11/18/flow-control/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/11/18/flow-control/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/p1.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
      <category term="流控" scheme="http://yoursite.com/tags/%E6%B5%81%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>谈谈我的理财</title>
    <link href="http://yoursite.com/2017/11/17/Money-management/"/>
    <id>http://yoursite.com/2017/11/17/Money-management/</id>
    <published>2017-11-17T14:39:49.547Z</published>
    <updated>2017-11-18T06:28:27.865Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/p5.jpeg-1" alt=""><br><a id="more"></a></p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最开始接触理财是去年的时候，在我的一个群里（几个好朋友），有个朋友他女朋友是学金融的，当时还开玩笑地说叫她带带我们怎么买股票、基金、黄金这些东西呢。后来在群里偶尔聊下这方面的东西！</p>
<h3 id="黄金"><a href="#黄金" class="headerlink" title="黄金"></a>黄金</h3><p>那时我第才开始接触黄金，也是自己一个人买了点支付宝里面的存金宝，（不多，就几百块），后来慢慢的加仓和减仓，刚开始的时候，因为是刚上手这些东西，比较对这每天的数字增长和降低很在意，一天打开蚂蚁聚宝的次数很多，老是看着每天的实时参考金价，反正就是心理各种不踏实。就是那种患得患失的感觉，哈哈，我也不知道怎么形容了。。。😳</p>
<p>那时也不懂，老是追涨低抛，没有打算长期持有。附图：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/1510975499100.jpg-1" alt=""></p>
<p>现在看看这图，想想自己以前真傻。可以发现现在已经没买黄金了，对，在今年的时候主要是关注些基金！</p>
<h3 id="基金"><a href="#基金" class="headerlink" title="基金"></a>基金</h3><p>通过买黄金，发现，黄金增长下跌确实不怎么那么尽人意，只赚了一点点。然后慢慢在关注着基金，发现有些基金的还是收入效果还是很好的。</p>
<p>什么是基金呢？</p>
<p>好像有很多种，但是我的理解是，我们散户有点闲钱，打算投资，又没时间去买股票，一是缺乏经验，不知道买哪支，而是没空去整天盯着股票的走势。这时就出现了一个平台，我们散户把钱投给这个平台，平台有专业的人去进行买股票，如买股票有盈利，则大家一起赚钱，如果亏，则一起亏，我对基金就是这样的理解，也不知道对不对？</p>
<p>再说说我现在主要买的基金吧，看看收益图：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/1510976848761.jpg-1" alt=""></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/1510976875638.jpg-1" alt=""></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/1510976815189.jpg-1" alt=""></p>
<p>嘿嘿，这几个是我观察很久了，并觉得长期看好的基金了，当然以前也买过一两个基金，有个亏得不少，有涨有跌，现在觉得又要平常心，如果是长期看好的，没必要纠结这一两天的涨跌，等过段时间再来看看效果咋样（心态一定要好），如果遇到被套的话，有时也需要装死心态，哈哈！另外，我还自选了一批基金，正在观察中，等有时间把觉得还行的给统计下！</p>
<h3 id="股票"><a href="#股票" class="headerlink" title="股票"></a>股票</h3><p>这个不太懂，不过目前觉得我自己公司的股票也还不错，打算看什么时候有机会买点，这东西都是靠自己慢慢研究出来的，然后就是看看高人指点，我倒是关注了点微信公众号讲这方面的知识，微博也关注了几个，在蚂蚁财富里面也关注些，觉得有些还是很靠谱的，还是一样，有时间继续做个统计，然后发在我的小密圈里面。</p>
<h3 id="友金所"><a href="#友金所" class="headerlink" title="友金所"></a>友金所</h3><p>投了这个是因为进 stormzhang 的小密圈，通过注册并投资点可以免费进他的小密圈，不然得花 199 元，这算很优惠了。因为是新用户，所以这个收益很高，一个月期限，12% 的收益！</p>
<h3 id="余额宝"><a href="#余额宝" class="headerlink" title="余额宝"></a>余额宝</h3><p>支付宝里的，平常钱也一般放这里面，因为平时用支付宝比较多，放这里，可以付款的时候选择直接余额宝支付，另外还有差不多 4% 的收益，可以随时存取，比较方便！</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>有时间将上面所说的：自选基金列表、微信公众号、微博这几个列表发在我的小密圈里。</p>
<p>最重要的话还是得说三遍：</p>
<p><strong>投资有风险，需谨慎！</strong></p>
<p><strong>投资有风险，需谨慎！</strong></p>
<p><strong>投资有风险，需谨慎！</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/p5.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="投资理财" scheme="http://yoursite.com/tags/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Maven 中 dependencies 与 dependencyManagement 的区别</title>
    <link href="http://yoursite.com/2017/11/11/Maven-dependencies-dependencyManagement/"/>
    <id>http://yoursite.com/2017/11/11/Maven-dependencies-dependencyManagement/</id>
    <published>2017-11-11T08:44:56.946Z</published>
    <updated>2017-11-11T08:46:53.198Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/c20.jpeg-1" alt=""></p>
<a id="more"></a>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>这段时间项目中遇到过了一些 Jar 包冲突的问题，很多是由于我们项目模块很多的时候，用 Maven 管理不当导致的冲突问题，本文就这个问题参考网上的资料，于是总结下 Maven 中 dependencies 与 dependencyManagement 的区别。</p>
<p>假设项目结构如下：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/projects.jpg-1" alt=""></p>
<p>parent 为父模块，抽象出来管理子项目的公共依赖，为了项目的正确运行，必须让所有的子项目使用依赖项的统一版本，必须确保应用的各个项目的依赖项和版本一致，才能保证测试的和发布的是相同的结果。</p>
<h3 id="dependencyManagement"><a href="#dependencyManagement" class="headerlink" title="dependencyManagement"></a>dependencyManagement</h3><p>在项目的 parent 层，可以通过  dependencyManagement 元素来管理 jar 包的版本，让子项目中引用一个依赖而不用显示的列出版本号。</p>
<p>parent 中 pom.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version.framework</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version.framework</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">javaee-api.version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">javaee-api.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhisheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>framework-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;version.framework&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;javaee-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>
<p>extendion 中的 pom.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhisheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--依赖关系--&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhisheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>framework-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样做的好处：统一管理项目的版本号，确保应用的各个项目的依赖和版本一致，才能保证测试的和发布的是相同的成果，因此，在顶层 pom 中定义共同的依赖关系。同时可以避免在每个使用的子项目中都声明一个版本号，这样想升级或者切换到另一个版本时，只需要在父类容器里更新，不需要任何一个子项目的修改；如果某个子项目需要另外一个版本号时，只需要在 dependencies 中声明一个版本号即可。子类就会使用子类声明的版本号，不继承于父类版本号。</p>
<p>我们知道 Maven 的继承和 Java 的继承一样，是无法实现多重继承的，如果10个、20个甚至更多模块继承自同一个模块，那么按照我们之前的做法，这个父模块的 dependencyManagement 会包含大量的依赖。如果你想把这些依赖分类以更清晰的管理，那就不可能了，import scope 依赖能解决这个问题。你可以把 dependencyManagement 放到单独的专门用来管理依赖的 POM 中，然后在需要使用依赖的模块中通过 import scope 依赖，就可以引入dependencyManagement。例如可以写这样一个用于依赖管理的 POM：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhisheng.sample<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sample-dependency-infrastructure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后就可以通过非继承的方式来引入这段依赖管理配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhisheng.sample<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>sample-dependency-infrastructure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactid</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样，父模块的 POM 就会非常干净，由专门的 packaging 为 pom 的 POM 来管理依赖，也契合的面向对象设计中的单一职责原则。此外，我们还能够创建多个这样的依赖管理 POM，以更细化的方式管理依赖。这种做法与面向对象设计中使用组合而非继承也有点相似的味道。</p>
<h3 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h3><p>相对于 dependencyManagement，所有声明在父项目中 dependencies 里的依赖都会被子项目自动引入，并默认被所有的子项目继承。</p>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p> <strong>dependencies</strong> 即使在子项目中不写该依赖项，那么子项目仍然会从父项目中继承该依赖项（全部继承）</p>
<p> <strong>dependencyManagement</strong> 里只是声明依赖，并不实现引入，因此子项目需要显示的声明需要用的依赖。如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且 version 和 scope 都读取自父 pom; 另外如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。</p>
<h3 id="消除多模块插件配置重复"><a href="#消除多模块插件配置重复" class="headerlink" title="消除多模块插件配置重复"></a>消除多模块插件配置重复</h3><p>与 dependencyManagement 类似的，我们也可以使用 pluginManagement 元素管理插件。一个常见的用法就是我们希望项目所有模块的使用 Maven Compiler Plugin 的时候，都使用 Java 1.8，以及指定 Java 源文件编码为 UTF-8，这时可以在父模块的 POM 中如下配置 pluginManagement：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这段配置会被应用到所有子模块的 maven-compiler-plugin 中，由于 Maven 内置了 maven-compiler-plugin 与生命周期的绑定，因此子模块就不再需要任何 maven-compiler-plugin 的配置了。</p>
<p>与依赖配置不同的是，通常所有项目对于任意一个依赖的配置都应该是统一的，但插件却不是这样，例如你可以希望模块 A 运行所有单元测试，模块 B 要跳过一些测试，这时就需要配置 maven-surefire-plugin 来实现，那样两个模块的插件配置就不一致了。这也就是说，简单的把插件配置提取到父 POM 的 pluginManagement 中往往不适合所有情况，那我们在使用的时候就需要注意了，只有那些普适的插件配置才应该使用 pluginManagement 提取到父 POM 中。</p>
<p>关于插件 pluginManagement，Maven 并没有提供与 import scope 依赖类似的方式管理，那我们只能借助继承关系，不过好在一般来说插件配置的数量远没有依赖配置那么多，因此这也不是一个问题。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>你看到的只是冰山一角，更多请看书籍<a href="https://union-click.jd.com/jdc?d=hNj9Lu" target="_blank" rel="external">《Maven 实战》</a> 。</p>
<p>转载请注明地址：<a href="http://www.54tianzhisheng.cn/2017/11/11/Maven-dependencies-dependencyManagement/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/11/11/Maven-dependencies-dependencyManagement/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/c20.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Maven" scheme="http://yoursite.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>送你一份双十一剁手书单【墙裂推荐】</title>
    <link href="http://yoursite.com/2017/11/11/recommended-books/"/>
    <id>http://yoursite.com/2017/11/11/recommended-books/</id>
    <published>2017-11-11T02:28:08.726Z</published>
    <updated>2017-11-11T02:27:46.032Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1510377299466&amp;di=46ef1567d27dca27fcfe2970924e2c28&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.redsh.com%2Fimg2017%2F1710251213522.jpeg" alt=""><br>昨晚和朋友聊天说双十一都买啥，结果 TMD 竟然都是书籍，不愧是标准的程序猿。所以这里想推荐基佬的一份书单，方便大家在双十一剁剁剁，建议先收藏本书单，认真啃完一本再买下一本，扎实走完每一步，希望书单能在你想要进一步打怪升级的路上，给予些许帮助！<br><a id="more"></a></p>
<h2 id="书籍列表"><a href="#书籍列表" class="headerlink" title="书籍列表"></a>书籍列表</h2><h3 id="《Effective-Java-中文版》"><a href="#《Effective-Java-中文版》" class="headerlink" title="《Effective Java 中文版》"></a><a href="https://union-click.jd.com/jdc?d=S003h8" target="_blank" rel="external">《Effective Java 中文版》</a></h3><ul>
<li>豆瓣评分：9.1【1235 人评价】</li>
<li>推荐理由：本书介绍了在Java编程中78条极具实用价值的经验规则，这些经验规则涵盖了大多数开发人员每天所面临的问题的解决方案。</li>
<li>友情提示：同推荐《重构 : 改善既有代码的设计》、《代码整洁之道》、《代码大全》，有一定的内容重叠。</li>
</ul>
<h3 id="《Java性能权威指南》"><a href="#《Java性能权威指南》" class="headerlink" title="《Java性能权威指南》"></a><a href="https://union-click.jd.com/jdc?d=EK9G95" target="_blank" rel="external">《Java性能权威指南》</a></h3><ul>
<li>豆瓣评分：8.2【44 人评价】</li>
<li>推荐理由：市面上介绍Java的书有很多，但专注于Java性能的并不多，能游刃有余地展示Java性能优化难点的更是凤毛麟角，本书即是其中之一。通过使用JVM和Java平台，以及Java语言和应用程序接口，本书详尽讲解了Java性能调优的相关知识，帮助读者深入理解Java平台性能的各个方面，最终使程序如虎添翼。</li>
</ul>
<h3 id="《Spring揭秘》"><a href="#《Spring揭秘》" class="headerlink" title="《Spring揭秘》"></a><a href="https://union-click.jd.com/jdc?d=kYry5g" target="_blank" rel="external">《Spring揭秘》</a></h3><ul>
<li>豆瓣评分：9.0 【162 人评价】</li>
<li>推荐理由：Spring 使用者不得不读！</li>
<li>推荐博客：<a href="http://spring4all.com/" target="_blank" rel="external">Spring4All社区</a></li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=spring4all" target="_blank" rel="external">Spring4All社区</a></li>
</ul>
<h3 id="《SpringBoot揭秘》"><a href="#《SpringBoot揭秘》" class="headerlink" title="《SpringBoot揭秘》"></a><a href="https://union-click.jd.com/jdc?d=Ym8Bu8" target="_blank" rel="external">《SpringBoot揭秘》</a></h3><ul>
<li>豆瓣评分：6.8 【44 人评价】</li>
<li>推荐理由：《Spring揭秘》相同作者。SpringBoot 入门书籍。</li>
<li>作者博客：<a href="https://afoo.me/" target="_blank" rel="external">扶墙老师说：一个架构士的思考与沉淀</a></li>
<li>作者公众号：<a href="https://afoo.me/images/qrcode_for_gh_4fe672b2e860_430.jpg" target="_blank" rel="external">扶墙老师说</a></li>
<li>付费教程：<a href="https://segmentfault.com/ls/1650000011063780" target="_blank" rel="external">《Java 微服务实践 - Spring Boot 系列》</a></li>
</ul>
<h3 id="《MyBatis技术内幕》"><a href="#《MyBatis技术内幕》" class="headerlink" title="《MyBatis技术内幕》"></a><a href="https://union-click.jd.com/jdc?d=7w4cYP" target="_blank" rel="external">《MyBatis技术内幕》</a></h3><ul>
<li>豆瓣评分：暂无</li>
<li>推荐理由：以MyBatis 3.4为基础，针对MyBatis的架构设计和实现细节进行了详细分析，其中穿插介绍了MyBatis源码中涉及的基础知识、设计模式以及笔者自己在实践中的思考。</li>
<li>作者博客：<a href="https://my.oschina.net/zudajun/blog" target="_blank" rel="external">祖大俊的博客</a></li>
</ul>
<h3 id="《有效的单元测试》"><a href="#《有效的单元测试》" class="headerlink" title="《有效的单元测试》"></a><a href="https://union-click.jd.com/jdc?d=3kDmSB" target="_blank" rel="external">《有效的单元测试》</a></h3><ul>
<li>豆瓣评分：7.4 【18 人评价】</li>
<li>推荐理由：Java 单元测试入门。</li>
</ul>
<h3 id="《Java并发编程实战》"><a href="#《Java并发编程实战》" class="headerlink" title="《Java并发编程实战》"></a><a href="https://union-click.jd.com/jdc?d=x2yrwq" target="_blank" rel="external">《Java并发编程实战》</a></h3><ul>
<li>豆瓣评分：9.0 【651 人评价】</li>
<li>推荐理由：本书深入浅出地介绍了Java线程和并发，是一本完美的Java并发参考手册。</li>
<li>推荐博客：<a href="http://ifeve.com/" target="_blank" rel="external">并发编程网</a></li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=ifeves" target="_blank" rel="external">并发编程网</a></li>
</ul>
<h3 id="《Netty实战》"><a href="#《Netty实战》" class="headerlink" title="《Netty实战》"></a><a href="https://union-click.jd.com/jdc?d=RakFcl" target="_blank" rel="external">《Netty实战》</a></h3><ul>
<li>豆瓣评分：7.5【24 人评价】</li>
<li>豆瓣评分：8.1【83 人评价】 《Netty in Action》英文版</li>
<li>推荐理由：Netty之父”Trustin Lee作序推荐。</li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=NettyZone" target="_blank" rel="external">Netty之家</a></li>
</ul>
<h3 id="《深入剖析Tomcat》"><a href="#《深入剖析Tomcat》" class="headerlink" title="《深入剖析Tomcat》"></a><a href="https://union-click.jd.com/jdc?d=Tdk85n" target="_blank" rel="external">《深入剖析Tomcat》</a></h3><ul>
<li>豆瓣评分：8.3【118 人评价】</li>
<li>豆瓣评分：8.9【73 人评价】 《How Tomcat Works》英文版</li>
<li>推荐理由：本书深入剖析Tomcat 4和Tomcat 5中的每个组件，并揭示其内部工作原理。通过学习本书，你将可以自行开发Tomcat组件，或者扩展已有的组件。</li>
</ul>
<h3 id="《Nginx-中文官方文档》"><a href="#《Nginx-中文官方文档》" class="headerlink" title="《Nginx 中文官方文档》"></a><a href="https://wizardforcel.gitbooks.io/nginx-doc/content/" target="_blank" rel="external">《Nginx 中文官方文档》</a></h3><ul>
<li>豆瓣评分：暂无</li>
<li>推荐理由：暂时未找到大家评价不错的 Nginx 实战相关书籍，先推荐看中文翻译的官方文档。如果你有合适的推荐，烦请告诉我。</li>
</ul>
<h3 id="《深入理解Nginx》"><a href="#《深入理解Nginx》" class="headerlink" title="《深入理解Nginx》"></a><a href="https://union-click.jd.com/jdc?d=19KLxr" target="_blank" rel="external">《深入理解Nginx》</a></h3><ul>
<li>豆瓣评分：8.5【138 人评价】</li>
<li>推荐理由：书中首先通过介绍官方Nginx的基本用法和配置规则，帮助读者了解一般Nginx模块的用法，然后重点介绍了如何开发HTTP模块(含HTTP过滤模块)来得到定制化的Nginx，其中包括开发—个功能复杂的模块所需要了解的各种知识，并对内存池的实现细节及TCP协议进行了详细介绍；接着，综合Nginx框架代码分析了Nginx架构的设计理念和技巧，此外，还新增了如何在模块中支持HTTP变量，以及与slab共享内存等相关的内容，相信通过完善，可进一步帮助读者更好地开发出功能丰富、性能—流的Nginx模块。</li>
<li>友情提示：相对适用于 Nginx 开发者。Nginx 使用者可以了解。</li>
</ul>
<h3 id="《深入理解Java虚拟机：JVM高级特性与最佳实践》"><a href="#《深入理解Java虚拟机：JVM高级特性与最佳实践》" class="headerlink" title="《深入理解Java虚拟机：JVM高级特性与最佳实践》"></a><a href="https://union-click.jd.com/jdc?d=Wa6dWb" target="_blank" rel="external">《深入理解Java虚拟机：JVM高级特性与最佳实践》</a></h3><ul>
<li>豆瓣评分：8.9 【657 人评价】</li>
<li>推荐理由：不去了解 JVM 的工程师，和咸鱼有什么区别？</li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=lovestblog" target="_blank" rel="external">你假笨</a></li>
<li>推荐博客：<a href="http://lovestblog.cn/" target="_blank" rel="external">你假笨@JVM</a></li>
<li>推荐小程序：<a href="#">JVMPocket</a></li>
</ul>
<h3 id="《Java核心技术系列：Java虚拟机规范（Java-SE-8版）》"><a href="#《Java核心技术系列：Java虚拟机规范（Java-SE-8版）》" class="headerlink" title="《Java核心技术系列：Java虚拟机规范（Java SE 8版）》"></a><a href="https://union-click.jd.com/jdc?d=KNY6De" target="_blank" rel="external">《Java核心技术系列：Java虚拟机规范（Java SE 8版）》</a></h3><ul>
<li>豆瓣评分：暂无评价</li>
<li>豆瓣评分：8.3 【27 人评价】《Java虚拟机规范(Java SE 7版)》</li>
<li>推荐理由：基于Java SE 8,Oracle官方发布，Java虚拟机技术创建人撰写，国内Java技术专家翻译，是深度了解Java虚拟机和Java语言实现细节的必读之作</li>
<li>推荐博客：<a href="http://www.jianshu.com/u/90ab66c248e6" target="_blank" rel="external">占小狼的简书</a></li>
<li>推荐公众号：<a href="http://upload-images.jianshu.io/upload_images/2184951-2079ac376dbc9c0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" target="_blank" rel="external">占小狼的博客</a></li>
</ul>
<h3 id="《Go语言编程》"><a href="#《Go语言编程》" class="headerlink" title="《Go语言编程》"></a><a href="https://union-click.jd.com/jdc?d=xPOncj" target="_blank" rel="external">《Go语言编程》</a></h3><ul>
<li>豆瓣评分：7.1 【444 人评价】</li>
<li>推荐理由：这本书从整体的写作风格来说，会以介绍 Go 语言特性为主，示例则尽量采用作者平常的实践，而不是一个没有太大实际意义的语法示范样例。</li>
<li>友情提示：本书作者背景极强，许式伟为原金山WPS首席架构师、曾是盛大创新院研究员，目前是国内Go语言实践圈子公认的Go语言专家。</li>
</ul>
<h3 id="《-Go语言学习笔记》"><a href="#《-Go语言学习笔记》" class="headerlink" title="《 Go语言学习笔记》"></a><a href="https://union-click.jd.com/jdc?d=gj1Lqm" target="_blank" rel="external">《 Go语言学习笔记》</a></h3><ul>
<li>豆瓣评分：8.4 【57 人评价】</li>
<li>推荐理由：基于Go1.6， 解析语言规范，深入剖析Go运行时源码</li>
<li>友情提示：雨痕大大，教科书级人物。</li>
</ul>
<h3 id="《MySQL技术内幕——InnoDB存储引擎》"><a href="#《MySQL技术内幕——InnoDB存储引擎》" class="headerlink" title="《MySQL技术内幕——InnoDB存储引擎》"></a><a href="https://union-click.jd.com/jdc?d=937kJ8" target="_blank" rel="external">《MySQL技术内幕——InnoDB存储引擎》</a></h3><ul>
<li>豆瓣评分：8.6 【104 人评价】</li>
<li>推荐理由：从源代码的角度深度解析了InnoDB的体系结构、实现原理、工作机制，并给出了大量最佳实践，能帮助你系统而深入地掌握InnoDB，更重要的是，它能为你设计管理高性能、高可用的数据库系统提供绝佳的指导。</li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=dbaplus" target="_blank" rel="external">DBAplus社群</a></li>
</ul>
<h3 id="《高性能MySQL》"><a href="#《高性能MySQL》" class="headerlink" title="《高性能MySQL》"></a><a href="https://union-click.jd.com/jdc?d=6UXfwU" target="_blank" rel="external">《高性能MySQL》</a></h3><ul>
<li>豆瓣评分：9.3 【245 人评价】</li>
<li>推荐理由：对于想要了解MySQL性能提升的人来说，这是一本不可多得的书。书中没有各种提升性能的秘籍，而是深入问题的核心，详细的解释了每种提升性能的原理，从而可以使你四两拨千斤。授之于鱼不如授之于渔，这本书做到了。</li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=iMYSQL_WX" target="_blank" rel="external">老叶茶馆</a></li>
</ul>
<h3 id="《高可用MySQL》"><a href="#《高可用MySQL》" class="headerlink" title="《高可用MySQL》"></a><a href="https://union-click.jd.com/jdc?d=0s7OAw" target="_blank" rel="external">《高可用MySQL》</a></h3><ul>
<li>豆瓣评分：8.0 【87 人评价】</li>
<li>推荐理由：《高性能MySQL》的姊妹篇。</li>
</ul>
<h3 id="《MongoDB权威指南》"><a href="#《MongoDB权威指南》" class="headerlink" title="《MongoDB权威指南》"></a><a href="https://union-click.jd.com/jdc?d=GhWvaV" target="_blank" rel="external">《MongoDB权威指南》</a></h3><ul>
<li>豆瓣评分：8.0 【69 人评价】</li>
<li>推荐理由：算是普通的参考书了，没有特别有深度的讲解。其实就是一本正常的介绍mongoDB是怎么用的，也可以作为nosql学习的入门。作为指南书，还是很合格的符合期望。</li>
<li>推荐博客：<a href="http://mongoing.com/" target="_blank" rel="external">MongoDB 中文社区</a></li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=mongoing-com" target="_blank" rel="external">MongoDB 中文社区</a></li>
</ul>
<h3 id="《Redis开发与运维》"><a href="#《Redis开发与运维》" class="headerlink" title="《Redis开发与运维》"></a><a href="https://union-click.jd.com/jdc?d=WxbcW3" target="_blank" rel="external">《Redis开发与运维》</a></h3><ul>
<li>豆瓣评分：8.8 【41 人评价】</li>
<li>推荐理由：从开发、运维两个角度总结了Redis实战经验，深入浅出地剖析底层实现，包含大规模集群开发与运维的实际案例、应用技巧。全面覆盖Redis 基本功能及应用，图示丰富，讲解细腻。</li>
<li>推荐博客：<a href="http://redis.cn/" target="_blank" rel="external">Redis 中国用户组</a></li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=rediscn" target="_blank" rel="external">CRUG</a></li>
</ul>
<h3 id="《Redis设计与实现》"><a href="#《Redis设计与实现》" class="headerlink" title="《Redis设计与实现》"></a><a href="https://union-click.jd.com/jdc?d=6L6sMX" target="_blank" rel="external">《Redis设计与实现》</a></h3><ul>
<li>豆瓣评分：8.5 【427 人评价】</li>
<li>推荐理由：系统而全面地描述了 Redis 内部运行机制。图示丰富，描述清晰，并给出大量参考信息，是NoSQL数据库开发人员案头必备。</li>
</ul>
<h3 id="《NoSQL精粹》"><a href="#《NoSQL精粹》" class="headerlink" title="《NoSQL精粹》"></a><a href="https://union-click.jd.com/jdc?d=WO5Qg1" target="_blank" rel="external">《NoSQL精粹》</a></h3><ul>
<li>豆瓣评分：8.2 【226 人评价】</li>
<li>推荐理由：书中全方位比较了关系型数据库与NoSQL数据库的异同；分别以Riak、MongoDB、Cassandra和Neo4J为代表，详细讲解了键值数据库、文档数据库、列族数据库和图数据库这4大类NoSQL数据库的优劣势、用法和适用场合；深入探讨了实现NoSQL数据库系统的各种细节，以及与关系型数据库的混用。</li>
</ul>
<h3 id="《ElasticSearch-可扩展的开源弹性搜索解决方案》"><a href="#《ElasticSearch-可扩展的开源弹性搜索解决方案》" class="headerlink" title="《ElasticSearch 可扩展的开源弹性搜索解决方案》"></a><del><a href="https://union-click.jd.com/jdc?d=4nHLvq" target="_blank" rel="external">《ElasticSearch 可扩展的开源弹性搜索解决方案》</a></del></h3><ul>
<li><del>豆瓣评分：7.3 【23 人评价】</del></li>
<li><del>推荐理由：基于ElasticSearch 的0.2 版本，覆盖了ElasticSearch 各种功能和命令的应用，全面、详细地介绍了开源、分布式、RESTful，具有全文检索功能的搜索引擎ElasticSearch。</del></li>
<li>友情提示：本书 ElasticSearch 比较旧，不忍推荐。仅适合入门，有其他合适的 ElasticSearch 书籍，烦请告诉我。<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="external">《Elasticsearch权威指南》中文版</a>，目前正在翻译中。</li>
<li>推荐博客：<a href="https://elasticsearch.cn/" target="_blank" rel="external">Elastic 中文社区</a></li>
</ul>
<h3 id="《ELK-Stack权威指南》"><a href="#《ELK-Stack权威指南》" class="headerlink" title="《ELK Stack权威指南》"></a><a href="https://union-click.jd.com/jdc?d=yVxIYm" target="_blank" rel="external">《ELK Stack权威指南》</a></h3><ul>
<li>豆瓣评分：7.0 【10 人评价】</li>
<li>推荐理由：ELK stack是以Elasticsearch、Logstash、Kibana三个开源软件为主的数据处理工具链，是目前开源界最流行的实时数据分析解决方案，成为实时日志处理领域开源界的第一选择。</li>
</ul>
<h3 id="《ZooKeeper：分布式过程协同技术详解》"><a href="#《ZooKeeper：分布式过程协同技术详解》" class="headerlink" title="《ZooKeeper：分布式过程协同技术详解》"></a><a href="https://union-click.jd.com/jdc?d=zdXtEg" target="_blank" rel="external">《ZooKeeper：分布式过程协同技术详解》</a></h3><ul>
<li>豆瓣评分：7.6 【49 人评价】</li>
<li>推荐理由：Zookeeper 入门</li>
<li>友情提示：翻译可能略显尴尬。</li>
</ul>
<h3 id="《从Paxos到Zookeeper分布式一致性原理与实践》"><a href="#《从Paxos到Zookeeper分布式一致性原理与实践》" class="headerlink" title="《从Paxos到Zookeeper分布式一致性原理与实践》"></a><a href="https://union-click.jd.com/jdc?d=YxOiGe" target="_blank" rel="external">《从Paxos到Zookeeper分布式一致性原理与实践》</a></h3><ul>
<li>豆瓣评分：8.1 【187 人评价】</li>
<li>推荐理由：从分布式一致性的理论出发，向读者简要介绍几种典型的分布式一致性协议，以及解决分布式一致性问题的思路，其中重点讲解了Paxos和ZAB协议。同时，本书深入介绍了分布式一致性问题的工业解决方案——ZooKeeper，并着重向读者展示这一分布式协调框架的使用方法、内部实现及运维技巧，旨在帮助读者全面了解ZooKeeper，并更好地使用和运维ZooKeeper。</li>
</ul>
<h3 id="《RabbitMQ实战：高效部署分布式消息队列》"><a href="#《RabbitMQ实战：高效部署分布式消息队列》" class="headerlink" title="《RabbitMQ实战：高效部署分布式消息队列》"></a><a href="https://union-click.jd.com/jdc?d=WaEQue" target="_blank" rel="external">《RabbitMQ实战：高效部署分布式消息队列》</a></h3><ul>
<li>豆瓣评分：6.9 【47 人评价】</li>
<li>推荐理由：本书对RabbitMQ做了全面、翔实的讲解，体现了两位专家的真知灼见。本书首先介绍了有关MQ的历史，然后从基本的消息通信原理讲起，带领读者一路探索RabbitMQ的消息通信世界。</li>
<li>友情提示：本书 RabbitMQ 版本较旧。消息队列中间件 RabbitMQ、ActiveMQ、RocketMQ、Kafka 可以选择了解一下。</li>
</ul>
<h3 id="《Apache-Kafka源码剖析》"><a href="#《Apache-Kafka源码剖析》" class="headerlink" title="《Apache Kafka源码剖析》"></a><a href="https://union-click.jd.com/jdc?d=xRfuZy" target="_blank" rel="external">《Apache Kafka源码剖析》</a></h3><ul>
<li>豆瓣评分：7.8 【30 人评价】</li>
<li>推荐理由：以Kafka 0.10.0版本源码为基础，针对Kafka的架构设计到实现细节进行详细阐述。</li>
</ul>
<h3 id="《作业调度系统-Quartz-中文文档》"><a href="#《作业调度系统-Quartz-中文文档》" class="headerlink" title="《作业调度系统 Quartz 中文文档》"></a><a href="https://xuzongbao.gitbooks.io/quartz/content/" target="_blank" rel="external">《作业调度系统 Quartz 中文文档》</a></h3><ul>
<li>豆瓣评分：暂无</li>
<li>推荐理由：暂时未找到大家评价不错的 Quartz 实战相关书籍，先推荐看中文翻译的官方文档。如果你有合适的推荐，烦请告诉我。</li>
<li>友情提示：国内开源项目 Elastic-Job，XXL-Job 都可以选择了解。</li>
</ul>
<h3 id="《微服务设计》"><a href="#《微服务设计》" class="headerlink" title="《微服务设计》"></a><a href="https://union-click.jd.com/jdc?d=0oiQ5c" target="_blank" rel="external">《微服务设计》</a></h3><ul>
<li>豆瓣评分：8.1 【273 人评价】</li>
<li>推荐理由：通过Netflix等多个业界案例，从微服务架构演进到原理剖析，全面讲解建模集成部署等微服务所涉及的各种主题，微服务架构与实践指南。</li>
</ul>
<h3 id="《Spring-Cloud微服务实战》"><a href="#《Spring-Cloud微服务实战》" class="headerlink" title="《Spring Cloud微服务实战》"></a><a href="https://union-click.jd.com/jdc?d=505Twi" target="_blank" rel="external">《Spring Cloud微服务实战》</a></h3><ul>
<li>豆瓣评分：7.9【20 人评价】</li>
<li>推荐理由：从时下流行的微服务架构概念出发，详细介绍了Spring Cloud针对微服务架构中几大核心要素的解决方案和基础组件。对于各个组件的介绍，主要以示例与源码结合的方式来帮助读者更好地理解这些组件的使用方法以及运行原理。同时，在介绍的过程中，还包含了作者在实践中所遇到的一些问题和解决思路，可供读者在实践中作为参考。</li>
<li>作者博客：<a href="http://blog.didispace.com/" target="_blank" rel="external">http://blog.didispace.com/</a></li>
<li>作者公众号：<a href="http://blog.didispace.com/css/images/weixin.jpg" target="_blank" rel="external">didispace</a></li>
</ul>
<h3 id="《亿级流量网站架构核心技术》"><a href="#《亿级流量网站架构核心技术》" class="headerlink" title="《亿级流量网站架构核心技术》"></a><a href="https://union-click.jd.com/jdc?d=pT3LH8" target="_blank" rel="external">《亿级流量网站架构核心技术》</a></h3><ul>
<li>豆瓣评分：7.6【57 人评价】</li>
<li>推荐理由：总结并梳理了亿级流量网站高可用和高并发原则，通过实例详细介绍了如何落地这些原则。本书分为四部分：概述、高可用原则、高并发原则、案例实战。</li>
<li>作者博客：<a href="http://jinnianshilongnian.iteye.com/" target="_blank" rel="external">开涛的博客</a></li>
<li>作者公众号：<a href="http://open.weixin.qq.com/qr/code/?username=kaitao-1234567" target="_blank" rel="external">开涛的博客</a></li>
</ul>
<h3 id="《架构即未来：现代企业可扩展的Web架构、流程和组织》"><a href="#《架构即未来：现代企业可扩展的Web架构、流程和组织》" class="headerlink" title="《架构即未来：现代企业可扩展的Web架构、流程和组织》"></a><a href="https://union-click.jd.com/jdc?d=9gjui2" target="_blank" rel="external">《架构即未来：现代企业可扩展的Web架构、流程和组织》</a></h3><ul>
<li>豆瓣评分：8.7【77 人评价】</li>
<li>推荐理由：任何一个持续成长的公司最终都需要解决系统、组织和流程的扩展性问题。本书汇聚了作者从eBay、VISA、Salesforce.com到Apple超过30年的丰富经验， 全面阐释了经过验证的信息技术扩展方法，对所需要掌握的产品和服务的平滑扩展做了详尽的论述，并在第1版的基础上更新了扩展的策略、技术和案例。</li>
</ul>
<h3 id="《Maven-实战》"><a href="#《Maven-实战》" class="headerlink" title="《Maven 实战》"></a><a href="https://union-click.jd.com/jdc?d=hNj9Lu" target="_blank" rel="external">《Maven 实战》</a></h3><ul>
<li>豆瓣评分：8.1【563 人评价】</li>
<li>推荐理由：国内最权威的Maven专家的力作，唯一一本哦！</li>
</ul>
<h3 id="《Jenkins权威指南》"><a href="#《Jenkins权威指南》" class="headerlink" title="《Jenkins权威指南》"></a><a href="https://union-click.jd.com/jdc?d=75C9Oh" target="_blank" rel="external">《Jenkins权威指南》</a></h3><ul>
<li>豆瓣评分：暂无评分</li>
<li>推荐理由：Jenkins 唯一实体书。</li>
<li>友情提示：内容相对比较旧，大多是过时的案例。建议，快速过一遍。Jenkins 方面无特别好的选择推荐书籍。可以选择 Google 一些教程。</li>
</ul>
<h3 id="《鸟哥的Linux私房菜-（基础学习篇）》"><a href="#《鸟哥的Linux私房菜-（基础学习篇）》" class="headerlink" title="《鸟哥的Linux私房菜 （基础学习篇）》"></a><a href="https://union-click.jd.com/jdc?d=yB7dwu" target="_blank" rel="external">《鸟哥的Linux私房菜 （基础学习篇）》</a></h3><ul>
<li>豆瓣评分：9.1【2269 人评价】</li>
<li>推荐理由：本书是最具知名度的Linux入门书《鸟哥的Linux私房菜基础学习篇》的最新版，全面而详细地介绍了Linux操作系统。</li>
<li>友情提示：内容非常全面，建议挑选和自己实际工作相关度较高的，其他部分有需要再阅读。</li>
</ul>
<h3 id="《鸟哥的Linux私房菜-（服务器架设篇）》"><a href="#《鸟哥的Linux私房菜-（服务器架设篇）》" class="headerlink" title="《鸟哥的Linux私房菜 （服务器架设篇）》"></a><a href="https://union-click.jd.com/jdc?d=TC0EE6" target="_blank" rel="external">《鸟哥的Linux私房菜 （服务器架设篇）》</a></h3><ul>
<li>豆瓣评分：8.8 【198 人评价】</li>
<li>推荐理由：您已有Linux基础，想要进一步学习服务器架设？还想了解如何维护与管理您的服务器？本书是您最佳的选择。</li>
</ul>
<h3 id="《Zabbix企业级分布式监控系统》"><a href="#《Zabbix企业级分布式监控系统》" class="headerlink" title="《Zabbix企业级分布式监控系统》"></a><a href="https://union-click.jd.com/jdc?d=WZQenq" target="_blank" rel="external">《Zabbix企业级分布式监控系统》</a></h3><ul>
<li>豆瓣评分：7.6 【39 人评价】</li>
<li>推荐理由：本书从运维（OPS）角度对Zabbix的各项功能进行了详细介绍，以自动化运维视角为出发点，对Zabbix的安装和配置、自动化功能、监控告警、性能调优、Zabbix API、Zabbix协议、RPM安装包定制，结合SaltStack实现自动化配置管理等内容进行了全方位的深入剖析。</li>
</ul>
<h3 id="《第一本Docker书》"><a href="#《第一本Docker书》" class="headerlink" title="《第一本Docker书》"></a><a href="https://union-click.jd.com/jdc?d=W4EYRx" target="_blank" rel="external">《第一本Docker书》</a></h3><ul>
<li>豆瓣评分：8.8 【63 人评价】</li>
<li>推荐理由：本书由Docker公司前服务与支持副总裁James Turnbull编写，是Docker开发指南。本书专注于Docker 1.9及以上版本，指导读者完成Docker的安装、部署、管理和扩展，带领读者经历从测试到生产的整个开发生命周期，让读者了解Docker适用于什么场景。</li>
<li>推荐博客：<a href="http://dockone.io/" target="_blank" rel="external">DockerOne</a></li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=dockerone" target="_blank" rel="external">DockerOne</a></li>
</ul>
<h3 id="《Docker——容器与容器云》"><a href="#《Docker——容器与容器云》" class="headerlink" title="《Docker——容器与容器云》"></a><a href="https://union-click.jd.com/jdc?d=BxWMVi" target="_blank" rel="external">《Docker——容器与容器云》</a></h3><ul>
<li>豆瓣评分：8.5 【99 人评价】</li>
<li>推荐理由：本书根据Docker 1.10版和Kubernetes 1.2版对第1版进行了全面更新，从实践者的角度出发，以Docker和Kubernetes为重点，沿着“基本用法介绍”到“核心原理解读”到“高级实践技巧”的思路，一本书讲透当前主流的容器和容器云技术，有助于读者在实际场景中利用Docker容器和容器云解决问题并启发新的思考。</li>
</ul>
<h3 id="《Kubernetes权威指南》"><a href="#《Kubernetes权威指南》" class="headerlink" title="《Kubernetes权威指南》"></a><a href="https://union-click.jd.com/jdc?d=eGWYXy" target="_blank" rel="external">《Kubernetes权威指南》</a></h3><ul>
<li>豆瓣评分：7.7【15 人评价】</li>
<li>推荐理由：Kubernetes重磅开山之作，针对Kubernetes v1.6和本书第2版进行大篇幅内容更新，全方位完美覆盖，可借鉴性极强。</li>
<li>推荐博客：<a href="https://www.kubernetes.org.cn/" target="_blank" rel="external">Kubernetes 中文社区</a></li>
<li>推荐公众号：<a href="http://open.weixin.qq.com/qr/code/?username=kubernetescn" target="_blank" rel="external">K8S 技术社区</a></li>
</ul>
<h3 id="《用Mesos框架构建分布式应用》"><a href="#《用Mesos框架构建分布式应用》" class="headerlink" title="《用Mesos框架构建分布式应用》"></a><a href="https://union-click.jd.com/jdc?d=OnSepV" target="_blank" rel="external">《用Mesos框架构建分布式应用》</a></h3><ul>
<li>豆瓣评分：暂无评分</li>
<li>推荐理由：超级薄的一本书，看完之后，你会对 Mesos 会非常了解，并且极大可能性学会如何基于 Mesos 框架构建分布式应用。</li>
</ul>
<h3 id="《数据结构与算法分析：Java语言描述》"><a href="#《数据结构与算法分析：Java语言描述》" class="headerlink" title="《数据结构与算法分析：Java语言描述》"></a><a href="https://union-click.jd.com/jdc?d=IOGxFX" target="_blank" rel="external">《数据结构与算法分析：Java语言描述》</a></h3><ul>
<li>豆瓣评分：8.3【183 人评价】</li>
<li>推荐理由：本书是国外数据结构与算法分析方面的经典教材，使用卓越的Java编程语言作为实现工具讨论了数据结构（组织大量数据的方法）和算法分析（对算法运行时间的估计）。</li>
<li>友情提示：算法方法还有其他很好的书籍，例如《算法导论》、《算法（第四版）》，也可以选择阅读。重要的是，保持耐心，享受这个痛并快乐的过程。</li>
</ul>
<h3 id="《Head-First-设计模式》"><a href="#《Head-First-设计模式》" class="headerlink" title="《Head First 设计模式》"></a><a href="https://union-click.jd.com/jdc?d=HYyuyM" target="_blank" rel="external">《Head First 设计模式》</a></h3><ul>
<li>豆瓣评分：9.2【2394 人评价】</li>
<li>推荐理由：《Head First设计模式》(中文版)共有14章，每章都介绍了几个设计模式，完整地涵盖了四人组版本全部23个设计模式。</li>
</ul>
<h3 id="《HTTP权威指南》"><a href="#《HTTP权威指南》" class="headerlink" title="《HTTP权威指南》"></a><a href="https://union-click.jd.com/jdc?d=TgCRBb" target="_blank" rel="external">《HTTP权威指南》</a></h3><ul>
<li>豆瓣评分：8.7 【1126 人评价】</li>
<li>推荐理由：本书尝试着将HTTP中一些互相关联且常被误解的规则梳理清楚，并编写了一系列基于各种主题的章节，对HTTP各方面的特性进行了介绍。纵观全书，对HTTP“为什么”这样做进行了详细的解释，而不仅仅停留在它是“怎么做”的。</li>
</ul>
<h3 id="《TCP-IP详解-系列》"><a href="#《TCP-IP详解-系列》" class="headerlink" title="《TCP/IP详解 系列》"></a><a href="https://union-click.jd.com/jdc?d=5uHlXS" target="_blank" rel="external">《TCP/IP详解 系列》</a></h3><ul>
<li>豆瓣评分：9.3 【1883 人评价】</li>
<li>推荐理由：完整而详细的TCP/IP协议指南。针对任何希望理解TCP/IP协议是如何实现的读者设计。</li>
</ul>
<h3 id="《Linux内核设计与实现》"><a href="#《Linux内核设计与实现》" class="headerlink" title="《Linux内核设计与实现》"></a><a href="https://union-click.jd.com/jdc?d=3VaGzn" target="_blank" rel="external">《Linux内核设计与实现》</a></h3><ul>
<li>豆瓣评分：8.7【286 人评价】</li>
<li>详细描述了Linux内核的主要子系统和特点，包括Linux内核的设计、实现和接口。从理论到实践涵盖了Linux内核的方方面面，可以满足读者的各种兴趣和需求。</li>
<li>友情提示：Linux内核方面不乏好书。本书篇幅方面较为合适。</li>
</ul>
<h3 id="《剑指Offer：名企面试官精讲典型编程题》"><a href="#《剑指Offer：名企面试官精讲典型编程题》" class="headerlink" title="《剑指Offer：名企面试官精讲典型编程题》"></a><a href="https://union-click.jd.com/jdc?d=wnrKQh" target="_blank" rel="external">《剑指Offer：名企面试官精讲典型编程题》</a></h3><ul>
<li>豆瓣评分：8.5【508 人评价】</li>
<li>推荐理由：剖析了80个典型的编程面试题，系统整理基础知识、代码质量、解题思路、优化效率和综合能力这5个面试要点。</li>
<li>推荐网站：<a href="https://www.nowcoder.com/" target="_blank" rel="external">牛客网-专业IT笔试面试备考平台</a></li>
</ul>
<h3 id="《程序员代码面试指南：IT名企算法与数据结构题目最优解》"><a href="#《程序员代码面试指南：IT名企算法与数据结构题目最优解》" class="headerlink" title="《程序员代码面试指南：IT名企算法与数据结构题目最优解》"></a><a href="https://union-click.jd.com/jdc?d=1ums6L" target="_blank" rel="external">《程序员代码面试指南：IT名企算法与数据结构题目最优解》</a></h3><ul>
<li>豆瓣评分：8.4【32 人评价】</li>
<li>推荐理由：程序员刷题宝典！编程能力提升秘笈！精选IT名企真实代码面试题，全面覆盖算法与数据结构题型！</li>
</ul>
<h3 id="《领域驱动设计》"><a href="#《领域驱动设计》" class="headerlink" title="《领域驱动设计》"></a><a href="https://union-click.jd.com/jdc?d=O7IEOX" target="_blank" rel="external">《领域驱动设计》</a></h3><ul>
<li>豆瓣评分：9.0【115 人评价】</li>
<li>推荐理由：是领域驱动设计方面的经典之作。全书围绕着设计和开发实践，结合若干真实的项目案例，向读者阐述如何在真实的软件开发中应用领域驱动设计。</li>
<li>友情提示：理论的书籍往往较为枯燥，勤修内功是必须走的路。</li>
</ul>
<h3 id="《火球-UML大战需求分析》"><a href="#《火球-UML大战需求分析》" class="headerlink" title="《火球:UML大战需求分析》"></a><a href="https://union-click.jd.com/jdc?d=5EDRst" target="_blank" rel="external">《火球:UML大战需求分析》</a></h3><ul>
<li>豆瓣评分：7.9【115 人评价】</li>
<li>推荐理由：融合UML、非UML、需求分析及需求管理等各方面的知识，帮助读者解决UML业界问题、需求分析及需求管理问题。</li>
<li>友情提示：可能不是最好的 UML 书籍，但从是否能够阅读理解完的角度来说，本书可能是相对合适的。有兴趣的同学也可以看看《UML和模式应用》、《大象：Thinking in UML》。</li>
</ul>
<h2 id="TODO-List"><a href="#TODO-List" class="headerlink" title="TODO List"></a>TODO List</h2><p>待推荐主题书籍</p>
<p>TODO 《大数据日知录 架构与算法》<br>TODO 《大型网站系统与Java中间件实践》<br>TODO 《HotSpot实战》<br>TODO 《垃圾回收的算法与实现》<br>TODO 《彩色UML建模》<br>TODO 《七周七并发模型》<br>TODO 《Go程序设计语言》</p>
<ul>
<li>[x] Go</li>
<li>[ ] Node</li>
<li>[x] Linux 内核</li>
<li>[x] 领域</li>
<li>[x] UML</li>
<li>[x] Tomcat</li>
<li>[x] SpringCloud</li>
<li>[x] Java 基础</li>
<li>[x] Netty</li>
<li>[x] MyBatis</li>
<li>[x] 数据库</li>
<li>[x] MongoDB</li>
<li>[x] Maven</li>
<li>[x] DevOps</li>
<li>[x] Linux 运维</li>
<li>[x] 面试</li>
<li>[x] 消息队列</li>
<li>[x] 设计模式</li>
<li>[x] 算法与数据结构</li>
<li>[x] Zookeeper</li>
<li>[x] SpringBoot</li>
<li>[x] Nginx</li>
<li>[x] 定时任务</li>
<li>[x] 搜索引擎</li>
<li>[x] 协议</li>
<li>[x] 单元测试</li>
<li>[x] 重构</li>
<li>[x] 日志</li>
<li>[x] Docker</li>
<li>[x] 监控</li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>原文出处 <a href="http://www.iocoder.cn/Architecture/books-recommended/" target="_blank" rel="external">http://www.iocoder.cn/Architecture/books-recommended/</a> 「芋道源码」欢迎转载，保留摘要，谢谢！</p>
<hr>
<p><img src="http://www.iocoder.cn/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注<strong>微信公众号：【芋道源码】</strong>有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1510377299466&amp;amp;di=46ef1567d27dca27fcfe2970924e2c28&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fwww.redsh.com%2Fimg2017%2F1710251213522.jpeg&quot; alt=&quot;&quot;&gt;&lt;br&gt;昨晚和朋友聊天说双十一都买啥，结果 TMD 竟然都是书籍，不愧是标准的程序猿。所以这里想推荐基佬的一份书单，方便大家在双十一剁剁剁，建议先收藏本书单，认真啃完一本再买下一本，扎实走完每一步，希望书单能在你想要进一步打怪升级的路上，给予些许帮助！&lt;br&gt;
    
    </summary>
    
    
      <category term="书籍" scheme="http://yoursite.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>小白谈数据脱敏</title>
    <link href="http://yoursite.com/2017/10/28/Data-Desensitization/"/>
    <id>http://yoursite.com/2017/10/28/Data-Desensitization/</id>
    <published>2017-10-28T07:46:00.673Z</published>
    <updated>2017-11-02T17:26:37.611Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/cb9.jpg-1" alt=""></p>
<h3 id="什么是数据脱敏？"><a href="#什么是数据脱敏？" class="headerlink" title="什么是数据脱敏？"></a>什么是数据脱敏？</h3><p>百度百科是这样描述的：<br><a id="more"></a></p>
<blockquote>
<p>数据脱敏是指对某些敏感信息通过脱敏规则进行数据的变形，实现敏感隐私数据的可靠保护。在涉及客户安全数据或者一些商业性敏感数据的情况下，在不违反系统规则条件下，对真实数据进行改造并提供测试使用，如身份证号、手机号、卡号、客户姓名、客户地址、等个人敏感信息都需要通过脱敏规则进行数据的变形，实现敏感隐私数据的可靠保护。这样就可以在开发、测试和其他非生产环境以及外包环境中可以安全的使用脱敏后的真实数据集。</p>
</blockquote>
<h3 id="生活中的常见例子"><a href="#生活中的常见例子" class="headerlink" title="生活中的常见例子"></a>生活中的常见例子</h3><p>1、火车票：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/ticket1.jpg-1" alt=""></p>
<p>2、淘宝网页上的收获地址信息：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/ticket2.jpg-1" alt=""></p>
<h3 id="敏感数据梳理"><a href="#敏感数据梳理" class="headerlink" title="敏感数据梳理"></a>敏感数据梳理</h3><p>在进行数据脱敏之前我们应该要确定公司的哪些数据（哪些表、哪些字段）要作为脱敏的目标，下面从用户、公司、卖家方面分析：</p>
<p>1、用户：名字、手机号码、身份证号码、固定电话、收货地址、电子邮箱、银行卡号、密码等</p>
<p>2、卖家：名字、手机号码、身份证号码、固定电话等</p>
<p>3、公司：交易金额、优惠券码、充值码等</p>
<h3 id="确定脱敏规则"><a href="#确定脱敏规则" class="headerlink" title="确定脱敏规则"></a>确定脱敏规则</h3><p>确定好了公司的哪些数据要作为脱敏目标后，我们就需要制定脱敏的规则（具体的实施方法）。</p>
<p>常见方法：</p>
<p>1、替换：如统一将女性用户名替换为F，这种方法更像“障眼法”，对内部人员可以完全保持信息完整性，但易破解。</p>
<p>2、重排：序号12345 重排为 54321，按照一定的顺序进行打乱，很像“替换”， 可以在需要时方便还原信息，但同样易破解。</p>
<p>3、加密：编号 12345 加密为 23456，安全程度取决于采用哪种加密算法，一般根据实际情况而定。</p>
<p>4、截断：13811001111 截断为 138，舍弃必要信息来保证数据的模糊性，是比较常用的脱敏方法，但往往对生产不够友好。（丢失字段的长度）</p>
<p>5、掩码: 123456 -&gt; 1xxxx6，保留了部分信息，并且保证了信息的长度不变性，对信息持有者更易辨别， 如火车票上得身份信息。（常用方法）</p>
<p>6、日期偏移取整：20130520 12:30:45 -&gt; 20130520 12:00:00，舍弃精度来保证原始数据的安全性，一般此种方法可以保护数据的时间分布密度。</p>
<p>目前我的脱敏规则想法是：</p>
<p>1、【中文姓名】只显示第一个汉字，其他隐藏为2个星号，比如：<code>李**</code></p>
<p>2、【身份证号】显示最后四位，其他隐藏。共计18位或者15位，比如：<code>*************1234</code></p>
<p>3、【固定电话】 显示后四位，其他隐藏，比如：<code>*******3241</code></p>
<p>4、【手机号码】前三位，后四位，其他隐藏，比如：<code>135****6810</code></p>
<p>5、【地址】只显示到地区，不显示详细地址，比如：<code>上海徐汇区漕河泾开发区***</code></p>
<p>6、【电子邮箱】 邮箱前缀仅显示第一个字母，前缀其他隐藏，用星号代替，@及后面的地址显示，比如：<code>d**@126.com</code></p>
<p>7、【银行卡号】前六位，后四位，其他用星号隐藏每位1个星号，比如：<code>6222600**********1234</code></p>
<p>8、【密码】密码的全部字符都用<em>代替，比如：<strong><strong><em>*</em></strong></strong></em></p>
<p>根据以上规则进行数据脱敏！</p>
<p>具体思路目前是这样的：</p>
<p>从原数据源查询到的生产数据 ——&gt; 数据脱敏 ——&gt; 更新到目标数据源。</p>
<p>原数据源、目标数据源、需要脱敏的表、字段等都放在配置文件中，做到可扩展性！</p>
<h3 id="脱敏工具代码"><a href="#脱敏工具代码" class="headerlink" title="脱敏工具代码"></a>脱敏工具代码</h3><p>根据以上规则已经写好了一份简单的脱敏规则工具类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 数据脱敏工具类</div><div class="line"> * Created by zhisheng_tian on 2017/10/25.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DesensitizedUtils</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 【中文姓名】只显示第一个汉字，其他隐藏为2个星号，比如：李**</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> fullName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">chineseName</span><span class="params">(String fullName)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (StringUtils.isBlank(fullName)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">        String name = StringUtils.left(fullName, <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> StringUtils.rightPad(name, StringUtils.length(fullName), <span class="string">"*"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 【身份证号】显示最后四位，其他隐藏。共计18位或者15位，比如：*************1234</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">idCardNum</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (StringUtils.isBlank(id)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">        String num = StringUtils.right(id, <span class="number">4</span>);</div><div class="line">        <span class="keyword">return</span> StringUtils.leftPad(num, StringUtils.length(id), <span class="string">"*"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 【固定电话】 显示后四位，其他隐藏，比如：*******3241</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> num</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">fixedPhone</span><span class="params">(String num)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (StringUtils.isBlank(num)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> StringUtils.leftPad(StringUtils.right(num, <span class="number">4</span>), StringUtils.length(num), <span class="string">"*"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 【手机号码】前三位，后四位，其他隐藏，比如：135****6810</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> num</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">mobilePhone</span><span class="params">(String num)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (StringUtils.isBlank(num)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> StringUtils.left(num, <span class="number">3</span>).concat(StringUtils.removeStart(StringUtils.leftPad(StringUtils.right(num, <span class="number">4</span>), StringUtils.length(num), <span class="string">"*"</span>), <span class="string">"***"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 【地址】只显示到地区，不显示详细地址，比如：上海徐汇区漕河泾开发区***</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> address</div><div class="line">     * <span class="doctag">@param</span> sensitiveSize 敏感信息长度</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">address</span><span class="params">(String address, <span class="keyword">int</span> sensitiveSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (StringUtils.isBlank(address)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> length = StringUtils.length(address);</div><div class="line">        <span class="keyword">return</span> StringUtils.rightPad(StringUtils.left(address, length - sensitiveSize), length, <span class="string">"*"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 【电子邮箱】 邮箱前缀仅显示第一个字母，前缀其他隐藏，用星号代替，@及后面的地址显示，比如：d**@126.com</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> email</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">email</span><span class="params">(String email)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (StringUtils.isBlank(email)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> index = StringUtils.indexOf(email, <span class="string">"@"</span>);</div><div class="line">        <span class="keyword">if</span> (index &lt;= <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> email;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> StringUtils.rightPad(StringUtils.left(email, <span class="number">1</span>), index, <span class="string">"*"</span>).concat(StringUtils.mid(email, index, StringUtils.length(email)));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 【银行卡号】前六位，后四位，其他用星号隐藏每位1个星号，比如：6222600**********1234</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> cardNum</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">bankCard</span><span class="params">(String cardNum)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (StringUtils.isBlank(cardNum)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> StringUtils.left(cardNum, <span class="number">6</span>).concat(StringUtils.removeStart(StringUtils.leftPad(StringUtils.right(cardNum, <span class="number">4</span>), StringUtils.length(cardNum), <span class="string">"*"</span>), <span class="string">"******"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 【密码】密码的全部字符都用*代替，比如：******</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> password</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">password</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (StringUtils.isBlank(password)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">        String pwd = StringUtils.left(password, <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> StringUtils.rightPad(pwd, StringUtils.length(password), <span class="string">"*"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>转载请注明地址：<a href="http://www.54tianzhisheng.cn/2017/10/28/Data-Desensitization/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/10/28/Data-Desensitization/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/cb9.jpg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是数据脱敏？&quot;&gt;&lt;a href=&quot;#什么是数据脱敏？&quot; class=&quot;headerlink&quot; title=&quot;什么是数据脱敏？&quot;&gt;&lt;/a&gt;什么是数据脱敏？&lt;/h3&gt;&lt;p&gt;百度百科是这样描述的：&lt;br&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>HBase 集群监控</title>
    <link href="http://yoursite.com/2017/10/21/HBase-metrics/"/>
    <id>http://yoursite.com/2017/10/21/HBase-metrics/</id>
    <published>2017-10-21T06:49:14.105Z</published>
    <updated>2017-10-21T06:53:05.630Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/cb8.jpg-1" alt=""></p>
<h3 id="为什么需要监控？"><a href="#为什么需要监控？" class="headerlink" title="为什么需要监控？"></a>为什么需要监控？</h3><p>为了保证系统的稳定性，可靠性，可运维性。<br><a id="more"></a></p>
<ol>
<li>掌控集群的核心性能指标，了解集群的性能表现。</li>
<li>集群出现问题时及时报警，便于运维同学及时修复问题。</li>
<li>集群重要指标值异常时进行预警，将问题扼杀在摇篮中，不用等集群真正不可用时才采取行动。</li>
<li>当集群出现问题时，监控系统可以帮助我们更快的定位问题和解决问题</li>
</ol>
<h3 id="如何构建-HBase-集群监控系统？"><a href="#如何构建-HBase-集群监控系统？" class="headerlink" title="如何构建 HBase 集群监控系统？"></a>如何构建 HBase 集群监控系统？</h3><p>公司有自己的监控系统，我们所要做的就是将 HBase 中我们关心的指标项发送到监控系统去，问题就转换为我们开发，采集并返回哪些 HBase 集群监控指标项。</p>
<h3 id="HBase-集群监控指标"><a href="#HBase-集群监控指标" class="headerlink" title="HBase 集群监控指标"></a>HBase 集群监控指标</h3><p>采集的监控数据主要包括以下几个方面：某台机器 OS 层面上的数据，例如 CPU、内存、磁盘、网络、load、网络流量等；某台 regionserver（或master）机器 jvm 的状态，例如关于线程的信息，GC 的次数和时间，内存使用状况，以及 ERROR、WARN、Fatal 事件出现的次数；regionserver（或 master）进程中的统计信息。</p>
<p>可以通过以下地址获取 HBase 提供的 JMX 信息的 web 页面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://your_master:60010/jmx  //所有的bean</div></pre></td></tr></table></figure>
<p>JMX web 页面的数据格式是<code>json</code>格式，信息很多！</p>
<h4 id="OS-监控数据"><a href="#OS-监控数据" class="headerlink" title="OS 监控数据"></a>OS 监控数据</h4><p>HBase 中对于 OS 的监控数据，主要是 OperatingSystem 的对象来进行的，如下就是我提取出来的 JSON 信息，</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span> : <span class="string">"java.lang:type=OperatingSystem"</span>,</div><div class="line">    <span class="attr">"modelerType"</span> : <span class="string">"com.sun.management.UnixOperatingSystem"</span>,</div><div class="line">    <span class="attr">"MaxFileDescriptorCount"</span> : <span class="number">1000000</span>,</div><div class="line">    <span class="attr">"OpenFileDescriptorCount"</span> : <span class="number">413</span>,</div><div class="line">    <span class="attr">"CommittedVirtualMemorySize"</span> : <span class="number">1892225024</span>,</div><div class="line">    <span class="attr">"FreePhysicalMemorySize"</span> : <span class="number">284946432</span>,</div><div class="line">    <span class="attr">"FreeSwapSpaceSize"</span> : <span class="number">535703552</span>,</div><div class="line">    <span class="attr">"ProcessCpuLoad"</span> : <span class="number">0.0016732901066722444</span>,</div><div class="line">    <span class="attr">"ProcessCpuTime"</span> : <span class="number">59306210000000</span>,</div><div class="line">    <span class="attr">"SystemCpuLoad"</span> : <span class="number">0.018197029910060655</span>,</div><div class="line">    <span class="attr">"TotalPhysicalMemorySize"</span> : <span class="number">16660848640</span>,</div><div class="line">    <span class="attr">"TotalSwapSpaceSize"</span> : <span class="number">536862720</span>,</div><div class="line">    <span class="attr">"AvailableProcessors"</span> : <span class="number">8</span>,</div><div class="line">    <span class="attr">"Arch"</span> : <span class="string">"amd64"</span>,</div><div class="line">    <span class="attr">"SystemLoadAverage"</span> : <span class="number">0.0</span>,</div><div class="line">    <span class="attr">"Name"</span> : <span class="string">"Linux"</span>,</div><div class="line">    <span class="attr">"Version"</span> : <span class="string">"2.6.32-431.11.7.el6.ucloud.x86_64"</span>,</div><div class="line">    <span class="attr">"ObjectName"</span> : <span class="string">"java.lang:type=OperatingSystem"</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>其中比较重要的指标有 <code>OpenFileDescriptorCount</code> ,  <code>FreePhysicalMemorySize</code> ,  <code>ProcessCpuLoad</code> , <code>SystemCpuLoad</code> ,  <code>AvailableProcessors</code> ,  <code>SystemLoadAverage</code></p>
<h4 id="JVM-监控数据"><a href="#JVM-监控数据" class="headerlink" title="JVM 监控数据"></a>JVM 监控数据</h4><p>Hbase 中对于 JVM 的监控数据，主要是 JvmMetrics 的对象来进行的，如下就是我提取出来的 JSON 信息，</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span> : <span class="string">"Hadoop:service=HBase,name=JvmMetrics"</span>,</div><div class="line">    <span class="attr">"modelerType"</span> : <span class="string">"JvmMetrics"</span>,</div><div class="line">    <span class="attr">"tag.Context"</span> : <span class="string">"jvm"</span>,</div><div class="line">    <span class="attr">"tag.ProcessName"</span> : <span class="string">"Master"</span>,</div><div class="line">    <span class="attr">"tag.SessionId"</span> : <span class="string">""</span>,</div><div class="line">    <span class="attr">"tag.Hostname"</span> : <span class="string">"uhadoop-qrljqo-master2"</span>,</div><div class="line">    <span class="attr">"MemNonHeapUsedM"</span> : <span class="number">53.846107</span>,</div><div class="line">    <span class="attr">"MemNonHeapCommittedM"</span> : <span class="number">85.84375</span>,</div><div class="line">    <span class="attr">"MemNonHeapMaxM"</span> : <span class="number">130.0</span>,</div><div class="line">    <span class="attr">"MemHeapUsedM"</span> : <span class="number">79.05823</span>,</div><div class="line">    <span class="attr">"MemHeapCommittedM"</span> : <span class="number">240.125</span>,</div><div class="line">    <span class="attr">"MemHeapMaxM"</span> : <span class="number">989.875</span>,</div><div class="line">    <span class="attr">"MemMaxM"</span> : <span class="number">989.875</span>,</div><div class="line">    <span class="attr">"GcCountParNew"</span> : <span class="number">15190</span>,</div><div class="line">    <span class="attr">"GcTimeMillisParNew"</span> : <span class="number">72300</span>,</div><div class="line">    <span class="attr">"GcCountConcurrentMarkSweep"</span> : <span class="number">2</span>,</div><div class="line">    <span class="attr">"GcTimeMillisConcurrentMarkSweep"</span> : <span class="number">319</span>,</div><div class="line">    <span class="attr">"GcCount"</span> : <span class="number">15192</span>,</div><div class="line">    <span class="attr">"GcTimeMillis"</span> : <span class="number">72619</span>,</div><div class="line">    <span class="attr">"ThreadsNew"</span> : <span class="number">0</span>,</div><div class="line">    <span class="attr">"ThreadsRunnable"</span> : <span class="number">21</span>,</div><div class="line">    <span class="attr">"ThreadsBlocked"</span> : <span class="number">0</span>,</div><div class="line">    <span class="attr">"ThreadsWaiting"</span> : <span class="number">144</span>,</div><div class="line">    <span class="attr">"ThreadsTimedWaiting"</span> : <span class="number">18</span>,</div><div class="line">    <span class="attr">"ThreadsTerminated"</span> : <span class="number">0</span>,</div><div class="line">    <span class="attr">"LogFatal"</span> : <span class="number">0</span>,</div><div class="line">    <span class="attr">"LogError"</span> : <span class="number">0</span>,</div><div class="line">    <span class="attr">"LogWarn"</span> : <span class="number">0</span>,</div><div class="line">    <span class="attr">"LogInfo"</span> : <span class="number">0</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p> JvmMetrics 主要统计的信息包括：内存的使用状态信息；GC的统计信息；线程的统计信息；以及事件的统计信息。</p>
<p>内存的统计信息主要是：JVM 当前已经使用的 NonHeapMemory 的大小、以及配置的 NonHeapMemory 的大小；JVM 当前已经使用的 HeapMemory 的大小、以及配置的 HeapMemory 的大小； JVM 运行时的可以使用的最大的内存的大小。</p>
<p>GC 的统计较为简单，仅统计了进程在固定间隔内 GC 的次数和花费的总时间。</p>
<p>线程的统计，主要是统计进程内当前线程的处于 NEW 、RUNNABLE、BLOCKED、WAITING、TIMED_WAITING、TERMINATED 这六种状态下的线程数量。</p>
<p>对于事件的统计，主要统计固定时间间隔内的 Fatal、Error、Warn 以及 Info 的数量。(这块好像不怎么重要)</p>
<h4 id="Region-Servers-健康"><a href="#Region-Servers-健康" class="headerlink" title="Region Servers 健康"></a>Region Servers 健康</h4><p>你也可以通过如下地址：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://your_master:60010/jmx?qry=Hadoop:service=HBase,name=Master,sub=Server</div></pre></td></tr></table></figure>
<p>获得到 Region Servers 健康值：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span> : <span class="string">"Hadoop:service=HBase,name=Master,sub=Server"</span>,</div><div class="line">    <span class="attr">"modelerType"</span> : <span class="string">"Master,sub=Server"</span>,</div><div class="line">    <span class="attr">"tag.liveRegionServers"</span> : <span class="string">"xxx"</span>,</div><div class="line">    <span class="attr">"tag.deadRegionServers"</span> : <span class="string">""</span>,</div><div class="line">    <span class="attr">"tag.zookeeperQuorum"</span> : <span class="string">"xxx"</span>,</div><div class="line">    <span class="attr">"tag.serverName"</span> : <span class="string">"xxx2,60000,1495683310213"</span>,</div><div class="line">    <span class="attr">"tag.clusterId"</span> : <span class="string">"e5e044a3-ef9f-48f7-ba63-637376f5fa90"</span>,</div><div class="line">    <span class="attr">"tag.isActiveMaster"</span> : <span class="string">"true"</span>,</div><div class="line">    <span class="attr">"tag.Context"</span> : <span class="string">"master"</span>,</div><div class="line">    <span class="attr">"tag.Hostname"</span> : <span class="string">"xxx"</span>,</div><div class="line">    <span class="attr">"masterActiveTime"</span> : <span class="number">1495683312239</span>,</div><div class="line">    <span class="attr">"masterStartTime"</span> : <span class="number">1495683310213</span>,</div><div class="line">    <span class="attr">"averageLoad"</span> : <span class="number">143.66666666666666</span>,</div><div class="line">    <span class="attr">"numRegionServers"</span> : <span class="number">3</span>,</div><div class="line">    <span class="attr">"numDeadRegionServers"</span> : <span class="number">0</span>,</div><div class="line">    <span class="attr">"clusterRequests"</span> : <span class="number">1297834323</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="MemoryPool"><a href="#MemoryPool" class="headerlink" title="MemoryPool"></a>MemoryPool</h4><p>从全部的 JSON 值中你会看到很多种 MemoryPool 值，比如 Par Eden Space 、CMS Perm Gen、Par Survivor Space、CMS Old Gen、Code Cache ，按需获取吧。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>任何一个服务的监控系统都是一个不断迭代，不断优化的过程，不可能一开始就做到最好。监控总是比问题发生来的更早一些，而每一次出问题，又进一步加强相应方面的监控，我们需要让监控系统从出问题时才报警到可能出现问题时就预警逐渐过渡，最终让监控系统成为我们保证系统稳定性的一个有力工具。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>监控指标有很多，但请按需获取 ! 转载文章请注明原出处，谢谢支持！  <a href="http://www.54tianzhisheng.cn/2017/10/21/HBase-metrics/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/10/21/HBase-metrics/</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、<a href="https://www.tuicool.com/articles/zQNrM3" target="_blank" rel="external">hbase性能监控（一）</a></p>
<p>2、<a href="https://www.tuicool.com/articles/YbQbIj" target="_blank" rel="external">hbase性能监控（二）</a></p>
<p>3、<a href="https://www.tuicool.com/articles/imArAb" target="_blank" rel="external">hbase性能监控（三）</a></p>
<p>4、<a href="https://blog.bcmeng.com/post/hbase-monitor.html" target="_blank" rel="external">HBase 集群监控系统构建</a></p>
<p>5、<a href="http://blog.csdn.net/englishsname/article/details/53883682" target="_blank" rel="external">hbase jmx常用监控指标</a></p>
<h3 id="推荐相关文章"><a href="#推荐相关文章" class="headerlink" title="推荐相关文章"></a>推荐相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2017/10/18/ElasticSearch-nodes-metrics/" target="_blank" rel="external">ElasticSearch 单个节点监控</a></p>
<p>2、<a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/" target="_blank" rel="external">ElasticSearch 集群监控</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/cb8.jpg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;为什么需要监控？&quot;&gt;&lt;a href=&quot;#为什么需要监控？&quot; class=&quot;headerlink&quot; title=&quot;为什么需要监控？&quot;&gt;&lt;/a&gt;为什么需要监控？&lt;/h3&gt;&lt;p&gt;为了保证系统的稳定性，可靠性，可运维性。&lt;br&gt;
    
    </summary>
    
    
      <category term="HBase" scheme="http://yoursite.com/tags/HBase/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 单个节点监控</title>
    <link href="http://yoursite.com/2017/10/18/ElasticSearch-nodes-metrics/"/>
    <id>http://yoursite.com/2017/10/18/ElasticSearch-nodes-metrics/</id>
    <published>2017-10-18T07:09:05.837Z</published>
    <updated>2017-10-18T14:50:51.653Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/cb6.jpeg-1" alt=""></p>
<p>集群健康监控是对集群信息进行高度的概括，节点统计值 API 提供了集群中每个节点的统计值。节点统计值很多，在监控的时候仍需要我们清楚哪些指标是最值得关注的。</p>
<p>集群健康监控可以参考这篇文章：<a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/" target="_blank" rel="external">ElasticSearch 集群监控</a><br><a id="more"></a></p>
<h3 id="节点信息-Node-Info"><a href="#节点信息-Node-Info" class="headerlink" title="节点信息   Node Info :"></a>节点信息   Node Info :</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XGET &apos;http://localhost:9200/_nodes&apos;</div></pre></td></tr></table></figure>
<p>执行上述命令可以获取所有 node 的信息</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">_nodes: &#123;</div><div class="line">  total: 2,</div><div class="line">  successful: 2,</div><div class="line">  failed: 0</div><div class="line">&#125;,</div><div class="line">cluster_name: "elasticsearch",</div><div class="line">nodes: &#123;</div><div class="line">	MSQ_CZ7mTNyOSlYIfrvHag: &#123;</div><div class="line">	name: "node0",</div><div class="line">    transport_address: "192.168.180.110:9300",</div><div class="line">    host: "192.168.180.110",</div><div class="line">    ip: "192.168.180.110",</div><div class="line">    version: "5.5.0",</div><div class="line">    build_hash: "260387d",</div><div class="line">    total_indexing_buffer: 103887667,</div><div class="line">    roles:&#123;...&#125;,</div><div class="line">    settings: &#123;...&#125;,</div><div class="line">    os: &#123;</div><div class="line">      refresh_interval_in_millis: 1000,</div><div class="line">      name: "Linux",</div><div class="line">      arch: "amd64",</div><div class="line">      version: "3.10.0-229.el7.x86_64",</div><div class="line">      available_processors: 4,</div><div class="line">      allocated_processors: 4</div><div class="line">	&#125;,</div><div class="line">	process: &#123;</div><div class="line">      refresh_interval_in_millis: 1000,</div><div class="line">      id: 3022,</div><div class="line">      mlockall: false</div><div class="line">	&#125;,</div><div class="line">	jvm: &#123;</div><div class="line">      pid: 3022,</div><div class="line">      version: "1.8.0_121",</div><div class="line">      vm_name: "Java HotSpot(TM) 64-Bit Server VM",</div><div class="line">      vm_version: "25.121-b13",</div><div class="line">      vm_vendor: "Oracle Corporation",</div><div class="line">      start_time_in_millis: 1507515225302,</div><div class="line">      mem: &#123;</div><div class="line">      heap_init_in_bytes: 1073741824,</div><div class="line">      heap_max_in_bytes: 1038876672,</div><div class="line">      non_heap_init_in_bytes: 2555904,</div><div class="line">      non_heap_max_in_bytes: 0,</div><div class="line">      direct_max_in_bytes: 1038876672</div><div class="line">      &#125;,</div><div class="line">      gc_collectors: [],</div><div class="line">      memory_pools: [],</div><div class="line">      using_compressed_ordinary_object_pointers: "true",</div><div class="line">      input_arguments:&#123;&#125;</div><div class="line">    &#125;</div><div class="line">    thread_pool:&#123;</div><div class="line">      force_merge: &#123;&#125;,</div><div class="line">      fetch_shard_started: &#123;&#125;,</div><div class="line">      listener: &#123;&#125;,</div><div class="line">      index: &#123;&#125;,</div><div class="line">      refresh: &#123;&#125;,</div><div class="line">      generic: &#123;&#125;,</div><div class="line">      warmer: &#123;&#125;,</div><div class="line">      search: &#123;&#125;,</div><div class="line">      flush: &#123;&#125;,</div><div class="line">      fetch_shard_store: &#123;&#125;,</div><div class="line">      management: &#123;&#125;,</div><div class="line">      get: &#123;&#125;,</div><div class="line">      bulk: &#123;&#125;,</div><div class="line">      snapshot: &#123;&#125;</div><div class="line">    &#125;</div><div class="line">    transport: &#123;...&#125;,</div><div class="line">    http: &#123;...&#125;,</div><div class="line">    plugins: [],</div><div class="line">    modules: [],</div><div class="line">    ingest: &#123;...&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>上面是我已经简写了很多数据之后的返回值，但是指标还是很多，有些是一些常规的指标，对于监控来说，没必要拿取。从上面我们可以主要关注以下这些指标:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">os, process, jvm, thread_pool, transport, http, ingest and indices</div></pre></td></tr></table></figure>
<h3 id="节点统计-nodes-statistics"><a href="#节点统计-nodes-statistics" class="headerlink" title="节点统计     nodes-statistics"></a>节点统计     nodes-statistics</h3><p>节点统计值 API 可通过如下命令获取：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET /_nodes/stats</div></pre></td></tr></table></figure>
<p>得到：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div></pre></td><td class="code"><pre><div class="line">_nodes: &#123;</div><div class="line">  total: 2,</div><div class="line">  successful: 2,</div><div class="line">  failed: 0</div><div class="line">&#125;,</div><div class="line">cluster_name: "elasticsearch",</div><div class="line">nodes: &#123;</div><div class="line">  MSQ_CZ7mTNyOSlYI0yvHag: &#123;</div><div class="line">    timestamp: 1508312932354,</div><div class="line">    name: "node0",</div><div class="line">    transport_address: "192.168.180.110:9300",</div><div class="line">    host: "192.168.180.110",</div><div class="line">    ip: "192.168.180.110:9300",</div><div class="line">    roles: [],</div><div class="line">    indices: &#123;</div><div class="line">      docs: &#123;</div><div class="line">           count: 6163666,</div><div class="line">           deleted: 0</div><div class="line">        &#125;,</div><div class="line">      store: &#123;</div><div class="line">           size_in_bytes: 2301398179,</div><div class="line">           throttle_time_in_millis: 122850</div><div class="line">        &#125;,</div><div class="line">      indexing: &#123;&#125;,</div><div class="line">      get: &#123;&#125;,</div><div class="line">      search: &#123;&#125;,</div><div class="line">      merges: &#123;&#125;,</div><div class="line">      refresh: &#123;&#125;,</div><div class="line">      flush: &#123;&#125;,</div><div class="line">      warmer: &#123;&#125;,</div><div class="line">      query_cache: &#123;&#125;,</div><div class="line">      fielddata: &#123;&#125;,</div><div class="line">      completion: &#123;&#125;,</div><div class="line">      segments: &#123;&#125;,</div><div class="line">      translog: &#123;&#125;,</div><div class="line">      request_cache: &#123;&#125;,</div><div class="line">      recovery: &#123;&#125;</div><div class="line">  &#125;,</div><div class="line">  os: &#123;</div><div class="line">    timestamp: 1508312932369,</div><div class="line">    cpu: &#123;</div><div class="line">      percent: 0,</div><div class="line">      load_average: &#123;</div><div class="line">        1m: 0.09,</div><div class="line">        5m: 0.12,</div><div class="line">        15m: 0.08</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    mem: &#123;</div><div class="line">      total_in_bytes: 8358301696,</div><div class="line">      free_in_bytes: 1381613568,</div><div class="line">      used_in_bytes: 6976688128,</div><div class="line">      free_percent: 17,</div><div class="line">      used_percent: 83</div><div class="line">    &#125;,</div><div class="line">    swap: &#123;</div><div class="line">      total_in_bytes: 8455712768,</div><div class="line">      free_in_bytes: 8455299072,</div><div class="line">      used_in_bytes: 413696</div><div class="line">    &#125;,</div><div class="line">    cgroup: &#123;</div><div class="line">      cpuacct: &#123;&#125;,</div><div class="line">      cpu: &#123;</div><div class="line">        control_group: "/user.slice",</div><div class="line">        cfs_period_micros: 100000,</div><div class="line">        cfs_quota_micros: -1,</div><div class="line">        stat: &#123;&#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">process: &#123;</div><div class="line">  timestamp: 1508312932369,</div><div class="line">  open_file_descriptors: 228,</div><div class="line">  max_file_descriptors: 65536,</div><div class="line">  cpu: &#123;</div><div class="line">    percent: 0,</div><div class="line">    total_in_millis: 2495040</div><div class="line">  &#125;,</div><div class="line">  mem: &#123;</div><div class="line">    total_virtual_in_bytes: 5002465280</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">jvm: &#123;</div><div class="line">  timestamp: 1508312932369,</div><div class="line">  uptime_in_millis: 797735804,</div><div class="line">  mem: &#123;</div><div class="line">    heap_used_in_bytes: 318233768,</div><div class="line">    heap_used_percent: 30,</div><div class="line">    heap_committed_in_bytes: 1038876672,</div><div class="line">    heap_max_in_bytes: 1038876672,</div><div class="line">    non_heap_used_in_bytes: 102379784,</div><div class="line">    non_heap_committed_in_bytes: 108773376,</div><div class="line">  pools: &#123;</div><div class="line">    young: &#123;</div><div class="line">      used_in_bytes: 62375176,</div><div class="line">      max_in_bytes: 279183360,</div><div class="line">      peak_used_in_bytes: 279183360,</div><div class="line">      peak_max_in_bytes: 279183360</div><div class="line">    &#125;,</div><div class="line">    survivor: &#123;</div><div class="line">      used_in_bytes: 175384,</div><div class="line">      max_in_bytes: 34865152,</div><div class="line">      peak_used_in_bytes: 34865152,</div><div class="line">      peak_max_in_bytes: 34865152</div><div class="line">    &#125;,</div><div class="line">    old: &#123;</div><div class="line">      used_in_bytes: 255683208,</div><div class="line">      max_in_bytes: 724828160,</div><div class="line">      peak_used_in_bytes: 255683208,</div><div class="line">      peak_max_in_bytes: 724828160</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  &#125;,</div><div class="line">  threads: &#123;&#125;,</div><div class="line">  gc: &#123;&#125;,</div><div class="line">  buffer_pools: &#123;&#125;,</div><div class="line">  classes: &#123;&#125;</div><div class="line">&#125;,</div><div class="line">  thread_pool: &#123;</div><div class="line">    bulk: &#123;&#125;,</div><div class="line">    fetch_shard_started: &#123;&#125;,</div><div class="line">    fetch_shard_store: &#123;&#125;,</div><div class="line">    flush: &#123;&#125;,</div><div class="line">    force_merge: &#123;&#125;,</div><div class="line">    generic: &#123;&#125;,</div><div class="line">    get: &#123;&#125;,</div><div class="line">    index: &#123;</div><div class="line">       threads: 1,</div><div class="line">       queue: 0,</div><div class="line">       active: 0,</div><div class="line">       rejected: 0,</div><div class="line">       largest: 1,</div><div class="line">       completed: 1</div><div class="line">    &#125;</div><div class="line">    listener: &#123;&#125;,</div><div class="line">    management: &#123;&#125;,</div><div class="line">    refresh: &#123;&#125;,</div><div class="line">    search: &#123;&#125;,</div><div class="line">    snapshot: &#123;&#125;,</div><div class="line">    warmer: &#123;&#125;</div><div class="line">  &#125;,</div><div class="line">  fs: &#123;&#125;,</div><div class="line">  transport: &#123;</div><div class="line">    server_open: 13,</div><div class="line">    rx_count: 11696,</div><div class="line">    rx_size_in_bytes: 1525774,</div><div class="line">    tx_count: 10282,</div><div class="line">    tx_size_in_bytes: 1440101928</div><div class="line">  &#125;,</div><div class="line">  http: &#123;</div><div class="line">    current_open: 4,</div><div class="line">    total_opened: 23</div><div class="line">  &#125;,</div><div class="line">  breakers: &#123;&#125;,</div><div class="line">  script: &#123;&#125;,</div><div class="line">  discovery: &#123;&#125;,</div><div class="line">  ingest: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>节点名是一个 UUID，上面列举了很多指标，下面讲解下：</p>
<h4 id="索引部分-indices"><a href="#索引部分-indices" class="headerlink" title="索引部分 indices"></a>索引部分 indices</h4><p>这部分列出了这个节点上所有索引的聚合过的统计值 ：</p>
<ul>
<li><p><code>docs</code> 展示节点内存有多少文档，包括还没有从段里清除的已删除文档数量。</p>
</li>
<li><p><code>store</code> 部分显示节点耗用了多少物理存储。这个指标包括主分片和副本分片在内。如果限流时间很大，那可能表明你的磁盘限流设置得过低。</p>
</li>
<li><p><code>indexing</code> 显示已经索引了多少文档。这个值是一个累加计数器。在文档被删除的时候，数值不会下降。还要注意的是，在发生内部 索引操作的时候，这个值也会增加，比如说文档更新。</p>
<p>还列出了索引操作耗费的时间，正在索引的文档数量，以及删除操作的类似统计值。</p>
</li>
<li><p><code>get</code> 显示通过 ID 获取文档的接口相关的统计值。包括对单个文档的 <code>GET</code> 和 <code>HEAD</code> 请求。</p>
</li>
<li><p><code>search</code> 描述在活跃中的搜索（ <code>open_contexts</code> ）数量、查询的总数量、以及自节点启动以来在查询上消耗的总时间。用 <code>query_time_in_millis / query_total</code> 计算的比值，可以用来粗略的评价你的查询有多高效。比值越大，每个查询花费的时间越多，你应该要考虑调优了。</p>
<p>fetch 统计值展示了查询处理的后一半流程（query-then-fetch 里的 <em>fetch</em> ）。如果 fetch 耗时比 query 还多，说明磁盘较慢，或者获取了太多文档，或者可能搜索请求设置了太大的分页（比如， <code>size: 10000</code> ）。</p>
</li>
<li><p><code>merges</code> 包括了 Lucene 段合并相关的信息。它会告诉你目前在运行几个合并，合并涉及的文档数量，正在合并的段的总大小，以及在合并操作上消耗的总时间。</p>
</li>
<li><p><code>filter_cache</code> 展示了已缓存的过滤器位集合所用的内存数量，以及过滤器被驱逐出内存的次数。过多的驱逐数 <em>可能</em> 说明你需要加大过滤器缓存的大小，或者你的过滤器不太适合缓存（比如它们因为高基数而在大量产生，就像是缓存一个 <code>now</code> 时间表达式）。</p>
<p>不过，驱逐数是一个很难评定的指标。过滤器是在每个段的基础上缓存的，而从一个小的段里驱逐过滤器，代价比从一个大的段里要廉价的多。有可能你有很大的驱逐数，但是它们都发生在小段上，也就意味着这些对查询性能只有很小的影响。</p>
<p>把驱逐数指标作为一个粗略的参考。如果你看到数字很大，检查一下你的过滤器，确保他们都是正常缓存的。不断驱逐着的过滤器，哪怕都发生在很小的段上，效果也比正确缓存住了的过滤器差很多。</p>
</li>
<li><p><code>field_data</code> 显示 fielddata 使用的内存， 用以聚合、排序等等。这里也有一个驱逐计数。和 <code>filter_cache</code> 不同的是，这里的驱逐计数是很有用的：这个数应该或者至少是接近于 0。因为 fielddata 不是缓存，任何驱逐都消耗巨大，应该避免掉。如果你在这里看到驱逐数，你需要重新评估你的内存情况，fielddata 限制，请求语句，或者这三者。</p>
</li>
<li><p><code>segments</code> 会展示这个节点目前正在服务中的 Lucene 段的数量。 这是一个重要的数字。大多数索引会有大概 50–150 个段，哪怕它们存有 TB 级别的数十亿条文档。段数量过大表明合并出现了问题（比如，合并速度跟不上段的创建）。注意这个统计值是节点上所有索引的汇聚总数。记住这点。</p>
<p><code>memory</code> 统计值展示了 Lucene 段自己用掉的内存大小。 这里包括底层数据结构，比如倒排表，字典，和布隆过滤器等。太大的段数量会增加这些数据结构带来的开销，这个内存使用量就是一个方便用来衡量开销的度量值。</p>
</li>
</ul>
<h4 id="操作系统和进程部分"><a href="#操作系统和进程部分" class="headerlink" title="操作系统和进程部分"></a>操作系统和进程部分</h4><p><code>OS</code> 和 <code>Process</code> 部分基本是自描述的，不会在细节中展开讲解。它们列出来基础的资源统计值，比如 CPU 和负载。<code>OS</code> 部分描述了整个操作系统，而 <code>Process</code> 部分只显示 Elasticsearch 的 JVM 进程使用的资源情况。</p>
<p>这些都是非常有用的指标，不过通常在你的监控技术栈里已经都测量好了。统计值包括下面这些：</p>
<ul>
<li>CPU</li>
<li>负载</li>
<li>内存使用率 （mem.used_percent）</li>
<li>Swap 使用率</li>
<li>打开的文件描述符 （open_file_descriptors）</li>
</ul>
<h4 id="JVM-部分"><a href="#JVM-部分" class="headerlink" title="JVM 部分"></a>JVM 部分</h4><p><code>jvm</code> 部分包括了运行 Elasticsearch 的 JVM 进程一些很关键的信息。 最重要的，它包括了垃圾回收的细节，这对你的 Elasticsearch 集群的稳定性有着重大影响。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">jvm: &#123;</div><div class="line">  timestamp: 1508312932369,</div><div class="line">  uptime_in_millis: 797735804,</div><div class="line">  mem: &#123;</div><div class="line">    heap_used_in_bytes: 318233768,</div><div class="line">    heap_used_percent: 30,</div><div class="line">    heap_committed_in_bytes: 1038876672,</div><div class="line">    heap_max_in_bytes: 1038876672,</div><div class="line">    non_heap_used_in_bytes: 102379784,</div><div class="line">    non_heap_committed_in_bytes: 108773376,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>jvm</code> 部分首先列出一些和 heap 内存使用有关的常见统计值。你可以看到有多少 heap 被使用了，多少被指派了（当前被分配给进程的），以及 heap 被允许分配的最大值。理想情况下，<code>heap_committed_in_bytes</code> 应该等于 <code>heap_max_in_bytes</code> 。如果指派的大小更小，JVM 最终会被迫调整 heap 大小——这是一个非常昂贵的操作。如果你的数字不相等，阅读 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/heap-sizing.html" target="_blank" rel="external">堆内存:大小和交换</a> 学习如何正确的配置它。</p>
<p><code>heap_used_percent</code> 指标是值得关注的一个数字。Elasticsearch 被配置为当 heap 达到 75% 的时候开始 GC。如果你的节点一直 &gt;= 75%，你的节点正处于 <em>内存压力</em> 状态。这是个危险信号，不远的未来可能就有慢 GC 要出现了。</p>
<p>如果 heap 使用率一直 &gt;=85%，你就麻烦了。Heap 在 90–95% 之间，则面临可怕的性能风险，此时最好的情况是长达 10–30s 的 GC，最差的情况就是内存溢出（OOM）异常。</p>
<h4 id="线程池部分"><a href="#线程池部分" class="headerlink" title="线程池部分"></a>线程池部分</h4><p>Elasticsearch 在内部维护了线程池。 这些线程池相互协作完成任务，有必要的话相互间还会传递任务。通常来说，你不需要配置或者调优线程池，不过查看它们的统计值有时候还是有用的，可以洞察你的集群表现如何。</p>
<p>每个线程池会列出已配置的线程数量（ <code>threads</code> ），当前在处理任务的线程数量（ <code>active</code> ），以及在队列中等待处理的任务单元数量（ <code>queue</code> ）。</p>
<p>如果队列中任务单元数达到了极限，新的任务单元会开始被拒绝，你会在 <code>rejected</code> 统计值上看到它反映出来。这通常是你的集群在某些资源上碰到瓶颈的信号。因为队列满意味着你的节点或集群在用最高速度运行，但依然跟不上工作的蜂拥而入。</p>
<p>这里的一系列的线程池，大多数你可以忽略，但是有一小部分还是值得关注的：</p>
<ul>
<li><code>indexing</code>    普通的索引请求的线程池</li>
<li><code>bulk</code>    批量请求，和单条的索引请求不同的线程池</li>
<li><code>get</code>     Get-by-ID 操作</li>
<li><code>search</code>    所有的搜索和查询请求</li>
<li><code>merging</code>   专用于管理 Lucene 合并的线程池</li>
</ul>
<h4 id="网络部分"><a href="#网络部分" class="headerlink" title="网络部分"></a>网络部分</h4><ul>
<li><code>transport</code> 显示和 <em>传输地址</em> 相关的一些基础统计值。包括节点间的通信（通常是 9300 端口）以及任意传输客户端或者节点客户端的连接。如果看到这里有很多连接数不要担心；Elasticsearch 在节点之间维护了大量的连接。</li>
<li><code>http</code> 显示 HTTP 端口（通常是 9200）的统计值。如果你看到 <code>total_opened</code> 数很大而且还在一直上涨，这是一个明确信号，说明你的 HTTP 客户端里有没启用 keep-alive 长连接的。持续的 keep-alive 长连接对性能很重要，因为连接、断开套接字是很昂贵的（而且浪费文件描述符）。请确认你的客户端都配置正确。</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-info.html" target="_blank" rel="external">nodes-info</a></p>
<p>2、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-stats.html" target="_blank" rel="external">nodes-stats</a></p>
<p>3、<a href="http://www.oneapm.com/ci/elasticsearch.html" target="_blank" rel="external">ES监控指标</a></p>
<h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p>转载请注明地址：<a href="http://www.54tianzhisheng.cn/2017/10/18/ElasticSearch-nodes-metrics/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/10/18/ElasticSearch-nodes-metrics/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/cb6.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;集群健康监控是对集群信息进行高度的概括，节点统计值 API 提供了集群中每个节点的统计值。节点统计值很多，在监控的时候仍需要我们清楚哪些指标是最值得关注的。&lt;/p&gt;
&lt;p&gt;集群健康监控可以参考这篇文章：&lt;a href=&quot;http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/&quot;&gt;ElasticSearch 集群监控&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="http://yoursite.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 集群监控</title>
    <link href="http://yoursite.com/2017/10/15/ElasticSearch-cluster-health-metrics/"/>
    <id>http://yoursite.com/2017/10/15/ElasticSearch-cluster-health-metrics/</id>
    <published>2017-10-15T12:35:47.137Z</published>
    <updated>2017-10-15T12:34:01.227Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/cb5.jpeg-1" alt=""></p>
<p>最近在做 ElasticSearch 的信息（集群和节点）监控，特此稍微整理下学到的东西。这篇文章主要介绍集群的监控。<br><a id="more"></a></p>
<h3 id="要监控哪些-ElasticSearch-metrics"><a href="#要监控哪些-ElasticSearch-metrics" class="headerlink" title="要监控哪些 ElasticSearch metrics"></a>要监控哪些 ElasticSearch metrics</h3><p><img src="https://datadog-prod.imgix.net/img/blog/monitor-elasticsearch-performance-metrics/elasticsearch-dashboard-final2.png?fit=max" alt=""></p>
<p>Elasticsearch 提供了大量的 Metric，可以帮助您检测到问题的迹象，在遇到节点不可用、out-of-memory、long garbage collection times 的时候采取相应措施。但是指标太多了，有时我们并不需要这么多，这就需要我们进行筛选。</p>
<h3 id="集群健康"><a href="#集群健康" class="headerlink" title="集群健康"></a>集群健康</h3><p>一个 Elasticsearch 集群至少包括一个节点和一个索引。或者它 可能有一百个数据节点、三个单独的主节点，以及一小打客户端节点——这些共同操作一千个索引（以及上万个分片）。</p>
<p>不管集群扩展到多大规模，你都会想要一个快速获取集群状态的途径。<code>Cluster Health</code> API 充当的就是这个角色。你可以把它想象成是在一万英尺的高度鸟瞰集群。它可以告诉你安心吧一切都好，或者警告你集群某个地方有问题。</p>
<p>让我们执行一下 <code>cluster-health</code> API 然后看看响应体是什么样子的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET _cluster/health</div></pre></td></tr></table></figure>
<p>和 Elasticsearch 里其他 API 一样，<code>cluster-health</code> 会返回一个 JSON 响应。这对自动化和告警系统来说，非常便于解析。响应中包含了和你集群有关的一些关键信息：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"cluster_name"</span>: <span class="string">"elasticsearch_zach"</span>,</div><div class="line">   <span class="attr">"status"</span>: <span class="string">"green"</span>,</div><div class="line">   <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</div><div class="line">   <span class="attr">"number_of_nodes"</span>: <span class="number">1</span>,</div><div class="line">   <span class="attr">"number_of_data_nodes"</span>: <span class="number">1</span>,</div><div class="line">   <span class="attr">"active_primary_shards"</span>: <span class="number">10</span>,</div><div class="line">   <span class="attr">"active_shards"</span>: <span class="number">10</span>,</div><div class="line">   <span class="attr">"relocating_shards"</span>: <span class="number">0</span>,</div><div class="line">   <span class="attr">"initializing_shards"</span>: <span class="number">0</span>,</div><div class="line">   <span class="attr">"unassigned_shards"</span>: <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>响应信息中最重要的一块就是 <code>status</code> 字段。状态可能是下列三个值之一 :</p>
<table>
<thead>
<tr>
<th style="text-align:center">status</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">green</td>
<td style="text-align:center">所有的主分片和副本分片都已分配。你的集群是 100% 可用的。</td>
</tr>
<tr>
<td style="text-align:center">yellow</td>
<td style="text-align:center">所有的主分片已经分片了，但至少还有一个副本是缺失的。不会有数据丢失，所以搜索结果依然是完整的。不过，你的高可用性在某种程度上被弱化。如果 更多的 分片消失，你就会丢数据了。把 yellow 想象成一个需要及时调查的警告。</td>
</tr>
<tr>
<td style="text-align:center">red</td>
<td style="text-align:center">至少一个主分片（以及它的全部副本）都在缺失中。这意味着你在缺少数据：搜索只能返回部分数据，而分配到这个分片上的写入请求会返回一个异常。</td>
</tr>
</tbody>
</table>
<ul>
<li><code>number_of_nodes</code> 和 <code>number_of_data_nodes</code> 这个命名完全是自描述的。</li>
<li><code>active_primary_shards</code> 指出你集群中的主分片数量。这是涵盖了所有索引的汇总值。</li>
<li><code>active_shards</code> 是涵盖了所有索引的所有分片的汇总值，即包括副本分片。</li>
<li><code>relocating_shards</code> 显示当前正在从一个节点迁往其他节点的分片的数量。通常来说应该是 0，不过在 Elasticsearch 发现集群不太均衡时，该值会上涨。比如说：添加了一个新节点，或者下线了一个节点。</li>
<li><code>initializing_shards</code> 是刚刚创建的分片的个数。比如，当你刚创建第一个索引，分片都会短暂的处于 <code>initializing</code> 状态。这通常会是一个临时事件，分片不应该长期停留在 <code>initializing</code>状态。你还可能在节点刚重启的时候看到 <code>initializing</code> 分片：当分片从磁盘上加载后，它们会从<code>initializing</code> 状态开始。</li>
<li><code>unassigned_shards</code> 是已经在集群状态中存在的分片，但是实际在集群里又找不着。通常未分配分片的来源是未分配的副本。比如，一个有 5 分片和 1 副本的索引，在单节点集群上，就会有 5 个未分配副本分片。如果你的集群是 <code>red</code> 状态，也会长期保有未分配分片（因为缺少主分片）。</li>
</ul>
<h3 id="集群统计"><a href="#集群统计" class="headerlink" title="集群统计"></a>集群统计</h3><p>集群统计信息包含 集群的分片数，文档数，存储空间，缓存信息，内存作用率，插件内容，文件系统内容，JVM 作用状况，系统 CPU，OS 信息，段信息。</p>
<p>查看全部统计信息命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XGET &apos;http://localhost:9200/_cluster/stats?human&amp;pretty&apos;</div></pre></td></tr></table></figure>
<p>返回 JSON 结果：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"timestamp"</span>: <span class="number">1459427693515</span>,</div><div class="line">   <span class="attr">"cluster_name"</span>: <span class="string">"elasticsearch"</span>,</div><div class="line">   <span class="attr">"status"</span>: <span class="string">"green"</span>,</div><div class="line">   <span class="attr">"indices"</span>: &#123;</div><div class="line">      <span class="attr">"count"</span>: <span class="number">2</span>,</div><div class="line">      <span class="attr">"shards"</span>: &#123;</div><div class="line">         <span class="attr">"total"</span>: <span class="number">10</span>,</div><div class="line">         <span class="attr">"primaries"</span>: <span class="number">10</span>,</div><div class="line">         <span class="attr">"replication"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"index"</span>: &#123;</div><div class="line">            <span class="attr">"shards"</span>: &#123;</div><div class="line">               <span class="attr">"min"</span>: <span class="number">5</span>,</div><div class="line">               <span class="attr">"max"</span>: <span class="number">5</span>,</div><div class="line">               <span class="attr">"avg"</span>: <span class="number">5</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">"primaries"</span>: &#123;</div><div class="line">               <span class="attr">"min"</span>: <span class="number">5</span>,</div><div class="line">               <span class="attr">"max"</span>: <span class="number">5</span>,</div><div class="line">               <span class="attr">"avg"</span>: <span class="number">5</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">"replication"</span>: &#123;</div><div class="line">               <span class="attr">"min"</span>: <span class="number">0</span>,</div><div class="line">               <span class="attr">"max"</span>: <span class="number">0</span>,</div><div class="line">               <span class="attr">"avg"</span>: <span class="number">0</span></div><div class="line">            &#125;</div><div class="line">         &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"docs"</span>: &#123;</div><div class="line">         <span class="attr">"count"</span>: <span class="number">10</span>,</div><div class="line">         <span class="attr">"deleted"</span>: <span class="number">0</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"store"</span>: &#123;</div><div class="line">         <span class="attr">"size"</span>: <span class="string">"16.2kb"</span>,</div><div class="line">         <span class="attr">"size_in_bytes"</span>: <span class="number">16684</span>,</div><div class="line">         <span class="attr">"throttle_time"</span>: <span class="string">"0s"</span>,</div><div class="line">         <span class="attr">"throttle_time_in_millis"</span>: <span class="number">0</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"fielddata"</span>: &#123;</div><div class="line">         <span class="attr">"memory_size"</span>: <span class="string">"0b"</span>,</div><div class="line">         <span class="attr">"memory_size_in_bytes"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"evictions"</span>: <span class="number">0</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"query_cache"</span>: &#123;</div><div class="line">         <span class="attr">"memory_size"</span>: <span class="string">"0b"</span>,</div><div class="line">         <span class="attr">"memory_size_in_bytes"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"total_count"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"hit_count"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"miss_count"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"cache_size"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"cache_count"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"evictions"</span>: <span class="number">0</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"completion"</span>: &#123;</div><div class="line">         <span class="attr">"size"</span>: <span class="string">"0b"</span>,</div><div class="line">         <span class="attr">"size_in_bytes"</span>: <span class="number">0</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"segments"</span>: &#123;</div><div class="line">         <span class="attr">"count"</span>: <span class="number">4</span>,</div><div class="line">         <span class="attr">"memory"</span>: <span class="string">"8.6kb"</span>,</div><div class="line">         <span class="attr">"memory_in_bytes"</span>: <span class="number">8898</span>,</div><div class="line">         <span class="attr">"terms_memory"</span>: <span class="string">"6.3kb"</span>,</div><div class="line">         <span class="attr">"terms_memory_in_bytes"</span>: <span class="number">6522</span>,</div><div class="line">         <span class="attr">"stored_fields_memory"</span>: <span class="string">"1.2kb"</span>,</div><div class="line">         <span class="attr">"stored_fields_memory_in_bytes"</span>: <span class="number">1248</span>,</div><div class="line">         <span class="attr">"term_vectors_memory"</span>: <span class="string">"0b"</span>,</div><div class="line">         <span class="attr">"term_vectors_memory_in_bytes"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"norms_memory"</span>: <span class="string">"384b"</span>,</div><div class="line">         <span class="attr">"norms_memory_in_bytes"</span>: <span class="number">384</span>,</div><div class="line">         <span class="attr">"doc_values_memory"</span>: <span class="string">"744b"</span>,</div><div class="line">         <span class="attr">"doc_values_memory_in_bytes"</span>: <span class="number">744</span>,</div><div class="line">         <span class="attr">"index_writer_memory"</span>: <span class="string">"0b"</span>,</div><div class="line">         <span class="attr">"index_writer_memory_in_bytes"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"version_map_memory"</span>: <span class="string">"0b"</span>,</div><div class="line">         <span class="attr">"version_map_memory_in_bytes"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"fixed_bit_set"</span>: <span class="string">"0b"</span>,</div><div class="line">         <span class="attr">"fixed_bit_set_memory_in_bytes"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"file_sizes"</span>: &#123;&#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"percolator"</span>: &#123;</div><div class="line">         <span class="attr">"num_queries"</span>: <span class="number">0</span></div><div class="line">      &#125;</div><div class="line">   &#125;,</div><div class="line">   <span class="attr">"nodes"</span>: &#123;</div><div class="line">      <span class="attr">"count"</span>: &#123;</div><div class="line">         <span class="attr">"total"</span>: <span class="number">1</span>,</div><div class="line">         <span class="attr">"data"</span>: <span class="number">1</span>,</div><div class="line">         <span class="attr">"coordinating_only"</span>: <span class="number">0</span>,</div><div class="line">         <span class="attr">"master"</span>: <span class="number">1</span>,</div><div class="line">         <span class="attr">"ingest"</span>: <span class="number">1</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"versions"</span>: [</div><div class="line">         <span class="string">"5.6.3"</span></div><div class="line">      ],</div><div class="line">      <span class="attr">"os"</span>: &#123;</div><div class="line">         <span class="attr">"available_processors"</span>: <span class="number">8</span>,</div><div class="line">         <span class="attr">"allocated_processors"</span>: <span class="number">8</span>,</div><div class="line">         <span class="attr">"names"</span>: [</div><div class="line">            &#123;</div><div class="line">               <span class="attr">"name"</span>: <span class="string">"Mac OS X"</span>,</div><div class="line">               <span class="attr">"count"</span>: <span class="number">1</span></div><div class="line">            &#125;</div><div class="line">         ],</div><div class="line">         <span class="attr">"mem"</span> : &#123;</div><div class="line">            <span class="attr">"total"</span> : <span class="string">"16gb"</span>,</div><div class="line">            <span class="attr">"total_in_bytes"</span> : <span class="number">17179869184</span>,</div><div class="line">            <span class="attr">"free"</span> : <span class="string">"78.1mb"</span>,</div><div class="line">            <span class="attr">"free_in_bytes"</span> : <span class="number">81960960</span>,</div><div class="line">            <span class="attr">"used"</span> : <span class="string">"15.9gb"</span>,</div><div class="line">            <span class="attr">"used_in_bytes"</span> : <span class="number">17097908224</span>,</div><div class="line">            <span class="attr">"free_percent"</span> : <span class="number">0</span>,</div><div class="line">            <span class="attr">"used_percent"</span> : <span class="number">100</span></div><div class="line">         &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"process"</span>: &#123;</div><div class="line">         <span class="attr">"cpu"</span>: &#123;</div><div class="line">            <span class="attr">"percent"</span>: <span class="number">9</span></div><div class="line">         &#125;,</div><div class="line">         <span class="attr">"open_file_descriptors"</span>: &#123;</div><div class="line">            <span class="attr">"min"</span>: <span class="number">268</span>,</div><div class="line">            <span class="attr">"max"</span>: <span class="number">268</span>,</div><div class="line">            <span class="attr">"avg"</span>: <span class="number">268</span></div><div class="line">         &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"jvm"</span>: &#123;</div><div class="line">         <span class="attr">"max_uptime"</span>: <span class="string">"13.7s"</span>,</div><div class="line">         <span class="attr">"max_uptime_in_millis"</span>: <span class="number">13737</span>,</div><div class="line">         <span class="attr">"versions"</span>: [</div><div class="line">            &#123;</div><div class="line">               <span class="attr">"version"</span>: <span class="string">"1.8.0_74"</span>,</div><div class="line">               <span class="attr">"vm_name"</span>: <span class="string">"Java HotSpot(TM) 64-Bit Server VM"</span>,</div><div class="line">               <span class="attr">"vm_version"</span>: <span class="string">"25.74-b02"</span>,</div><div class="line">               <span class="attr">"vm_vendor"</span>: <span class="string">"Oracle Corporation"</span>,</div><div class="line">               <span class="attr">"count"</span>: <span class="number">1</span></div><div class="line">            &#125;</div><div class="line">         ],</div><div class="line">         <span class="attr">"mem"</span>: &#123;</div><div class="line">            <span class="attr">"heap_used"</span>: <span class="string">"57.5mb"</span>,</div><div class="line">            <span class="attr">"heap_used_in_bytes"</span>: <span class="number">60312664</span>,</div><div class="line">            <span class="attr">"heap_max"</span>: <span class="string">"989.8mb"</span>,</div><div class="line">            <span class="attr">"heap_max_in_bytes"</span>: <span class="number">1037959168</span></div><div class="line">         &#125;,</div><div class="line">         <span class="attr">"threads"</span>: <span class="number">90</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"fs"</span>: &#123;</div><div class="line">         <span class="attr">"total"</span>: <span class="string">"200.6gb"</span>,</div><div class="line">         <span class="attr">"total_in_bytes"</span>: <span class="number">215429193728</span>,</div><div class="line">         <span class="attr">"free"</span>: <span class="string">"32.6gb"</span>,</div><div class="line">         <span class="attr">"free_in_bytes"</span>: <span class="number">35064553472</span>,</div><div class="line">         <span class="attr">"available"</span>: <span class="string">"32.4gb"</span>,</div><div class="line">         <span class="attr">"available_in_bytes"</span>: <span class="number">34802409472</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"plugins"</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"analysis-icu"</span>,</div><div class="line">          <span class="attr">"version"</span>: <span class="string">"5.6.3"</span>,</div><div class="line">          <span class="attr">"description"</span>: <span class="string">"The ICU Analysis plugin integrates Lucene ICU module into elasticsearch, adding ICU relates analysis components."</span>,</div><div class="line">          <span class="attr">"classname"</span>: <span class="string">"org.elasticsearch.plugin.analysis.icu.AnalysisICUPlugin"</span>,</div><div class="line">          <span class="attr">"has_native_controller"</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"ingest-geoip"</span>,</div><div class="line">          <span class="attr">"version"</span>: <span class="string">"5.6.3"</span>,</div><div class="line">          <span class="attr">"description"</span>: <span class="string">"Ingest processor that uses looksup geo data based on ip adresses using the Maxmind geo database"</span>,</div><div class="line">          <span class="attr">"classname"</span>: <span class="string">"org.elasticsearch.ingest.geoip.IngestGeoIpPlugin"</span>,</div><div class="line">          <span class="attr">"has_native_controller"</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"ingest-user-agent"</span>,</div><div class="line">          <span class="attr">"version"</span>: <span class="string">"5.6.3"</span>,</div><div class="line">          <span class="attr">"description"</span>: <span class="string">"Ingest processor that extracts information from a user agent"</span>,</div><div class="line">          <span class="attr">"classname"</span>: <span class="string">"org.elasticsearch.ingest.useragent.IngestUserAgentPlugin"</span>,</div><div class="line">          <span class="attr">"has_native_controller"</span>: <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="内存使用和-GC-指标"><a href="#内存使用和-GC-指标" class="headerlink" title="内存使用和 GC 指标"></a>内存使用和 GC 指标</h4><p>在运行 Elasticsearch 时，内存是您要密切监控的关键资源之一。 Elasticsearch 和 Lucene 以两种方式利用节点上的所有可用 RAM：JVM heap 和文件系统缓存。 Elasticsearch 运行在Java虚拟机（JVM）中，这意味着JVM垃圾回收的持续时间和频率将成为其他重要的监控领域。</p>
<p>上面返回的 JSON监控的指标有我个人觉得有这些：</p>
<ul>
<li>nodes.successful</li>
<li>nodes.failed</li>
<li>nodes.total</li>
<li>nodes.mem.used_percent</li>
<li>nodes.process.cpu.percent</li>
<li>nodes.jvm.mem.heap_used</li>
</ul>
<p>可以看到 JSON 文件是很复杂的，如果从这复杂的 JSON 中获取到对应的指标（key）的值呢，这里请看文章 ：<a href="http://www.54tianzhisheng.cn/2017/10/13/JsonPath/" target="_blank" rel="external">JsonPath —— JSON 解析神器</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>这里主要讲下 ES 集群的一些监控信息，有些监控指标是个人觉得需要监控的，但是具体情况还是得看需求了。下篇文章主要讲节点的监控信息。转载请注明地址：<a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、<a href="https://www.datadoghq.com/blog/monitor-elasticsearch-performance-metrics/" target="_blank" rel="external">How to monitor Elasticsearch performance</a></p>
<p>2、<a href="http://www.oneapm.com/ci/elasticsearch.html" target="_blank" rel="external">ElasticSearch 性能监控</a></p>
<p>3、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-health.html" target="_blank" rel="external">cluster-health</a></p>
<p>4、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-stats.html" target="_blank" rel="external">cluster-stats</a></p>
<h3 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h3><p>1、<a href="http://www.54tianzhisheng.cn/2017/09/07/Elasticsearch-analyzers/" target="_blank" rel="external">Elasticsearch 默认分词器和中分分词器之间的比较及使用方法</a></p>
<p>2、<a href="http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/" target="_blank" rel="external">全文搜索引擎 Elasticsearch 集群搭建入门教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/cb5.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近在做 ElasticSearch 的信息（集群和节点）监控，特此稍微整理下学到的东西。这篇文章主要介绍集群的监控。&lt;br&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="http://yoursite.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 搭建最新 Nexus3 Maven 私服</title>
    <link href="http://yoursite.com/2017/10/14/Nexus3-Maven/"/>
    <id>http://yoursite.com/2017/10/14/Nexus3-Maven/</id>
    <published>2017-10-13T17:37:00.733Z</published>
    <updated>2017-10-14T08:22:10.095Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/cb4.jpeg-1" alt=""></p>
<h3 id="Maven-介绍"><a href="#Maven-介绍" class="headerlink" title="Maven 介绍"></a>Maven 介绍</h3><p>Apache Maven 是一个创新的软件项目管理和综合工具。<br>Maven 提供了一个基于项目对象模型（POM）文件的新概念来管理项目的构建，可以从一个中心资料片管理项目构建，报告和文件。<br><a id="more"></a><br>Maven 最强大的功能就是能够自动下载项目依赖库。<br>Maven 提供了开发人员构建一个完整的生命周期框架。开发团队可以自动完成项目的基础工具建设，Maven 使用标准的目录结构和默认构建生命周期。<br>在多个开发团队环境时，Maven 可以设置按标准在非常短的时间里完成配置工作。由于大部分项目的设置都很简单，并且可重复使用，Maven 让开发人员的工作更轻松，同时创建报表，检查，构建和测试自动化设置。<br>Maven 项目的结构和内容在一个 XML 文件中声明，pom.xml 项目对象模型（POM），这是整个 Maven 系统的基本单元。</p>
<p>Maven 提供了开发人员的方式来管理：<br>1）Builds<br>2）Documentation<br>3）Reporting<br>4）Dependencies<br>5）SCMs<br>6）Releases<br>7）Distribution<br>8）mailing list<br>概括地说，Maven 简化和标准化项目建设过程。处理编译，分配，文档，团队协作和其他任务的无缝连接。<br>Maven 增加可重用性并负责建立相关的任务。<br>Maven 最初设计，是以简化 Jakarta Turbine 项目的建设。在几个项目，每个项目包含了不同的 Ant 构建文件。 JAR 检查到 CVS。<br>Apache 组织开发 Maven 可以建立多个项目，发布项目信息，项目部署，在几个项目中 JAR 文件提供团队合作和帮助。</p>
<p>Maven 主要目标是提供给开发人员：<br>1）项目是可重复使用，易维护，更容易理解的一个综合模型。<br>2）插件或交互的工具，这种声明性的模式。</p>
<h3 id="私服介绍"><a href="#私服介绍" class="headerlink" title="私服介绍"></a>私服介绍</h3><p>私服是指私有服务器，是架设在局域网的一种特殊的远程仓库，目的是代理远程仓库及部署第三方构建。有了私服之后，当 Maven 需要下载构件时，直接请求私服，私服上存在则下载到本地仓库；否则，私服请求外部的远程仓库，将构件下载到私服，再提供给本地仓库下载。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/907596.png-1" alt=""></p>
<h3 id="Nexus-介绍"><a href="#Nexus-介绍" class="headerlink" title="Nexus 介绍"></a>Nexus 介绍</h3><p>Nexus 是一个强大的 Maven 仓库管理器，它极大地简化了本地内部仓库的维护和外部仓库的访问。<br>如果使用了公共的 Maven 仓库服务器，可以从 Maven 中央仓库下载所需要的构件（Artifact），但这通常不是一个好的做法。<br>正常做法是在本地架设一个 Maven 仓库服务器，即利用 Nexus 私服可以只在一个地方就能够完全控制访问和部署在你所维护仓库中的每个 Artifact。<br>Nexus 在代理远程仓库的同时维护本地仓库，以降低中央仓库的负荷, 节省外网带宽和时间，Nexus 私服就可以满足这样的需要。<br>Nexus 是一套 “开箱即用” 的系统不需要数据库，它使用文件系统加 Lucene 来组织数据。<br>Nexus 使用 ExtJS 来开发界面，利用 Restlet 来提供完整的 REST APIs，通过 m2eclipse 与 Eclipse 集成使用。<br>Nexus 支持 WebDAV 与 LDAP 安全身份认证。<br>Nexus 还提供了强大的仓库管理功能，构件搜索功能，它基于 REST，友好的 UI 是一个 extjs 的 REST 客户端，它占用较少的内存，基于简单文件系统而非数据库。</p>
<p>为什么要构建 Nexus 私服？<br>如果没有 Nexus 私服，我们所需的所有构件都需要通过 maven 的中央仓库和第三方的 Maven 仓库下载到本地，而一个团队中的所有人都重复的从 maven 仓库下载构件无疑加大了仓库的负载和浪费了外网带宽，如果网速慢的话，还会影响项目的进程。很多情况下项目的开发都是在内网进行的，连接不到 maven 仓库怎么办呢？开发的公共构件怎么让其它项目使用？这个时候我们不得不为自己的团队搭建属于自己的 maven 私服，这样既节省了网络带宽也会加速项目搭建的进程，当然前提条件就是你的私服中拥有项目所需的所有构件。</p>
<p>总之，在本地构建 nexus 私服的好处有：<br>1）加速构建；<br>2）节省带宽；<br>3）节省中央 maven 仓库的带宽；<br>4）稳定（应付一旦中央服务器出问题的情况）；<br>5）控制和审计；<br>6）能够部署第三方构件；<br>7）可以建立本地内部仓库；<br>8）可以建立公共仓库<br>这些优点使得 Nexus 日趋成为最流行的 Maven 仓库管理器。</p>
<h3 id="1-安装-jdk1-8"><a href="#1-安装-jdk1-8" class="headerlink" title="1. 安装 jdk1.8"></a>1. 安装 jdk1.8</h3><p>关于 jdk1.8 的安装, 在这里就不做赘述了</p>
<h3 id="2-安装-maven"><a href="#2-安装-maven" class="headerlink" title="2. 安装 maven"></a>2. 安装 maven</h3><p>关于 maven 的安装, 本文在这里就不详细写了</p>
<h3 id="3-安装-nexus3"><a href="#3-安装-nexus3" class="headerlink" title="3. 安装 nexus3"></a>3. 安装 nexus3</h3><h4 id="1-下载-nexus-3-6-0-02-unix-tar-gz"><a href="#1-下载-nexus-3-6-0-02-unix-tar-gz" class="headerlink" title="1. 下载 nexus-3.6.0-02-unix.tar.gz"></a>1. 下载 nexus-3.6.0-02-unix.tar.gz</h4><p>官网链接地址：<a href="https://www.sonatype.com/download-oss-sonatype" target="_blank" rel="external">https://www.sonatype.com/download-oss-sonatype</a>  下载 linux 最新版本，直接下载速度可能很慢，建议用迅雷下载会快很多的。</p>
<h4 id="2-解压"><a href="#2-解压" class="headerlink" title="2. 解压"></a>2. 解压</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf nexus-3.6.0-02-unix.tar.gz -C /usr/local/</div></pre></td></tr></table></figure>
<h4 id="3-启动-nexus3"><a href="#3-启动-nexus3" class="headerlink" title="3. 启动 nexus3"></a>3. 启动 nexus3</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/nexus-3.6.0-02/bin/</div><div class="line">./nexus run &amp;</div></pre></td></tr></table></figure>
<p><strong>稍等一会 (首次启动会比较慢), 当出现以下日志的时候表示启动成功!</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-------------------------------------------------</div><div class="line"></div><div class="line">Started Sonatype Nexus OSS 3.6.0-02</div><div class="line"></div><div class="line">-------------------------------------------------</div></pre></td></tr></table></figure>
<h4 id="4-开启远程访问端口"><a href="#4-开启远程访问端口" class="headerlink" title="4. 开启远程访问端口"></a>4. 开启远程访问端口</h4><p>关闭防火墙，并开启远程访问端口 8081</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/iptables</div><div class="line">添加：</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8081 -j ACCEPT</div></pre></td></tr></table></figure>
<h4 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h4><p><img src="http://img.blog.csdn.net/20171010021242176?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveW91Z291bGU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nexus3默认端口是:8081</div><div class="line">nexus3默认账号是:admin</div><div class="line">nexus3默认密码是:admin123</div></pre></td></tr></table></figure>
<h4 id="6-设置开机自启动"><a href="#6-设置开机自启动" class="headerlink" title="6. 设置开机自启动"></a>6. 设置开机自启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ln -s /usr/local/nexus-3.6.0-02/bin/nexus /etc/init.d/nexus3</div><div class="line">chkconfig --add nexus3</div><div class="line">chkconfig nexus3 on</div></pre></td></tr></table></figure>
<h4 id="7-修改-nexus3-的运行用户为-root"><a href="#7-修改-nexus3-的运行用户为-root" class="headerlink" title="7. 修改 nexus3 的运行用户为 root"></a>7. 修改 nexus3 的运行用户为 root</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim nexus.rc</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//设置</div><div class="line">run_as_user=&quot;root&quot;</div></pre></td></tr></table></figure>
<h4 id="8-修改-nexus3-启动时要使用的-jdk-版本"><a href="#8-修改-nexus3-启动时要使用的-jdk-版本" class="headerlink" title="8. 修改 nexus3 启动时要使用的 jdk 版本"></a>8. 修改 nexus3 启动时要使用的 jdk 版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim nexus</div></pre></td></tr></table></figure>
<p><strong>第 14 行:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INSTALL4J_JAVA_HOME_OVERRIDE=/usr/local/java/jdk1.8.0_144</div></pre></td></tr></table></figure>
<h4 id="9-修改-nexus3-默认端口-可选"><a href="#9-修改-nexus3-默认端口-可选" class="headerlink" title="9. 修改 nexus3 默认端口 (可选)"></a>9. 修改 nexus3 默认端口 (可选)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/nexus-3.6.0-02/etc/</div><div class="line">vim nexus-default.properties</div></pre></td></tr></table></figure>
<p><strong>默认端口: 8081</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">application-port=8081</div></pre></td></tr></table></figure>
<h4 id="10-修改-nexus3-数据以及相关日志的存储位置-可选-："><a href="#10-修改-nexus3-数据以及相关日志的存储位置-可选-：" class="headerlink" title="10. 修改 nexus3 数据以及相关日志的存储位置 (可选)："></a>10. 修改 nexus3 数据以及相关日志的存储位置 (可选)：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@MiWiFi-R3-srv bin]# cd /usr/local/nexus-3.6.0-02/bin/</div><div class="line">[root@MiWiFi-R3-srv bin]# vim nexus.vmoptions</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-XX:LogFile=./sonatype-work/nexus3/log/jvm.log</div><div class="line">-Dkaraf.data=./sonatype-work/nexus3</div><div class="line">-Djava.io.tmpdir=./sonatype-work/nexus3/tmp</div></pre></td></tr></table></figure>
<p>出现上面 5 中的测试页面，说明配置 nexus 成功！ 点击右上角 “Log in”， 输入默认用户名 (admin) 和默认密码（admin123）登录</p>
<p>至此, nexus3_maven 的私服就搭建完成了!!!</p>
<p>可以点击上面的 “设置” 图标，在 “设置” 里可以添加用户、角色，对接 LDAP 等的设置，如下：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/67407111.png-1" alt=""></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/1502291718.png-1" alt=""></p>
<p>可以在 “管理” 里查看 nexus 的系统信息</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/558914286.png-1" alt=""></p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>1.component name 的一些说明：<br>    1）maven-central：maven 中央库，默认从 <a href="https://repo1.maven.org/maven2" target="_blank" rel="external">https://repo1.maven.org/maven2</a> / 拉取 jar<br>    2）maven-releases：私库发行版 jar<br>    3）maven-snapshots：私库快照（调试版本）jar<br>    4）maven-public：仓库分组，把上面三个仓库组合在一起对外提供服务，在本地 maven 基础配置 settings.xml 中使用。</p>
<p>2.Nexus 默认的仓库类型有以下四种：</p>
<pre><code>1）group(仓库组类型)：又叫组仓库，用于方便开发人员自己设定的仓库；

2）hosted(宿主类型)：内部项目的发布仓库（内部开发人员，发布上去存放的仓库）；

3）proxy(代理类型)：从远程中央仓库中寻找数据的仓库（可以点击对应的仓库的 Configuration 页签下 Remote Storage Location 属性的值即被代理的远程仓库的路径）；

4）virtual(虚拟类型)：虚拟仓库（这个基本用不到，重点关注上面三个仓库的使用）；
</code></pre><p>3.Policy(策略): 表示该仓库为发布 (Release) 版本仓库还是快照 (Snapshot) 版本仓库；</p>
<p>4.Public Repositories 下的仓库</p>
<p>   1）3rd party: 无法从公共仓库获得的第三方发布版本的构件仓库，即第三方依赖的仓库，这个数据通常是由内部人员自行下载之后发布上去；</p>
<p>   2）Apache Snapshots: 用了代理 ApacheMaven 仓库快照版本的构件仓库</p>
<p>   3）Central: 用来代理 maven 中央仓库中发布版本构件的仓库</p>
<p>   4）Central M1 shadow: 用于提供中央仓库中 M1 格式的发布版本的构件镜像仓库</p>
<p>   5）Codehaus Snapshots: 用来代理 CodehausMaven 仓库的快照版本构件的仓库</p>
<p>   6）Releases: 内部的模块中 release 模块的发布仓库，用来部署管理内部的发布版本构件的宿主类型仓库；release 是发布版本；</p>
<p>   7）Snapshots: 发布内部的 SNAPSHOT 模块的仓库，用来部署管理内部的快照版本构件的宿主类型仓库；snapshots 是快照版本，也就是不稳定版本<br>所以自定义构建的仓库组代理仓库的顺序为：Releases，Snapshots，3rd party，Central。也可以使用 oschina 放到 Central 前面，下载包会更快。</p>
<p>5.Nexus 默认的端口是 8081，可以在 etc/nexus-default.properties 配置中修改。</p>
<p>6.Nexus 默认的用户名密码是 admin/admin123</p>
<ol>
<li>当遇到奇怪问题时，重启 nexus，重启后 web 界面要 1 分钟左右后才能访问。</li>
</ol>
<p>8.Nexus 的工作目录是 sonatype-work（路径一般在 nexus 同级目录下）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@master-node local]# pwd</div><div class="line">/usr/local</div><div class="line">[root@master-node local]# ls nexus/</div><div class="line">bin deploy etc lib LICENSE.txt NOTICE.txt public system</div><div class="line">[root@master-node local]# ls sonatype-work/</div><div class="line">nexus3</div><div class="line">[root@master-node local]# ls sonatype-work/nexus3/</div><div class="line">backup blobs cache db elasticsearch etc generated-bundles health-check instances keystores lock log orient port tmp</div></pre></td></tr></table></figure></p>
<p>Nexus 仓库分类的概念：<br>1）Maven 可直接从宿主仓库下载构件, 也可以从代理仓库下载构件, 而代理仓库间接的从远程仓库下载并缓存构件<br>2）为了方便, Maven 可以从仓库组下载构件, 而仓库组并没有时间的内容 (下图中用虚线表示, 它会转向包含的宿主仓库或者代理仓库获得实际构件的内容).</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/016524.png-1" alt=""></p>
<h3 id="Nexus-的-web-界面功能介绍"><a href="#Nexus-的-web-界面功能介绍" class="headerlink" title="Nexus 的 web 界面功能介绍"></a>Nexus 的 web 界面功能介绍</h3><h4 id="1-Browse-Server-Content"><a href="#1-Browse-Server-Content" class="headerlink" title="1.Browse Server Content"></a>1.Browse Server Content</h4><p><img src="http://ohfk1r827.bkt.clouddn.com/496.png-1" alt=""></p>
<p>1.1  Search<br>这个就是类似 Maven 仓库上的搜索功能，就是从私服上查找是否有哪些包。<br>注意：<br>1）在 Search 这级是支持模糊搜索的，如图所示：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/888.png-1" alt=""></p>
<p>2）如果进入具体的目录，好像不支持模糊搜索，如图所示：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/4456.png-1" alt=""></p>
<p>1.2  Browse</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/078817.png-1" alt=""></p>
<p>1）Assets<br>这是能看到所有的资源，包含 Jar，已经对 Jar 的一些描述信息。<br>2）Components<br>这里只能看到 Jar 包。</p>
<h4 id="2-Server-Adminstration-And-configuration"><a href="#2-Server-Adminstration-And-configuration" class="headerlink" title="2.Server Adminstration And configuration"></a>2.Server Adminstration And configuration</h4><p>看到这个选项的前提是要进行登录的，如上面已经介绍登陆方法，右上角点击 “Sign In” 的登录按钮，输入 admin/admin123, 登录成功之后，即可看到此功能，如图所示：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/43915.png-1" alt=""></p>
<p>2.1 Blob Stores<br>文件存储的地方，创建一个目录的话，对应文件系统的一个目录，如图所示：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/71.png-1" alt=""></p>
<p>2.2 Repositories</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/49455.png-1" alt=""></p>
<p>1）Proxy<br>这里就是代理的意思，代理中央 Maven 仓库，当 PC 访问中央库的时候，先通过 Proxy 下载到 Nexus 仓库，然后再从 Nexus 仓库下载到 PC 本地。<br>这样的优势只要其中一个人从中央库下来了，以后大家都是从 Nexus 私服上进行下来，私服一般部署在内网，这样大大节约的宽带。<br>创建 Proxy 的具体步骤<br>1 点击 “Create Repositories” 按钮</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/54.png-1" alt=""></p>
<p>2 选择要创建的类型</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/386.png-1" alt=""></p>
<p>3 填写详细信息<br>Name：就是为代理起个名字<br>Remote Storage: 代理的地址，Maven 的地址为: <a href="https://repo1.maven.org/maven2/" target="_blank" rel="external">https://repo1.maven.org/maven2/</a><br>Blob Store: 选择代理下载包的存放路径</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/21037653.png-1" alt=""></p>
<p>2）Hosted<br>Hosted 是宿主机的意思，就是怎么把第三方的 Jar 放到私服上。<br>Hosted 有三种方式，Releases、SNAPSHOT、Mixed<br>Releases: 一般是已经发布的 Jar 包<br>Snapshot: 未发布的版本<br>Mixed：混合的<br>Hosted 的创建和 Proxy 是一致的，具体步骤和上面基本一致。如下：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/723208432.png-1" alt=""></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/1949446719.png-1" alt=""></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/2005652543.png-1" alt=""></p>
<p><strong>注意事项：</strong><br>Deployment Pollcy: 需要把策略改成 “Allow redeploy”。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/303191395.png-1" alt=""></p>
<p>3）Group<br>能把两个仓库合成一个仓库来使用，目前没使用过，所以没做详细的研究。</p>
<p>2.3 Security<br>这里主要是用户、角色、权限的配置（上面已经提到了在这里添加用户和角色等）</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/1991046629.png-1" alt=""></p>
<p>2.4 Support<br>包含日志及数据分析。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/269936853.png-1" alt=""></p>
<p>2.5 System<br>主要是邮件服务器，调度的设置地方<br>这部分主要讲怎么和 Maven 做集成, 集成的方式主要分以下种情况：代理中央仓库、Snapshot 包的管理、Release 包的管理、第三方 Jar 上传到 Nexus 上。</p>
<h4 id="代理中央仓库"><a href="#代理中央仓库" class="headerlink" title="代理中央仓库"></a>代理中央仓库</h4><p>只要在 PMO 文件中配置私服的地址（比如 <a href="http://192.168.1.14:8081）即可，配置如下：" target="_blank" rel="external">http://192.168.1.14:8081）即可，配置如下：</a></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-central<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.14:8081/repository/maven-central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">releases</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">releases</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Snapshot-包的管理"><a href="#Snapshot-包的管理" class="headerlink" title="Snapshot 包的管理"></a>Snapshot 包的管理</h4><p>1）修改 Maven 的 settings.xml 文件，加入认证机制</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">server</span>&gt;</span><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2）修改工程的 Pom 文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.14:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">site</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Sites<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>dav:http://192.168.1.14:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">site</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>注意事项:</strong></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/1284881495.png-1" alt=""></p>
<p>上面修改的 Pom 文件如截图中的名字要跟 / usr/local/maven/conf/settings.xml 文件中的名字一定要对应上。</p>
<p>3）上传到 Nexus 上</p>
<p>1– 项目编译成的 jar 是 Snapshot(POM 文件的头部)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhisheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test-nexus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SHAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2– 使用 mvn deploy 命令运行即可（运行结果在此略过）</p>
<p>3– 因为 Snapshot 是快照版本，默认他每次会把 Jar 加一个时间戳，做为历史备份版本。</p>
<h4 id="Releases-包的管理"><a href="#Releases-包的管理" class="headerlink" title="Releases 包的管理"></a>Releases 包的管理</h4><p>1）与 Snapshot 大同小异，只是上传到私服上的 Jar 包不会自动带时间戳<br>2）与 Snapshot 配置不同的地方，就是工程的 PMO 文件，加入 repository 配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.14:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></div></pre></td></tr></table></figure>
<p>3）打包的时候需要把 Snapshot 去掉</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhisheng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test-nexus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span> |</div></pre></td></tr></table></figure>
<h4 id="第三方-Jar-上传到-Nexus"><a href="#第三方-Jar-上传到-Nexus" class="headerlink" title="第三方 Jar 上传到 Nexus"></a>第三方 Jar 上传到 Nexus</h4><p>[root@master-node src]# mvn deploy:deploy-file -DgroupId=org.jasig.cas.client -DartifactId=cas-client-core -Dversion=3.1.3 -Dpackag<br><strong>注意事项：</strong><br>-DrepositoryId=nexus 对应的就是 Maven 中 settings.xml 的认证配的名字。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>搭建的时候是参考网上博客，写篇完整的博客再回馈给网上。转载请注明地址：<a href="http://www.54tianzhisheng.cn/2017/10/14/Nexus3-Maven/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/10/14/Nexus3-Maven/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/cb4.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Maven-介绍&quot;&gt;&lt;a href=&quot;#Maven-介绍&quot; class=&quot;headerlink&quot; title=&quot;Maven 介绍&quot;&gt;&lt;/a&gt;Maven 介绍&lt;/h3&gt;&lt;p&gt;Apache Maven 是一个创新的软件项目管理和综合工具。&lt;br&gt;Maven 提供了一个基于项目对象模型（POM）文件的新概念来管理项目的构建，可以从一个中心资料片管理项目构建，报告和文件。&lt;br&gt;
    
    </summary>
    
    
      <category term="Maven" scheme="http://yoursite.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>JsonPath —— JSON 解析神器</title>
    <link href="http://yoursite.com/2017/10/13/JsonPath/"/>
    <id>http://yoursite.com/2017/10/13/JsonPath/</id>
    <published>2017-10-13T15:59:12.727Z</published>
    <updated>2017-10-13T16:16:21.962Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/cb3.jpeg-1" alt=""></p>
<p>真乃神器也，再复杂的 Json 都能给你解析出来，非常方便的获取 JSON 的内容，很强大！<br><a id="more"></a><br>语法简介</p>
<table>
<thead>
<tr>
<th><strong>JsonPath</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>$</td>
<td>根节点</td>
</tr>
<tr>
<td>@</td>
<td>当前节点</td>
</tr>
<tr>
<td>.or[]</td>
<td>子节点</td>
</tr>
<tr>
<td>..</td>
<td>选择所有符合条件的节点</td>
</tr>
<tr>
<td>*</td>
<td>所有节点</td>
</tr>
<tr>
<td>[]</td>
<td>迭代器标示，如数组下标</td>
</tr>
<tr>
<td>[,]</td>
<td>支持迭代器中做多选</td>
</tr>
<tr>
<td>[start:end:step]</td>
<td>数组切片运算符</td>
</tr>
<tr>
<td>?()</td>
<td>支持过滤操作</td>
</tr>
<tr>
<td>()</td>
<td>支持表达式计算</td>
</tr>
</tbody>
</table>
<p>JSON 值：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"store"</span>: &#123;</div><div class="line">    <span class="attr">"book"</span>: [</div><div class="line">      &#123; <span class="attr">"category"</span>: <span class="string">"reference"</span>,</div><div class="line">        <span class="attr">"author"</span>: <span class="string">"Nigel Rees"</span>,</div><div class="line">        <span class="attr">"title"</span>: <span class="string">"Sayings of the Century"</span>,</div><div class="line">        <span class="attr">"price"</span>: <span class="number">8.95</span></div><div class="line">      &#125;,</div><div class="line">      &#123; <span class="attr">"category"</span>: <span class="string">"fiction"</span>,</div><div class="line">        <span class="attr">"author"</span>: <span class="string">"Evelyn Waugh"</span>,</div><div class="line">        <span class="attr">"title"</span>: <span class="string">"Sword of Honour"</span>,</div><div class="line">        <span class="attr">"price"</span>: <span class="number">12.99</span>,</div><div class="line">        <span class="attr">"isbn"</span>: <span class="string">"0-553-21311-3"</span></div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"bicycle"</span>: &#123;</div><div class="line">      <span class="attr">"color"</span>: <span class="string">"red"</span>,</div><div class="line">      <span class="attr">"price"</span>: <span class="number">19.95</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>导包：<code>import com.jayway.jsonpath.JsonPath</code></p>
<p>解析代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//输出book[0]的author值</span></div><div class="line">String author = JsonPath.read(json, <span class="string">"$.store.book[0].author"</span>);</div><div class="line">System.out.println(<span class="string">"author\t"</span>+author);</div><div class="line"><span class="comment">//输出全部author的值，使用Iterator迭代</span></div><div class="line">List&lt;String&gt; authors = JsonPath.read(json, <span class="string">"$.store.book[*].author"</span>);</div><div class="line">System.out.println(<span class="string">"authors\t"</span>+authors);</div><div class="line"></div><div class="line"><span class="comment">//输出book[*]中category == 'reference'的book</span></div><div class="line">List&lt;Object&gt; books = JsonPath.read(json, <span class="string">"$.store.book[?(@.category == 'reference')]"</span>);</div><div class="line">System.out.println(<span class="string">"books\t"</span>+books);</div><div class="line"><span class="comment">//输出book[*]中category == 'reference'的book或者</span></div><div class="line">List&lt;Object&gt; books2 = JsonPath.read(json, <span class="string">"$.store.book[?(@.category == 'reference' || @.price&gt;10)]"</span>);</div><div class="line">System.out.println(<span class="string">"books2\t"</span>+books2);</div><div class="line"></div><div class="line"><span class="comment">//输出book[*]中category == 'reference'的book的author</span></div><div class="line">List&lt;Object&gt; books1 = JsonPath.read(json, <span class="string">"$.store.book[?(@.category == 'reference')].author"</span>);</div><div class="line">System.out.println(<span class="string">"books1\t"</span>+books1);</div><div class="line"></div><div class="line"><span class="comment">//输出book[*]中price&gt;10的book</span></div><div class="line">List&lt;Object&gt; b1 = JsonPath.read(json, <span class="string">"$.store.book[?(@.price&gt;10)]"</span>);</div><div class="line">System.out.println(<span class="string">"b1"</span>+b1);</div><div class="line"></div><div class="line"><span class="comment">//输出book[*]中含有isbn元素的book</span></div><div class="line">List&lt;Object&gt; b2 = JsonPath.read(json, <span class="string">"$.store.book[?(@.isbn)]"</span>);</div><div class="line">System.out.println(<span class="string">"b2"</span>+b2);</div><div class="line"></div><div class="line"><span class="comment">//输出该json中所有price的值</span></div><div class="line">List&lt;Double&gt; prices = JsonPath.read(json, <span class="string">"$..price"</span>);</div><div class="line">System.out.println(<span class="string">"prices"</span>+prices);</div><div class="line"></div><div class="line"><span class="comment">//输出该json中所有title的值</span></div><div class="line">List&lt;Double&gt; title = JsonPath.read(json, <span class="string">"$..title"</span>);</div><div class="line">System.out.println(<span class="string">"title"</span>+title);</div><div class="line"><span class="comment">//输出该json中book 0,1的值</span></div><div class="line">List&lt;Double&gt; book01 = JsonPath.read(json, <span class="string">"$..book[0,1]"</span>);</div><div class="line">System.out.println(<span class="string">"book01"</span>+book01);</div><div class="line"><span class="comment">/* //输出该json中book 0,1的值</span></div><div class="line">List&lt;Double&gt; book012 = JsonPath.read(json, "$..book[-2:]");</div><div class="line">System.out.println("book012"+book012);*/</div><div class="line"></div><div class="line"><span class="comment">//可以提前编辑一个路径，并多次使用它</span></div><div class="line">JsonPath path = JsonPath.compile(<span class="string">"$.store.book[*]"</span>);</div><div class="line">List&lt;Object&gt; b3 = path.read(json);</div><div class="line">System.out.println(<span class="string">"path\t"</span>+path+<span class="string">"\n"</span>+b3);</div></pre></td></tr></table></figure>
<p>用法比较简单，多使用几次就会使用了！文章主要参考网上！原谅很多天不跟博的我现在竟然这样水了这么一篇文章，哈哈！实在是忙！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/cb3.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;真乃神器也，再复杂的 Json 都能给你解析出来，非常方便的获取 JSON 的内容，很强大！&lt;br&gt;
    
    </summary>
    
    
      <category term="JSON" scheme="http://yoursite.com/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>Google Guava 缓存实现接口的限流</title>
    <link href="http://yoursite.com/2017/09/23/Guava-limit/"/>
    <id>http://yoursite.com/2017/09/23/Guava-limit/</id>
    <published>2017-09-23T07:30:59.463Z</published>
    <updated>2017-09-23T07:32:26.494Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/cb2.jpeg-1" alt=""><br><a id="more"></a></p>
<h3 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h3><p>最近项目中需要进行接口保护，防止高并发的情况把系统搞崩，因此需要对一个查询接口进行限流，主要的目的就是限制单位时间内请求此查询的次数，例如 1000 次，来保护接口。<br>参考了 <a href="http://www.jianshu.com/p/0d7ca597ebd2" target="_blank" rel="external">开涛的博客聊聊高并发系统限流特技</a> ，学习了其中利用 Google Guava 缓存实现限流的技巧，在网上也查到了很多关于 Google Guava 缓存的博客，学到了好多，推荐一个博客文章：<a href="http://ifeve.com/google-guava-cachesexplained/" target="_blank" rel="external">http://ifeve.com/google-guava-cachesexplained/</a>, 关于 Google Guava 缓存的更多细节或者技术，这篇文章讲的很详细；<br>这里我们并不是用缓存来优化查询，而是利用缓存，存储一个计数器，然后用这个计数器来实现限流。</p>
<h3 id="效果实验"><a href="#效果实验" class="headerlink" title="效果实验"></a>效果实验</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> LoadingCache&lt;Long, AtomicLong&gt; count = CacheBuilder.newBuilder().expireAfterWrite(<span class="number">1</span>, TimeUnit.SECONDS).build(<span class="keyword">new</span> CacheLoader&lt;Long, AtomicLong&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> AtomicLong <span class="title">load</span><span class="params">(Long o)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            <span class="comment">//System.out.println("Load call!");</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AtomicLong(<span class="number">0L</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>上面，我们通过 CacheBuilder 来新建一个 LoadingCache 缓存对象 count，然后设置其有效时间为 1 秒，即每 1 秒钟刷新一次；缓存中，key 为一个 long 型的时间戳类型，value 是一个计数器，使用原子性的 AtomicLong 保证自增和自减操作的原子性， 每次查询缓存时如果不能命中，即查询的时间戳不在缓存中，则重新加载缓存，执行 load 将当前的时间戳的计数值初始化为 0。这样对于每一秒的时间戳，能计算这一秒内执行的次数，从而达到限流的目的；<br>这是要执行的一个 getCounter 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCounter</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        <span class="keyword">return</span> counter++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们创建多个线程来执行这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">new</span> Thread()&#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        System.out.println(Counter.getCounter());</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">catch</span> (Exception e)</div><div class="line">                    &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;.start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样执行的话，执行结果很简单，就是很快地执行这个 for 循环，迅速打印 0 到 99 折 100 个数，不再贴出。<br>这里的 for 循环执行 100 个进程时间是很快的，那么现在我们要限制每秒只能有 10 个线程来执行 getCounter() 方法，该怎么办呢，上面讲的限流方法就派上用场了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> LoadingCache&lt;Long, AtomicLong&gt; count = CacheBuilder.newBuilder().expireAfterWrite(<span class="number">1</span>, TimeUnit.SECONDS).build(<span class="keyword">new</span> CacheLoader&lt;Long, AtomicLong&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> AtomicLong <span class="title">load</span><span class="params">(Long o)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                System.out.println(<span class="string">"Load call!"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AtomicLong(<span class="number">0L</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">static</span> <span class="keyword">long</span> limits = <span class="number">10</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getCounter</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//获取当前的时间戳作为key</span></div><div class="line">            Long currentSeconds = System.currentTimeMillis() / <span class="number">1000</span>;</div><div class="line">            <span class="keyword">if</span> (count.get(currentSeconds).getAndIncrement() &gt; limits) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> counter++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样一来，就可以限制每秒的执行数了。对于每个线程，获取当前时间戳，如果当前时间 (当前这 1 秒) 内有超过 10 个线程正在执行，那么这个进程一直在这里循环，直到下一秒，或者更靠后的时间，重新加载，执行 load，将新的时间戳的计数值重新为 0。<br>执行结果：<br><img src="http://img.blog.csdn.net/20160620150358906" alt=""><br>每秒执行 11 个（因为从 0 开始），每一秒之后，load 方法会执行一次；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">为了更加直观，我们可以让每个<span class="keyword">for</span>循环sleep一段时间：</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">new</span> Thread()&#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        System.out.println(Counter.getCounter());</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">catch</span> (Exception e)</div><div class="line">                    &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;.start();</div><div class="line">            Thread.sleep(<span class="number">100</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上述这样的情况下，一个线程如果遇到当前时间正在执行的线程超过 limit 值就会一直在 while 循环，这样会浪费大量的资源，我们在做限流的时候，如果出现这种情况，可以<strong>不进行 while 循环</strong>，而是直接抛出异常或者返回，来拒绝这次执行（查询），这样便可以节省资源。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本篇文章地址： <a href="http://www.54tianzhisheng.cn/2017/09/23/Guava-limit/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/09/23/Guava-limit/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/cb2.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Guava" scheme="http://yoursite.com/tags/Guava/"/>
    
  </entry>
  
  <entry>
    <title>面试过阿里等互联网大公司，我知道了这些套路</title>
    <link href="http://yoursite.com/2017/09/17/Interview-summary/"/>
    <id>http://yoursite.com/2017/09/17/Interview-summary/</id>
    <published>2017-09-16T17:28:43.398Z</published>
    <updated>2017-09-17T04:49:13.086Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/shanghai.jpeg-1" alt=""></p>
<a id="more"></a>
<h3 id="前面感谢一波"><a href="#前面感谢一波" class="headerlink" title="前面感谢一波"></a>前面感谢一波</h3><p>因为看到掘金在做秋招求职征文大赛，赞助商也有牛客网，自己前段时间也稍微写了篇博客总结我的大学生活，<a href="http://www.54tianzhisheng.cn/2017/08/26/recommend-books/" target="_blank" rel="external">那些年我看过的书 —— 致敬我的大学生活 —— Say Good Bye ！</a>  博客中稍微简单的介绍了下自己的求职，重点是推荐了下我自己看过的那些书籍，对我帮助真的很大。</p>
<p>如今借这么个机会，回馈掘金和牛客网，想想自己这一年在掘金也写过不少文章，从 0 个粉丝到如今被 11047 人（截止写此篇文章时）关注，有点小激动，竟然这么多粉，也不知道真正活跃的用户有多少。不管怎样，这一年在掘金还是收获很多的，不仅可以阅读到很多大神的文章，学习新的知识，而且还遇到了好几个不错的哥们，如今平常也有和他们交流，比如 ：<a href="https://juejin.im/user/5904c637b123db3ee479d923" target="_blank" rel="external">芋道源码</a> 老哥人就很不错，在上海还和老哥见过面，吃过饭，平常对我帮助也很大，会推荐一些很有用的书籍给我看。欢迎大家关注他的博客：<a href="http://vip.iocoder.cn/" target="_blank" rel="external">芋道源码的博客</a>   ，里面有好几系列的源码分析博客文章呢。至于牛客网，我就更是老用户了，印象中好像是大一的时候注册的，那时有空的话就会去上面刷几道基础题，写写题解，坚持了好久了，如今早已是红名了。（其实是水出来的，哈哈）在牛客网遇到的大神也是超多，好多朋友几乎都是通过牛客网认识的，那时早的时候一起在一群讨论问题，别提那场面了，震惊，我等弱渣瑟瑟发抖。感谢叶神，左神，牛妹！</p>
<p>说着说着，好像偏题了。<img src="http://ohfk1r827.bkt.clouddn.com/201612031957235746.gif" alt=""></p>
<p>正式进入话题吧！</p>
<h3 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h3><p>本篇秋招求职征文主要分享如下几方面：<strong>招聘职位需求套路</strong> 、<strong>招聘面试的套路</strong>、<strong>简历撰写套路</strong>、<strong>简历投递套路</strong> 、<strong>找工作经历</strong> 、<strong>自己面试面经</strong> 、<strong>实习感悟</strong>、<strong>书籍推荐</strong> 、<strong>优秀网站推荐</strong> 、<strong>优秀博客推荐</strong> 、<strong>求职资料放送</strong>。</p>
<h3 id="招聘职位需求套路"><a href="#招聘职位需求套路" class="headerlink" title="招聘职位需求套路"></a>招聘职位需求套路</h3><p>摘举下几个公司的招聘需求：（from lagou）</p>
<p>1、Java开发校招生( 有赞 )</p>
<blockquote>
<p>职位诱惑：<br>福利好待遇佳，技术氛围浓，有大牛带成长快<br>职位描述：</p>
<p>有赞2018校招官方网申地址（请在官网投递，勿直接在Lagou上投递）：<br><a href="https://job.youzan.com/campus" target="_blank" rel="external">https://job.youzan.com/campus</a><br>岗位职责</p>
<ol>
<li>我们拥有世界级的 SaaS 电商解决方案，每天处理几百万订单、几亿条消息，并且量级不断攀升；</li>
<li>我们开放了有赞云，连接了数十万开发者，大大提升了 SaaS 对商家产生的价值；</li>
<li>我们正在新零售的潮流中激流勇进、开疆拓土，用产品技术撬动巨大的市场；</li>
<li>而你的工作，就是参与这些大流量系统的研发，哪怕提升1%的性能和稳定性都将是激动人心的时刻。</li>
</ol>
<p>岗位要求</p>
<ol>
<li>2018届本科及以上学历应届毕业生，计算机或者软件工程相关专业；</li>
<li>具备扎实的计算机基础知识，至少熟练使用一门主流开发语言；</li>
<li>积极参与开发实践，如果拥有引以为豪的项目经历则加分；</li>
<li>热衷数据结构与算法，如果一不小心在 ACM 赛场摘过金，夺过银则加分；</li>
<li>能在 Linux 上写任何脚本，比王者荣耀上手还快则加分；</li>
<li>快速学习新鲜事物，自我驱动追求卓越，积极应对问题和变化。</li>
</ol>
</blockquote>
<p>2、京东居家生活事业部-汽车用品招聘实习生（2018届）</p>
<blockquote>
<p>职位诱惑：<br>京东商城</p>
<p>职位描述：<br>京东商城-汽车用品部门招聘实习生</p>
<p>我们需要这样的你：</p>
<ul>
<li>2018届毕业生（本科或硕士均可）</li>
<li>学习能力强</li>
<li>担当、抗压、接受变化</li>
<li>能长期实习（优秀者有转正机会）</li>
<li>需要一个大的平台来展示和发挥自己的能力</li>
</ul>
<p>你将收获：</p>
<ul>
<li>重新认识快速成长的自己</li>
<li>一份世界500强的实习经历</li>
<li>一群优秀的伙伴</li>
</ul>
</blockquote>
<p>3、爱奇艺 Java 实习生 - 游戏事业部</p>
<blockquote>
<p>要求：至少 6 个月以上每周三天以上实习。</p>
<ol>
<li>本科以上学历，计算机、软件工程相关专业；</li>
<li>基础扎实，熟悉 Java 编程，熟悉 Spring、MyBatis 等框架优先；</li>
<li>熟悉 SQL 语句，熟练使用 MySQL 数据库；</li>
<li>良好的沟通、表达、协调能力，富有激情，学习能力强；</li>
<li>有 GitHub 账号或者技术博客优先；</li>
<li>热爱游戏行业优先。</li>
</ol>
</blockquote>
<p>这里随便找了三个，从招聘需求里看，好多公司目前招聘的话在招聘需求中并不怎么会写的很清楚，有的也不会说明要求的技术栈，这其实有时会对我们这种新人来说，有点不好的，这样的话我们就没有明确的目标去复习，还有就是一些加分项，其实也是有点帮助的。就比如有些招聘上面的说有优秀博客和 GitHub 者优先，这两点的话我们其实可以在大学慢慢积累出来的，对面试确实有帮助，我好些面试机会都是靠这两个的。还有套路就是，别光信他这招聘需求，进去面试可能就不问你这些方面的问题了，那些公司几乎都是这么个套路：<strong>面试造火箭，入职拧螺丝</strong> ！  进去公司之前可能需要你懂很多东西，但是进去的话还只是专门做一方面的东西。不管怎样，如果你有机会进去大公司的话（而且适合去），还是去大公司吧，出来大厂光环不少。</p>
<ol>
<li>认真耐心地拧螺丝钉，说不定有机会去造大火箭——正规大公司的节奏。</li>
<li>短时间把螺丝拧出花，说不定有机会造小火箭——上升中创业公司的节奏。</li>
</ol>
<h3 id="招聘面试的套路"><a href="#招聘面试的套路" class="headerlink" title="招聘面试的套路"></a>招聘面试的套路</h3><p>参考：<a href="https://mp.weixin.qq.com/s/qRwDowetBkJqpeMeAZsIpA" target="_blank" rel="external">https://mp.weixin.qq.com/s/qRwDowetBkJqpeMeAZsIpA</a>    一个在掘金上认识的老哥，在京东工作，写的不错，干脆分享下。大家可以去看他的博客，<a href="http://mindwind.me/" target="_blank" rel="external">http://mindwind.me/</a>   当时我求职的时候通过作者博客也学到不少东西。</p>
<p>一次集中的扩招需求，有点像每年一度的晋升评审，都需要对大量的候选人进行定级评审，因为每一个新招聘的人员都会对其有一个定级的过程。</p>
<p>维度：</p>
<blockquote>
<ul>
<li>通用能力：考察其沟通表达、学习成长等</li>
<li>专业知识：考察其知识的掌握、深度、广度等</li>
<li>专业能力：考察其技能应用的能力和结果</li>
<li>工作业绩：考察其工作成果、产出、创新点等</li>
<li>价值观：考察其认知、理解、行为等</li>
</ul>
</blockquote>
<p>整个面试过程会包括下面几个部分：</p>
<p><strong>自我介绍</strong><br>一开始的简短自我介绍，考察点在于对自我的总结、归纳和认知能力。观察其表达的逻辑性和清晰性，有个整体印象。</p>
<p><strong>项目经历</strong><br>一般我不会专门问一些比较死的专业技术点之类的知识，都是套在候选人的项目经历和过往经验中穿插。通过其描述，来判断其掌握知识点的范围和深度，以及在实际的案例中如何运用这些知识与技能解决真正的问题的。</p>
<p>所以，不会有所谓的题库。每一个我决定面试的候选人，都是提前细读其简历，提炼场景和发掘需要问的问题，相当于面试前有个二三十分钟的备课过程，组织好面试时的交互过程与场景，以顺利达到我想要了解的点。</p>
<p><strong>团队合作</strong><br>通常还会问候选人其所在团队中的角色，他们的工作模式、协作方式，并给出一些真实的场景化案例观察其应对的反应。评价一下关于他周围的同事、下属或领导，了解他在团队中的自我定位。这里的考察点是沟通协作方面的通用能力。</p>
<p><strong>学习成长</strong><br>这个维度考察的关键点包括：成长潜力、职业生涯规划的清晰度。人与人之间成长速度的关键差距，我自己观察得出的结论在于：自驱力。而路径的清晰性，也是产生自驱的一个源动力，否则可能会感觉迷茫，而陷于困顿。</p>
<p><strong>文化匹配</strong><br>这算是价值观的一部分吧。其实，这是最难考核的，我没有什么好方法，基本靠感觉。曾经有过好几次碰到经历和技能都不错的人，但总是感觉哪里不对，但又着急要人，就放进来了。但最终感觉是对的，合作很快就结束了，人也走了。</p>
<p><strong>综合评价</strong><br>总结点评候选人的优势、劣势并进行技术定级，定级也没有绝对标准，而是相对的。我一般就是和周围觉得差不多级别的人的平均水准比较下，大概就会有一个技术级别的判断。</p>
<p><strong>套路</strong></p>
<p>招聘面试，其实是一个对人的筛选，而筛选的本质是匹配 —— 匹配人与职位。第一，你得非常清楚地理解，这个职位需要什么样属性的人。第二，确定你的候选人是否拥有这个职位要求的必须属性。那么，首先回答第一个问题，一般的职位需要什么样的属性？</p>
<p>属性，又可以进一步拆解为三个层次。第一层次是「技能（Skills）」，技能是你习得的一种工具，就像程序员会用某种语言和框架来编写某类应用程序。第二层次是「能力（Abilities）」，能力是你运用工具的思考和行为方式，用同样的语言和框架编写同样程序的程序员能力可以差别很大。而第三层次是「价值观（Values）」，价值观是一个人根深蒂固的信念以及驱动行为的原因与动力所在。</p>
<h3 id="简历撰写套路"><a href="#简历撰写套路" class="headerlink" title="简历撰写套路"></a>简历撰写套路</h3><p>参考：<a href="https://mp.weixin.qq.com/s/3f8hGAQ-auLdkxkQ8XG3CQ" target="_blank" rel="external">https://mp.weixin.qq.com/s/3f8hGAQ-auLdkxkQ8XG3CQ</a></p>
<p>简历，是如此重要，它是获得一份满意工作的敲门砖，但不同的简历敲门的声响可不同。</p>
<p>但很多时候简历给人的感觉也似乎微不足道，因为没有人会真正细致的去读一份简历。而仅仅是快速的浏览一遍，就几乎同时对一个候选人形成了一种要么强烈，要么无感的印象。现实中的真实情况是，你的简历只有十几二十秒的时间窗口机会会被浏览到，然后就决定了能否进入下一步。</p>
<p>要让面试官看了你的简历后：知道你做过什么？看看技能、经历与岗位需求的匹配度，然后再问问你是谁？你通过简历散发出来的味道是什么感觉，我愿意和这样的人一起共事么？</p>
<p>一份简历的最少必要内容包括：</p>
<blockquote>
<ul>
<li><p>个人信息</p>
</li>
<li><ul>
<li>姓名</li>
<li>年龄</li>
<li>手机</li>
<li>邮箱</li>
</ul>
</li>
<li><p>教育经历</p>
</li>
<li><ul>
<li>博士（硕士、本科） 有多个全部写出来，最高学历写在上面</li>
</ul>
</li>
<li><p>工作经历（最匹配职位需求的，挑选出来的 TOP3 的项目）</p>
</li>
<li><ul>
<li><p>项目1</p>
</li>
<li><ul>
<li>项目背景上下文（场景、问题）</li>
<li>你在其中的角色（职责、发挥的作用、结果度量）</li>
<li>与此项经历有关的知识与技能（技术栈）</li>
</ul>
</li>
<li><p>项目2</p>
</li>
<li><p>项目3</p>
</li>
</ul>
</li>
<li><p>附加信息</p>
</li>
<li><ul>
<li>博客：持续有内容，不碎碎念</li>
<li>开源：GitHub 持续 commit</li>
<li>社区：有一定专业影响力的</li>
<li>书籍：用心写的</li>
<li>演讲：行业大会级别的</li>
<li>专利：凑数的就算了</li>
<li>论文：学术界比较有影响力的</li>
<li>爱好：真正的兴趣点</li>
</ul>
</li>
</ul>
</blockquote>
<p>对于我们学生，缺乏工作经历，那就写写独特的学习或实习经历。同学们大家都共有的经历就不要随便写上去凑数了。对于学生，看重的是通用能力，学习能力，适应能力以及对工作的态度和热情。如果没有区分度高的经历，那么有作品也是很好的。比如将你的做的网站部署出来，把地址写在简历上。</p>
<p>关于技术栈部分的技术术语，很多程序员不太注意。比如，把 Java 写成 java 或 JAVA，Java 已是一个专有品牌名词，大小写要完全符合，这一点和 iOS 类似（i 小写，OS 大写）。另外，像 HTML，CSS 则全部大写，因为这是多个单词的缩写。一些小小的细节就能读出你的专业性和散发出来的味道。最后，技术术语不是罗列得多就好，不是真正熟练的技能，不要轻易写进简历。因为这将给你自己挖坑。你可以将你自己擅长的或者很熟的知识点写进去，有时想着重就加粗或者打个括号，这样可以挖坑给面试官，让他去问你熟悉的（前提要确保你真的能讲清楚，我试过这个方法很有效的）。</p>
<p>然后就是简历格式了，最好是 PDF 了，Word 在不同的电脑上的打开效果可能不一样，格式可能会变，况且有些人的电脑不一定装了 Word，不过我喜欢用 Markdown 写简历，简洁，适合程序员，然后把 Markdown 转换成 PDF 出来。</p>
<h3 id="简历投递套路"><a href="#简历投递套路" class="headerlink" title="简历投递套路"></a>简历投递套路</h3><p><strong>内推</strong></p>
<p>有内推通道尽量走内推通道，不知道方便多少，而且成功几率也很大！找熟人，找学长学姐吧！牛客网讨论区很多内推帖子，可以去找找。不过今年的好多公司的内推通道都不咋管用了，套路越来越多了。记得去年好多公司内推都是免笔试，直接进入面试阶段，今年直接变成内推免简历筛选，进入笔试。因为现在的内推越来越不靠谱，直接面试的话，会增加公司的面试成本，干脆笔试再筛选一部分人。</p>
<p><strong>拉勾网</strong></p>
<p>拉勾上还是算不错的。</p>
<p><strong>Boss 直聘</strong></p>
<p>虽说前段时间出现了程序员找工作进入传销最后导致死亡的惨事发生，但是里面总比智联招聘和前程无忧靠谱点。因为智联招聘和前程无忧几乎被广告党和培训机构给占领了。</p>
<p><strong>脉脉</strong></p>
<p>里面招应届生和实习生比较少，但是也有，可以试试。</p>
<p>总之，简历投递给公司之前，请确认下这家公司到底咋样，先去百度了解下，别被坑了，每个平台都有一些居心不良的广告党等着你上钩，千万别上当！！！</p>
<h3 id="找工作经历"><a href="#找工作经历" class="headerlink" title="找工作经历"></a>找工作经历</h3><p>这段经历，算是自己很难忘记的经历吧。既辛酸既充实的日子！也很感谢自己在这段时间的系统复习，感觉把自己的基础知识再次聚集在一起了，自己的能力在这一段时间提升的也很快。后面有机会的话我也想写一系列的相关文章，为后来准备工作（面试）的同学提供一些自己的帮助。自己在找工作的这段时间面过的公司也有几家大厂，但是结果都不是很好，对我自己有很大的压力，当时心里真的感觉 ：“自己真的有这么差”，为什么一直被拒，当时很怀疑自己的能力，自己也有总结原因。一是面试的时候自己准备的还不够充分，虽说自己脑子里对这些基础有点印象，但是面试的时候自己稍紧张下就描述不怎么清楚了，导致面试官觉得你可能广度够了，深度还不够（这是阿里面试官电话面试说的）；二是自己的表达能力还是有所欠缺，不能够将自己所要表达的东西说出来，这可能我要在后面加强的地方；三是我的学校问题。在面了几家公司失败后，终于面了家公司要我了，我也确定在这家公司了。很幸运，刚出来，就有一个很好（很负责）的架构师带我，这周就给了我一个很牛逼的项目给我看，里面新东西很多，说吃透了这个项目，以后绝对可以拿出去吹逼（一脸正经.jpg）。找工作期间，自己也经常去收集一些博客，并把它保存下来，这样能够让自己下次更好的系统复习，还在牛客网整理了很多面经，每天看几篇面经，知道面试一般问什么问题，都有啥套路，其实你看多了面经就会发现，面试考的题目几乎都差不多，区别不是很大。目前我的找工作经历就简短的介绍到这里了，如果感兴趣的话，可以加群：528776268   期待志同道合的你。</p>
<h3 id="自己面试面经"><a href="#自己面试面经" class="headerlink" title="自己面试面经"></a>自己面试面经</h3><h4 id="亚信"><a href="#亚信" class="headerlink" title="亚信"></a>亚信</h4><p>地址：<a href="http://www.54tianzhisheng.cn/2017/08/04/yaxin/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/08/04/yaxin/</a></p>
<p>1）自我介绍（说到一个亮点：长期坚持写博客，面试官觉得这个习惯很好，算加分项吧）</p>
<p>2）看到简历项目中用到 Solr，详细的问了下 Solr（自己介绍了下 Solr 的使用场景和建立索引等东西）</p>
<p>3）项目里面写了一个 “ 敏感词和 JS 标签过滤防 XSS 攻击”，面试官让我讲了下这个 XSS 攻击，并且是怎样实现的</p>
<p>4）项目里写了支持 Markdown，问是不是自己写的解析代码，（回答不是，自己引用的是 GitHub上的一个开源项目解析的）</p>
<p>5）想问我前端的知识，我回复到：自己偏后端开发，前端只是了解，然后面试官就不问了</p>
<p>6）问我考不考研？</p>
<p>7）觉得杭州怎么样？是打算就呆在杭州还是把杭州作为一个跳板？</p>
<p>8）有啥小目标？以后是打算继续技术方向，还是先技术后管理（还开玩笑的说：是不是赚他几个亿，当时我笑了笑）</p>
<p>9）有啥兴趣爱好？</p>
<p><strong>总结</strong>：面试问的问题不算多，主要是通过简历上项目所涉及的东西提问的，如果自己不太会的切记不要写上去。面试主要考察你回答问题来判断你的逻辑是否很清楚。</p>
<h4 id="爱奇艺"><a href="#爱奇艺" class="headerlink" title="爱奇艺"></a>爱奇艺</h4><p>地址：<a href="http://www.54tianzhisheng.cn/2017/08/04/iqiyi/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/08/04/iqiyi/</a></p>
<h5 id="笔试（半个小时）"><a href="#笔试（半个小时）" class="headerlink" title="笔试（半个小时）"></a>笔试（半个小时）</h5><p>题目：（记得一些）</p>
<p>1、重载重写的区别？</p>
<p>2、转发和重定向的区别？</p>
<p>3、画下 HashMap 的结构图？HashMap 、 HashTable 和 ConcurrentHashMap 的区别？</p>
<p>4、statement 和 preparedstatement 区别？</p>
<p>5、JSP 中一个 <c:value> 中取值与直接取值的区别？会有什么安全问题？</c:value></p>
<p>6、实现一个线程安全的单例模式</p>
<p>7、一个写 sql 语句的题目</p>
<p>8、自己实现一个 List，（主要实现 add等常用方法）</p>
<p>9、Spring 中 IOC 和 AOP 的理解？</p>
<p>10、两个对象的 hashcode 相同，是否对象相同？equal() 相同呢？</p>
<p>11、@RequestBody 和 @ResponseBody 区别？</p>
<p>12、JVM 一个错误，什么情况下会发生？</p>
<p>13、常用的 Linux 命令？</p>
<h5 id="第一轮面试（80-分钟）"><a href="#第一轮面试（80-分钟）" class="headerlink" title="第一轮面试（80 分钟）"></a>第一轮面试（80 分钟）</h5><p>1、自我介绍</p>
<p>2、介绍你最熟悉的一个项目</p>
<p>3、讲下这个 XSS 攻击</p>
<p>4、HashMap 的结构？HashMap 、 HashTable 和 ConcurrentHashMap 的区别？</p>
<p>5、HashMap 中怎么解决冲突的？（要我详细讲下）</p>
<p>6、ConcurrentHashMap 和 HashTable 中线程安全的区别？为啥建议用 ConcurrentHashMap ？能把 ConcurrentHashMap  里面的实现详细的讲下吗？</p>
<p>7、Session 和 Cookie 的区别？</p>
<p>8、你项目中登录是怎样做的，用的 Cookie 和 Session？</p>
<p>9、讲讲你对 Spring 中的 IOC 和 AOP 的理解？</p>
<p>10、问了好几个注解的作用？</p>
<p>11、statement 和 preparedstatement 区别？</p>
<p>12、$ 和 # 的区别？以及这两个在哪些地方用？</p>
<p>13、前面项目介绍了数据是爬虫爬取过来的，那你讲讲你的爬虫是多线程的吧？</p>
<p>14、讲讲 Python 中的多线程和 Java 中的多线程区别？</p>
<p>15、自己刚好前几天在看线程池，立马就把面试官带到我熟悉的线程池，和面试官讲了下 JDK 自带的四种线程池、ThreadPoolExecutor 类中的最重要的构造器里面的七个参数，然后再讲了下线程任务进入线程池和核心线程数、缓冲队列、最大线程数量比较。</p>
<p>16、线程同步，你了解哪几种方式？</p>
<p>17、讲下 Synchronized？</p>
<p>18、讲下 RecentLock 可重入锁？ 什么是可重入锁？为什么要设计可重入锁？</p>
<p>19、讲下 Volatile 吧？他是怎样做到同步的？</p>
<p>20、Volatile 为什么不支持原子性？举个例子</p>
<p>21、Atomic 怎么设计的？（没看过源码，当时回答错了，后来才发现里面全部用 final 修饰的属性和方法）</p>
<p>22、问几个前端的标签吧？（问了一个不会，直接说明我偏后端，前端只是了解，后面就不问了）</p>
<p>23、SpringBoot 的了解？</p>
<p>24、Linux 常用命令？</p>
<p>25、JVM 里的几个问题？</p>
<p>26、事务的特性？</p>
<p>27、隔离级别？</p>
<p>28、网络状态码？以 2、3、4、5 开头的代表什么意思。</p>
<p>29、并发和并行的区别？</p>
<p>30、你有什么问题想问我的？</p>
<p>一面面完后面试官和说这份试卷是用来考 1~3 年开发工作经验的，让我准备一下，接下来的二面。</p>
<h5 id="第二轮面试（半个小时）"><a href="#第二轮面试（半个小时）" class="headerlink" title="第二轮面试（半个小时）"></a>第二轮面试（半个小时）</h5><p>1、一上来就问怎么简历名字都没有，我指了简历第一行的我的名字，还特意大写了，然后就问学校是不是在上海，我回答在南昌（感觉被鄙视了一波，后面我在回答问题的时候面试官就一直在玩手机，估计后面对我的印象就不是很好了）</p>
<p>2、自我介绍</p>
<p>3、说一说数据库建表吧（从范式讲）</p>
<p>4、讲讲多态？（这个我答出来了，可是面试官竟然说不是这样吧，可能面试官没听请，后面还说我是不是平时写多态比较少，感觉这个也让面试官对我印象减分）</p>
<p>5、将两个数转换（不借助第三个参数）</p>
<p>6、手写个插入排序吧（写完了和面试官讲了下执行流程）</p>
<p>7、讲讲你对 Spring 中的 IOC 和 AOP 的理解？</p>
<p>8、问了几个常用的 Linux 命令？</p>
<p>9、也问到多线程？和一面一样把自己最近看的线程池也讲了一遍</p>
<p>10、学 Java 多久了？</p>
<p>11、你有什么想问的？</p>
<h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>面试题目大概就是这么多了，有些问题自己也忘记了，面试题目顺序不一定是按照上面所写的。再次感谢爱奇艺的第一面面试官了，要不是他帮忙内推的，我可能还没有机会收到面试机会。自己接到爱奇艺面试邀请电话是星期一晚上快7点中的，之后加了面试官微信约好了星期四面试的（时间准备较短，之前没系统的复习过）。星期四一大早（5点就起床了），然后就收拾了下，去等公交车，转了两次车，然后再做地铁去爱奇艺公司的，总共路上花费时间四个多小时。总的来说，这次面试准备的时间不是很充裕，所以准备的个人觉得不是很好，通过这次的面试，发现面试还是比较注重基础和深度的，我也知道了自己的一些弱处，还需要在哪里加强，面试技巧上也要掌握些。为后面的其他公司继续做好充足的准备。加油！！！</p>
<h4 id="阿里"><a href="#阿里" class="headerlink" title="阿里"></a>阿里</h4><p>地址：<a href="http://www.54tianzhisheng.cn/2017/08/04/alibaba/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/08/04/alibaba/</a></p>
<p>（菜鸟网络部门）（49 分钟）</p>
<p>2017.08.02   晚上9点21打电话过来，预约明天什么时候有空面试，约好第二天下午两点。</p>
<p>2017.08.03   下午两点10分打过来了。</p>
<p>说看了我的<a href="http://www.54tianzhisheng.cn/" target="_blank" rel="external">博客</a>和 <a href="https://github.com/zhisheng17" target="_blank" rel="external">GitHub</a>，觉得我学的还行，知识广度都还不错，但是还是要问问具体情况，为什么没看到你春招的记录，什么原因没投阿里？非得说一个原因，那就是：我自己太菜了，不敢投。</p>
<p>1、先自我介绍</p>
<p>2、什么是多态？哪里体现了多态的概念？</p>
<p>3、HashMap 源码分析，把里面的东西问了个遍？最后问是不是线程安全？引出 ConcurrentHashMap</p>
<p>4、ConcurrentHashMap 源码分析</p>
<p>5、类加载，双亲委托机制</p>
<p>6、Java内存模型（一开始说的不是他想要的，主要想问我堆和栈的细节）</p>
<p>7、垃圾回收算法</p>
<p>8、线程池，自己之前看过，所以说的比较多，最后面试官说了句：看你对线程池了解还是很深了</p>
<p>9、事务的四种特性</p>
<p>10、什么是死锁？</p>
<p>11、乐观锁和悲观锁的策略</p>
<p>12、高可用网站的设计（有什么技术实现）</p>
<p>13、低耦合高内聚</p>
<p>14、设计模式了解不？你用过哪几种，为什么用，单例模式帮我们做什么东西？有什么好处？</p>
<p>15、你参与什么项目中成长比较快？学到了什么东西，以前是没有学过的？</p>
<p>16、项目中遇到的最大困难是怎样的？是怎么解决的？</p>
<p>17、智力题（两根不均匀的香，点一头烧完要一个小时，怎么确定15分钟）</p>
<p>18、你有什么问题想要问我的？</p>
<p>19、问了菜鸟网络他们部门主要做什么？</p>
<p>20、对我这次面试做个评价：看了你<a href="http://www.54tianzhisheng.cn/" target="_blank" rel="external">博客</a>和 <a href="https://github.com/zhisheng17" target="_blank" rel="external">GitHub</a>，知道你对学习的热情还是很高的，花了不少功夫，后面有通知！</p>
<p><strong>总结</strong>：面试总的来说，第一次电话面试，感觉好紧张，好多问题自己会点，但是其中的细节没弄清楚，自己准备的也不够充分。面试官很友好，看到我紧张，也安慰我说不要紧，不管以后出去面试啥的，不需要紧张，公司问的问题可能很广，你只需要把你知道的说出来就行，不会的直接说不会就行。之前一直不敢投阿里，因为自己准备的完全不够充分，但是在朋友磊哥的帮助下，还是试了下，不管结果怎么样，经历过总比没有的好。</p>
<p>后面说有通知，结果并没有，只看到官网的投递按钮变灰了。在掘金上一个朋友（我隔壁学校的），当时看我挂了说要不要让他租一起的隔壁邻居再内推下淘宝，我想想还是算了，自己目前能力真的是有限，达不到进阿里的要求！不过还是要感谢那个哥们，人真的超级好，虽然我们未曾谋面，但是有机会的话，我一定会请你吃饭的。</p>
<h4 id="哔哩哔哩"><a href="#哔哩哔哩" class="headerlink" title="哔哩哔哩"></a>哔哩哔哩</h4><p>首先直接根据简历项目开问，自我介绍都没有。</p>
<p>1、登录从前端到后端整个过程描述一遍？越详细越好，说到密码加密，网络传输，后台验证用户名和密码，Cookie 设置等。具体问我密码加密是前台还是后台加密，说了在后台加密？面试官说，那你做这个项目有什么意思？密码传输都是明文的，默认 HTTP 传递是明文传输，当时被面试官带进前台加密还是后台加密的沟里去了，没想到用 HTTPS ，后来后来的路上查了些资料才知道的，面试过程中他很想我说前台加密，但是前台加密算法那代码就摆在那里，很容易就给破解了吧，也没给点提示说 HTTPS，我只好投降</p>
<p>2、写一个查询的 sql 语句</p>
<p>3、线程同步的方法？Synchronized、Volatile、（面试官好像觉得 Volatile 不可以做到同步，我和他说了半天的 Volatile 原理 ，他竟然不认同，我开始怀疑他的实力了）、ThreadLocal、Atomic。</p>
<p>说到这些了，我当时竟然没把他带进我我给他挖的坑里去（线程池，之前好好研究过呢，可惜了）</p>
<p>4、Spring IOC 和 AOP 的理解？叫我写 AOP 的代码，我没写</p>
<p>5、JDK 动态代理和 Cglib 代理区别？</p>
<p>5、你觉得项目里面你觉得哪些技术比较好？我指了两个，然后他也没有问下去。</p>
<p>6、解释下 XSS 攻击</p>
<p>7、Spring 和 SpringBoot 的区别？</p>
<p>8、JVM 垃圾回收算法？分代中为什么要分三层？</p>
<p>9、OOM 是什么？什么情况会发生？</p>
<p>10、你觉得你有啥优点？</p>
<p>然后就叫我等一会，一会有人事来通知我，结果过了一会人事叫我可以回去等通知了。</p>
<p><strong>总结</strong>：到公司的时候已经一点多钟了，面试直接在一个很多人的地方（吃饭的地方）直接面的，周围还有人再吃饭，场景有点尴尬，面试过程感觉很随意，想到什么问题就问什么，完全没有衔接，问到的有些地方感觉面试官自己都不清楚，还怀疑我所说的，另外就是问题比较刁钻，总体技术也就那样吧！</p>
<h4 id="目前所在公司"><a href="#目前所在公司" class="headerlink" title="目前所在公司"></a>目前所在公司</h4><p>当时是我现在的老大（架构师）面的，先是电话面试过一次，问的问题也比较难，不过最后还是觉得我基础还是不错的。最后叫我去公司面试下，来到公司面试问的问题那就更难了，几乎好多都回答不出来，但是简单的说了下思路，最后再叫主任面试了下，问的问题就很简单了，最后就是  HR 面了，主要说了下工资问题和什么时候能报道！这几次面试的问题当时由于时间比较紧，也没去整理，现在也记不清楚了！目前自己已经工作了快一个月了，给的项目也完全是新东西，对我的挑战也很大，有时自己也确实不怎么知道，不过我老大很耐心的教我，对我也很不错，这也是我打算留在这里的原因，碰到个好老大不易！必须好好珍惜！</p>
<h3 id="实习感悟"><a href="#实习感悟" class="headerlink" title="实习感悟"></a>实习感悟</h3><p>进公司是架构运维组中的 Java 实习开发，目前实习已经快一个月了，说实话，实习后才发现一天真的很忙，写下这篇征文也是在周末整理大晚上写的。刚进公司就给了一个 Consul 的服务发现与注册和健康检查的项目，里面涉及的东西有 Consul、Docker、Nginx、Lua、ElasticSearch 还有几个很轻量级的框架，对我来说几乎都是新东西，确实需要时间去了解，再优化和改里面的 bug 的过程中，幸好我老大和我理了几次思路，才让我对整个项目有所进展，后续继续是在优化这项目（可能以后这个项目的所有东西都是我来做）。在上海，住的地方离公司有一定的距离，上班几乎要一个小时，每天花在上班路上的时间很多，这也导致我每天感觉很忙。公司上班时间比较弹性，无打卡，虽说公司不加班，但是每天自己都不怎么会按点下班，自己也想在实习阶段多学点东西！这段时间也是最关键的时间，碰到个问题，要花好久时间才能解决，也有可能未必解决得了，有时觉得自己啥都不会，这么点东西都做不好，有点否定自己。这也确实是自己的技术知识栈缺乏，和自己学的 SSM、Spring Boot 这些都不相关，也不怎么写业务逻辑代码。所以感觉很痛苦，不像自己以前写的代码那样顺畅，当然可能是自己以前自己写的项目太 low 了。</p>
<p>看到掘金-凯伦征文中写到：</p>
<blockquote>
<p><strong>公司其实并不期望刚刚进来的你，能够创造多少价值。新人是要成长的，在成长期难免会遇到各种各样的小问题，这可能是大多数人的必经之路，因为你所看到的同事，他们都比你在工作领域待的时间更久，有更多的经验，可以把他们作为目标，但不要把他们作为现在自己的标准，那样会压力太大。</strong></p>
</blockquote>
<p>感觉这段话对我现在很受用！ <strong>加油，好好挺过这个阶段，别轻易说放弃！</strong></p>
<h3 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h3><p>大学，我不怎么喜欢玩游戏，自己也还算不怎么堕落吧，看了以下的一些书籍，算是对我后面写博客、找工作也有很大的帮助。如果你是大神，请忽略，如果你还是还在大学，和我一样不想把时间浪费在游戏上，可以看看我推荐的一些书籍，有想讨论的请在评论下留下你的评论或者加上面给的群号。</p>
<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>1、《Java 核心技术》卷一 、卷二              两本书，算是入门比较好的书籍了</p>
<p>2、《疯狂 Java 讲义》                                很厚的一本书，里面的内容也是很注重基础了</p>
<p>3、《Java 并发编程的艺术》——  方腾飞 、魏鹏、程晓明著        方腾飞 是并发编程网的创始人，里面的文章确实还不错，可以多看看里面的文章，收获绝对很大。</p>
<p>4、《 Java多线程编程核心技术》——  高洪岩著   这本书也算是入门多线程编程的不错书籍，我之前还写了一篇读书笔记呢，<a href="http://www.54tianzhisheng.cn/2017/06/04/Java-Thread/" target="_blank" rel="external">《Java 多线程编程核心技术》学习笔记及总结</a>  , 大家如果不想看书的可以去看我的笔记。</p>
<p>5、《Java 并发编程实战》 这本书讲的有点难懂啊，不过确实也是一本很好的书，以上三本书籍如果都弄懂了，我觉得你并发编程这块可能大概就 OK 了，然后再去看看线程池的源码，了解下线程池，我觉得那就更棒了。不想看的话，请看我的博客：<a href="http://www.54tianzhisheng.cn/2017/07/29/ThreadPool/" target="_blank" rel="external">Java 线程池艺术探索</a>  我个人觉得还是写的很不错，那些大厂面试也几乎都会问线程池的东西，然后大概内容也就是我这博客写的</p>
<p>6、《Effective Java》中文版 第二版       算是 Java 的进阶书籍了，面试好多问题也是从这出来的</p>
<p>7、《深入理解 Java 虚拟机——JVM高级特性与最佳实践》第二版     这算是国内讲 JVM 最清楚的书了吧，目前还是只看了一遍，后面继续啃，大厂面试几乎也是都会考 JVM 的，阿里面 JVM 特别多，想进阿里的同学请一定要买这本书去看。</p>
<p>8、《深入分析Java  Web技术内幕  修订版》许令波著   里面知识很广，每一章都是一个不同的知识，可见作者的优秀，不愧是阿里大神。</p>
<p>9、《大型网站系统与 Java 中间件实践》—— 曽宪杰 著    作者是前淘宝技术总监，见证了淘宝网的发展，里面的讲的内容也是很好，看完能让自己也站在高处去思考问题。</p>
<p>10、《大型网站技术架构 —— 核心原理与案例分析》 —— 李智慧 著   最好和上面那本书籍一起看，效果更好，两本看完了，提升思想的高度！</p>
<p>11、《疯狂Java.突破程序员基本功的16课》 李刚 著       书中很注重 Java 的一些细节，讲的很深入，但是书中的错别字特多，可以看看我的读书笔记：<a href="http://www.54tianzhisheng.cn/2017/05/31/Java-16-lession/" target="_blank" rel="external">《疯狂 Java 突破程序员基本功的 16 课》读书笔记</a></p>
<p>12、《Spring 实战》   Spring 入门书籍</p>
<p>13、《Spring 揭秘》—— 王福强  著   这本书别提多牛了，出版时期为 2009 年，豆瓣评分为 9.0 分，写的是真棒！把 Spring 的 IOC 和 AOP 特性写的很清楚，把 Spring 的来龙去脉讲的很全。墙裂推荐这本书籍，如果你想看 Spring，作者很牛，资深架构师，很有幸和作者有过一次交流，当时因为自己的一篇博客  <a href="http://www.54tianzhisheng.cn/2017/03/27/Pyspider%E6%A1%86%E6%9E%B6%20%E2%80%94%E2%80%94%20Python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E4%B9%8B%E7%88%AC%E5%8F%96%20V2EX%20%E7%BD%91%E7%AB%99%E5%B8%96%E5%AD%90/" target="_blank" rel="external">Pyspider框架 —— Python爬虫实战之爬取 V2EX 网站帖子</a>，竟然找到我想叫我去实习，可惜了，当时差点就跟着他混了。作者还有一本书  《Spring Boot 揭秘》。</p>
<p>14、《Spring 技术内幕》—— 深入解析 Spring 架构与设计原理     讲解 Spring 源码，深入了内部机制，个人觉得还是不错的。</p>
<p>15、Spring 官方的英文文档          这个别提了，很好，能看英文尽量看英文</p>
<p>16、《跟开涛学 Spring 3》  《跟开涛学 Spring MVC》  京东大神，膜</p>
<p>17、《看透springMvc源代码分析与实践》    算是把 Spring MVC 源码讲的很好的了</p>
<p>见我的笔记：</p>
<p><a href="http://www.54tianzhisheng.cn/2017/07/09/servlet/" target="_blank" rel="external">1、通过源码详解 Servlet</a></p>
<p><a href="http://www.54tianzhisheng.cn/2017/07/14/Spring-MVC01/" target="_blank" rel="external">2 、看透 Spring MVC 源代码分析与实践 —— 网站基础知识</a></p>
<p><a href="http://www.54tianzhisheng.cn/2017/07/14/Spring-MVC02/" target="_blank" rel="external">3 、看透 Spring MVC 源代码分析与实践 —— 俯视 Spring MVC</a></p>
<p><a href="http://www.54tianzhisheng.cn/2017/07/21/Spring-MVC03/" target="_blank" rel="external">4 、看透 Spring MVC 源代码分析与实践 —— Spring MVC 组件分析</a></p>
<p>18、《Spring Boot 实战》</p>
<p>19、Spring Boot 官方 Reference Guide        网上好多写 SpringBoot 的博客，几乎和这个差不多。</p>
<p>20、《JavaEE开发的颠覆者: Spring Boot实战》</p>
<p>21、MyBatis 当然是官方的文档最好了，而且还是中文的。</p>
<p>自己也写过几篇文章，帮助过很多人入门，传送门：</p>
<p>1、<a href="http://www.54tianzhisheng.cn/2017/03/28/%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%80%90%E6%AD%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Mybatis(%E4%B8%80" target="_blank" rel="external">通过项目逐步深入了解Mybatis（一）</a>/)</p>
<p>2、<a href="http://www.54tianzhisheng.cn/2017/03/28/%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%80%90%E6%AD%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Mybatis(%E4%BA%8C" target="_blank" rel="external">通过项目逐步深入了解Mybatis（二）</a>/)</p>
<p>3、<a href="http://www.54tianzhisheng.cn/2017/03/28/%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%80%90%E6%AD%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Mybatis(%E4%B8%89" target="_blank" rel="external">通过项目逐步深入了解Mybatis（三）</a>/)</p>
<p>4、<a href="http://www.54tianzhisheng.cn/2017/03/28/%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%80%90%E6%AD%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Mybatis(%E5%9B%9B" target="_blank" rel="external">通过项目逐步深入了解Mybatis（四）</a>/)</p>
<p>22、《深入理解 Java 内存模型》—— 程晓明 著      我觉得每个 Java 程序员都应该了解下 Java 的内存模型，该书籍我看的是电子版的，不多，但是讲的却很清楚，把重排序、顺序一致性、Volatile、锁、final等写的很清楚。</p>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>《鸟哥的Linux私房菜 基础学习篇(第三版)  》</p>
<p>鸟哥的Linux私房菜：服务器架设篇(第3版)    鸟哥的书</p>
<h4 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h4><p>《计算机网络第六版——谢希仁 编》</p>
<p>《计算机网络自顶向下方法》</p>
<h4 id="计算机系统"><a href="#计算机系统" class="headerlink" title="计算机系统"></a>计算机系统</h4><p>《代码揭秘：从C／C.的角度探秘计算机系统 —— 左飞》</p>
<p>《深入理解计算机系统》</p>
<p>《计算机科学导论_佛罗赞》</p>
<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>《高性能MySQL》</p>
<p>《Mysql技术内幕InnoDB存储引擎》</p>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p>这门语言语法很简单，上手快，不过我目前好久没用了，都忘得差不多了。当时是看的廖雪峰的 Python 博客</p>
<p>自己也用 Python 做爬虫写过几篇博客，不过有些是在前人的基础上写的。感谢那些栽树的人！</p>
<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>Git   ： 廖雪峰的 Git 教程</p>
<p>IDEA：<a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial" target="_blank" rel="external">IntelliJ IDEA 简体中文专题教程</a></p>
<p>Maven：《Maven实战》</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>《如何高效学习-斯科特杨》   教你怎样高效学习的</p>
<p>《软技能：代码之外的生存指南》    程序员除了写代码，还得懂点其他的软技能。</p>
<p>《提问的智慧“中文版”》</p>
<p><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way" target="_blank" rel="external">《How-To-Ask-Questions-The-Smart-Way》</a>   作为程序员的你，一定要学会咋提问，不然别人都不想鸟你。</p>
<h3 id="优秀网站推荐"><a href="#优秀网站推荐" class="headerlink" title="优秀网站推荐"></a>优秀网站推荐</h3><p>1、GitHub     别和我说不知道</p>
<p>2、InfoQ        文章很不错</p>
<p>3、CSDN    经常看博客专家的博客，里面大牛很多，传送门：<a href="http://blog.csdn.net/tzs_1041218129" target="_blank" rel="external">zhisheng</a></p>
<p>4、知乎         多关注些大牛，看他们吹逼</p>
<p>5、掘金        自己也在上面写专栏，粉丝已经超过一万了，传送门 ：<a href="https://juejin.im/user/57510b82128fe10056ca70fc" target="_blank" rel="external">zhisheng</a></p>
<p>6、并发编程网    前面已经介绍</p>
<p>7、developerworks     上面的博客也很好</p>
<p>8、博客园        里面应该大牛也很多，不过自己没在上面写过博客</p>
<p>9、微信公众号    关注了很多人，有些人的文章确实很好，平时也经常看。</p>
<p>10、牛客网        刷笔试题不错的地方，里面大牛超多，怀念叶神和左神讲课的时候，还有很有爱的牛妹。</p>
<h3 id="优秀博客推荐"><a href="#优秀博客推荐" class="headerlink" title="优秀博客推荐"></a>优秀博客推荐</h3><p><a href="https://www.liaoxuefeng.com/" target="_blank" rel="external">廖雪峰</a>  Git 和 Python 入门文章就是从他博客看的</p>
<p><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">阮一峰的网络日志</a></p>
<p><a href="https://coolshell.cn/" target="_blank" rel="external">酷壳-陈皓</a></p>
<p><a href="https://www.zhihu.com/people/rednaxelafx/answers" target="_blank" rel="external">RednaxelaFX</a>   R大，牛逼的不得了</p>
<p><a href="http://calvin1978.blogcn.com/" target="_blank" rel="external">江南白衣</a>      老司机</p>
<p><a href="http://stormzhang.com/" target="_blank" rel="external">stormzhang</a>     人称帅逼张，微信公众号写的不错</p>
<p><a href="http://lovestblog.cn/" target="_blank" rel="external">你假笨</a>    阿里搞 JVM 的，很厉害</p>
<p><a href="http://www.jianshu.com/u/90ab66c248e6" target="_blank" rel="external">占小狼</a></p>
<p><a href="http://www.bysocket.com/" target="_blank" rel="external">泥瓦匠BYSocket</a></p>
<p><a href="http://cuiqingcai.com/" target="_blank" rel="external">崔庆才</a>   写了好多 Python 爬虫相关的文章</p>
<p><a href="http://www.ityouknow.com/" target="_blank" rel="external">纯洁的微笑</a>    SpringBoot 系列不错，其他的文章自己看了感觉是自己喜欢的那种文笔</p>
<p><a href="http://blog.didispace.com/" target="_blank" rel="external">程序猿DD</a></p>
<p><a href="http://itmuch.com/" target="_blank" rel="external">周立</a></p>
<p><a href="http://vip.iocoder.cn/" target="_blank" rel="external">芋道源码的博客</a>     好多系列的源码分析</p>
<p><a href="http://www.54tianzhisheng.cn/" target="_blank" rel="external">zhisheng</a>       这个是我不要脸，竟然把自己博客地址的写上去了</p>
<h3 id="求职资料放送"><a href="#求职资料放送" class="headerlink" title="求职资料放送"></a>求职资料放送</h3><p>自己在准备找工作那段时间，系统的复习了下大学所学的知识，期间在网上参考了很多不错的博客，并收集下来了，个人觉得还是不错的，因为这是包含了自己的心血，所以一直没怎么送出来，只给过我的几个同学，还有就是一些学习视频和实战项目视频。借着这次征文的机会，我想送给那些有缘人，希望你或许是那种在求职道路上正在艰难走着的人；或许是大一大二的学弟学妹们却想好好学习，有个奋斗的目标，不堪在大学堕落的；或许是工作一两年后感觉基础还比较薄弱的。要资料的时候期望你能简单的介绍下自己，期望你！联系方式请看文章最下面。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>送一句话，<strong>越努力，越幸运，祝早日成为大神！</strong></p>
<p>这些地方可以找到我：</p>
<ul>
<li>blog:  <a href="http://www.54tianzhisheng.cn/" target="_blank" rel="external">http://www.54tianzhisheng.cn/</a></li>
<li>GitHub: <a href="https://github.com/zhisheng17" target="_blank" rel="external">https://github.com/zhisheng17</a></li>
<li>QQ 群：528776268</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/shanghai.jpeg-1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://yoursite.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
</feed>
